<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java概述</title>
    <url>/2020/11/11/00java%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="1、java编译解析"><a href="#1、java编译解析" class="headerlink" title="1、java编译解析"></a>1、java编译解析</h3><p>源代码.java——字节码.class———机器码0101010</p>
<p>​                (通过编译器)        （通过jvm虚拟机解析）</p>
<p>常见java程序：Application(应用程序)，Servlet(服务器端小程序)</p>
<h3 id="2、java特性"><a href="#2、java特性" class="headerlink" title="2、java特性"></a>2、java特性</h3><blockquote>
<p>面向对象、跨平台、健壮性</p>
</blockquote>
<ul>
<li>跨平台性：在不同的操作系统只要安装一个java虚拟机，</li>
</ul>
<p>​                          即面向UNIX的jvm、面向Windows的jvm、、、、</p>
<ul>
<li>健壮性：java是一种强类型语言，在编译和运行时进行大量的类型检查</li>
</ul>
<p>​                       java有自动垃圾回收功能GC，防止内存分配的错误</p>
<p>​                       java有异常处理机制exception</p>
<ul>
<li>JAVA SE:标准版 standard edition</li>
<li>JAVE EE:企业版 Enterprise Edition</li>
<li>JAVA ME:用于移动设备和嵌入式设备</li>
</ul>
<h3 id="3、JDK开发环境"><a href="#3、JDK开发环境" class="headerlink" title="3、JDK开发环境"></a>3、JDK开发环境</h3><p>（java开发工具）java的核心类库（JAVA API）、JRE 运行环境（jvm虚拟机+一些核心类库API）</p>
<h3 id="4、dos命令环境"><a href="#4、dos命令环境" class="headerlink" title="4、dos命令环境"></a>4、dos命令环境</h3><p>cd..返回上一级目录，dir当前目录，del删除文件</p>
<p>F:改变路径，cd/返回根目录，cd进入目录</p>
<p>md创建目录  ，rd删除目录 ，</p>
<p>ipconfig ip地址 ，systeminfo查看系统信息，</p>
<p>java -version java版本号</p>
<h3 id="5、配置环境变量"><a href="#5、配置环境变量" class="headerlink" title="5、配置环境变量"></a>5、配置环境变量</h3><ul>
<li><p>在path中编辑，%JAVA_HOME%\bin</p>
</li>
<li><p>添加  变量名    JAVA_HOME,</p>
<p>​          变量值：C:\Program Files (x86)\Java\jdk1.8.0_45</p>
</li>
</ul>
<h3 id="6、DOS命令"><a href="#6、DOS命令" class="headerlink" title="6、DOS命令"></a>6、DOS命令</h3><ul>
<li><p>通过javac hello.java命令调用javac.exe程序，生成字节码文件.class</p>
</li>
<li><p>通过java hello命令，调用java.exe程序，使JVM解析字节码文件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;<span class="comment">//主方法，程序的入口</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>存储数据模式</title>
    <url>/2020/11/11/00%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="一、利用Map键值对"><a href="#一、利用Map键值对" class="headerlink" title="一、利用Map键值对"></a>一、利用Map键值对</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个map对象一行记录</span></span><br><span class="line">Map map=<span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;0001&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">Map map1=<span class="keyword">new</span> HashMap();</span><br><span class="line">map1.put(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;0002&quot;</span>);</span><br><span class="line">map1.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;aba&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Map&gt; list=<span class="keyword">new</span> ArrayList&lt;Map&gt;();</span><br><span class="line">list.add(map);</span><br><span class="line">list.add(map1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(List&lt;Map&gt; list)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">     Map tempMap=list.get(i);</span><br><span class="line">     System.out.println(<span class="string">&quot;id号&quot;</span>+tempMap.get(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;姓名&quot;</span>+tempMap.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、利用构造器，使用list存储（javabean）"><a href="#二、利用构造器，使用list存储（javabean）" class="headerlink" title="二、利用构造器，使用list存储（javabean）"></a>二、利用构造器，使用list存储（javabean）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student j=<span class="keyword">new</span> Student(<span class="number">18</span>,<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line">Student j2=<span class="keyword">new</span> Student(<span class="number">19</span>,<span class="string">&quot;李寻欢&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Student&gt; list=<span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">list.add(j);</span><br><span class="line">list.add(j2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>数组&amp;流程控制</title>
    <url>/2020/11/11/01%E6%95%B0%E7%BB%84&amp;%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h3 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h3><blockquote>
<p>一维数组：相同属性数据类型的集合</p>
<p>基本数据类型的数组(  int [ ] a)、引用数据类型的数组（Student [] student）</p>
</blockquote>
<h4 id="1、声明"><a href="#1、声明" class="headerlink" title="1、声明"></a>1、声明</h4><p>（在栈空间创建对象，存放地址）int []a     （ int [40]a错误）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> []arr1;             <span class="comment">//声明</span></span><br></pre></td></tr></table></figure>



<h4 id="2、初始化"><a href="#2、初始化" class="headerlink" title="2、初始化"></a>2、初始化</h4><blockquote>
<p><strong>在堆空间开辟一块连续的空间</strong></p>
</blockquote>
<h5 id="2-1-静态初始化"><a href="#2-1-静态初始化" class="headerlink" title="2.1 静态初始化"></a>2.1 静态初始化</h5><p>长度系统指定   int []a=new int[]{1,2,3} //简化int []a={1,2,3},声明和初始化不能分开写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态初始化声明和初始化不能分开</span></span><br><span class="line"><span class="keyword">int</span> []arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">34</span>&#125;;      <span class="comment">//声明+初始化</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="2-2-动态初始化"><a href="#2-2-动态初始化" class="headerlink" title="2.2 动态初始化"></a>2.2 动态初始化</h5><p>数组元素初始值系统指定 int []arr=new int[2];</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> []a1=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">a1[<span class="number">1</span>]=<span class="number">1</span>;  a1[<span class="number">2</span>]=<span class="number">2</span>; a1[<span class="number">3</span>]=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>



<h5 id="2-3-数组的长度"><a href="#2-3-数组的长度" class="headerlink" title="2.3 数组的长度"></a>2.3 数组的长度</h5><p>长度：数组名.length</p>
<p>数组的地址：数组名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;第一个数组的长度&quot;</span>+arr.length);</span><br><span class="line">System.out.println(<span class="string">&quot;第一个数组的地址&quot;</span>+arr);</span><br><span class="line">System.out.println(<span class="string">&quot;第一个数组元素：&quot;</span>+arr[<span class="number">0</span>]);</span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">50</span>;   <span class="comment">//数组的赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将a2地址给a3。a2和a3指向同一个栈的数组空间</span></span><br><span class="line"><span class="keyword">int</span> []a1=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> []a2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> []a3=a2</span><br></pre></td></tr></table></figure>



<h5 id="2-4-默认值"><a href="#2-4-默认值" class="headerlink" title="2.4 默认值"></a>2.4 默认值</h5><blockquote>
<p>0,0.0,空字符‘\u0000’,false,null</p>
</blockquote>
<h5 id="2-5-数组的异常"><a href="#2-5-数组的异常" class="headerlink" title="2.5 数组的异常"></a>2.5 数组的异常</h5><p>​            数组越界异常 ArrayIndexOutOfBoundException</p>
<p>​            空指针异常 NullPointerException</p>
<h5 id="2-6-遍历"><a href="#2-6-遍历" class="headerlink" title="2.6 遍历"></a>2.6 遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max=array[<span class="number">0</span>];   <span class="comment">//指定最大值为数组的第一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">     <span class="comment">//从数组的第二个元素进行遍历</span></span><br><span class="line">        <span class="keyword">if</span>(max&lt;=array[i]) &#123;</span><br><span class="line">            max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20200720154307341.png" alt="image-20200720154307341"></p>
<h3 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h3><blockquote>
<p>int[] x,y[];    x是一维数组,y是二维数组</p>
</blockquote>
<h4 id="1、声明-1"><a href="#1、声明-1" class="headerlink" title="1、声明"></a>1、声明</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] []a</span><br></pre></td></tr></table></figure>



<h4 id="2、初始化-1"><a href="#2、初始化-1" class="headerlink" title="2、初始化"></a>2、初始化</h4><h5 id="2-1-静态初始化-1"><a href="#2-1-静态初始化-1" class="headerlink" title="2.1 静态初始化"></a>2.1 静态初始化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [][]a0=<span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[][] a1 = &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-动态初始化-1"><a href="#2-2-动态初始化-1" class="headerlink" title="2.2 动态初始化"></a>2.2 动态初始化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">2</span>];  <span class="comment">//定义一个2*2的二维数组</span></span><br><span class="line"> a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">60</span>;</span><br><span class="line"> a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line"> a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">80</span>;</span><br><span class="line"> a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">70</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">a3[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>, <span class="number">4</span>&#125;;     <span class="comment">//a3[0]=&#123;2,4&#125;;错误</span></span><br><span class="line">a3[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">a3[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">System.out.println(a3);  <span class="comment">//二维数组的地址值</span></span><br><span class="line">System.out.println(a3[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//二维数组的第一个一维数组的地址值</span></span><br><span class="line">System.out.println(a3[<span class="number">1</span>][<span class="number">1</span>]);  <span class="comment">//5</span></span><br></pre></td></tr></table></figure>



<h4 id="3、遍历"><a href="#3、遍历" class="headerlink" title="3、遍历"></a>3、遍历</h4><ul>
<li><p>外循环控制的是二维数组的长度，其实就是一维数组的个数。</p>
</li>
<li><p>内循环控制的是一维数组的长度。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">(<span class="keyword">int</span> a[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i].length; j++) &#123;</span><br><span class="line">            System.out.print(a[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、矩阵的逆置，对角线交换"><a href="#4、矩阵的逆置，对角线交换" class="headerlink" title="4、矩阵的逆置，对角线交换"></a>4、矩阵的逆置，对角线交换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arrays1 = &#123;&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">8</span>, <span class="number">5</span>&#125;, &#123;<span class="number">7</span>, <span class="number">6</span>, <span class="number">7</span>&#125;&#125;;</span><br><span class="line">showAll(arrays1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays1.length - <span class="number">1</span>; i++) &#123; </span><br><span class="line">    <span class="comment">//控制行数，若不减一，则对角线也会交换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arrays1[i].length;j++)&#123;    <span class="comment">//控制列数</span></span><br><span class="line">       <span class="keyword">int</span> temp = arrays1[i][j];</span><br><span class="line">       arrays1[i][j] = arrays1[j][i];</span><br><span class="line">       arrays1[j][i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">showAll(arrays1);</span><br></pre></td></tr></table></figure>



<img src="https://csn.damyoung.cn/image-20200717172822041.png" alt="image-20200717172822041" style="zoom:80%;" />

<h3 id="四、分支结构"><a href="#四、分支结构" class="headerlink" title="四、分支结构"></a>四、分支结构</h3><h4 id="1、if"><a href="#1、if" class="headerlink" title="1、if"></a>1、if</h4><blockquote>
<p>格式：if(判断（返回布尔类型）){<br>​                   语句块<br>​             }else if{<br>​             }else{        }<br>​<strong>判断结果必须是布尔类型</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入是否会员：（是Y/否N）&quot;</span>);</span><br><span class="line">String a = sc.next();</span><br><span class="line">System.out.println(<span class="string">&quot;消费金额&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"><span class="keyword">if</span> (b &lt; <span class="number">200</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (a.equals(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;打9.5折&quot;</span>+<span class="string">&quot;消费了&quot;</span>+b*<span class="number">0.95</span>+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;不打折&quot;</span>+<span class="string">&quot;消费了&quot;</span>+b+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (a.equals(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打8折&quot;</span>+<span class="string">&quot;消费了&quot;</span>+b*<span class="number">0.8</span>+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;打9折&quot;</span>+<span class="string">&quot;消费了&quot;</span>+b*<span class="number">0.9</span>+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、switch"><a href="#2、switch" class="headerlink" title="2、switch"></a>2、switch</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>格式： <span class="keyword">switch</span>(表达式(值))&#123; <span class="comment">//表达式和变量</span></span><br><span class="line">      <span class="keyword">case</span> 值<span class="number">1</span>:  <span class="comment">//必须为常数</span></span><br><span class="line">          语句体<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">          语句体<span class="number">2</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> 值<span class="number">3</span>:  </span><br><span class="line">          语句体<span class="number">3</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">         ....</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">          语句体n;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>表达式:能够支持的数据类型（ <strong>byte/short/int/char/String/enum）</strong>  </li>
</ul>
<p>​        <strong>不能为浮点型，布尔型, long。</strong></p>
<p>​        JDK7的版本是可以支持字符串</p>
<ul>
<li><p>根据表达式的值来确定执行哪一个case，这个case会和表达式的值进行比较，如果命中则执行对应的语句体  </p>
</li>
<li><p> 如果未命中，执行default语句    </p>
</li>
<li><p><strong>break</strong>  </p>
<ul>
<li>跳出语句结束switch，若无break,程序<strong>穿透</strong>，会继续执行下面语句 </li>
<li>break后面不可以加代码，因为不会执行 </li>
</ul>
</li>
<li><p><strong>case</strong>   </p>
<ul>
<li>后面的值<strong>只能常量</strong>，故switch用于多个常量执行判断       </li>
<li>case后面跟着的数据类型必须和表达式的值的数据类型完全一致</li>
</ul>
</li>
<li><p><strong>default</strong> 一般位于switch最后面</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;春天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;夏天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;秋天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;冬天&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    System.out.println(<span class="string">&quot;输出非法&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>





<h3 id="五、循环结构"><a href="#五、循环结构" class="headerlink" title="五、循环结构"></a>五、循环结构</h3><h4 id="1、for"><a href="#1、for" class="headerlink" title="1、for"></a>1、for</h4><blockquote>
<p>for(初始化语句，条件表达语句（boolean类型），变量更新语句){<br>​        循环体<br> }</p>
</blockquote>
<ul>
<li><p>返回的true，表示继续执行这个循环C，返回的false，表示结束这个循环</p>
</li>
<li><p>判断语句，返回的结果必须是boolean类型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印五次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;砺峰科技&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="2、while"><a href="#2、while" class="headerlink" title="2、while"></a>2、while</h4><blockquote>
<p>while格式：<br>        变量初始化语句<br>       while(条件表达式){<br>            循环体语句；<br>            变量变更语句;<br>       }</p>
</blockquote>
<ul>
<li><p>while和for的差别:</p>
<p><strong>for适用于循环次数确定时，while可用于循环次数不可知情况。</strong></p>
</li>
<li><p>可以用于判断循环次数</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1+2+3+…+100的过程中，求加到哪一个数的时候其和刚刚超过1000</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,i=<span class="number">1</span>;		<span class="comment">//变量初始化语句</span></span><br><span class="line"><span class="keyword">while</span> (sum &lt;<span class="number">1000</span><span class="comment">//条件表达式,判断语句) &#123;</span></span><br><span class="line">    sum+=i;		<span class="comment">//循环体语句</span></span><br><span class="line">    i++;   <span class="comment">//变量变更语句</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i-<span class="number">1</span>);  <span class="comment">//由于最后多加了一次</span></span><br></pre></td></tr></table></figure>

<h4 id="3、do-while"><a href="#3、do-while" class="headerlink" title="3、do-while"></a>3、do-while</h4><blockquote>
<p><strong>先执行再判断，循环体语句至少执行一次</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line">变量声明语句</span><br><span class="line"><span class="keyword">do</span>&#123;循环体语句；</span><br><span class="line">       变量扩展语句；</span><br><span class="line">&#125;<span class="keyword">while</span>(判断语句);</span><br></pre></td></tr></table></figure>

<p>   若需求要求进入循环体的，要再输出一条语句，使用do-while</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> <span class="keyword">int</span> psw;</span><br><span class="line"> <span class="keyword">do</span>&#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;请输入密码（五位）:&quot;</span>);</span><br><span class="line">     psw=sc.nextInt();</span><br><span class="line"> &#125;<span class="keyword">while</span>(psw!=<span class="number">12354</span>);</span><br><span class="line"> System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4、二次循环"><a href="#4、二次循环" class="headerlink" title="4、二次循环"></a>4、二次循环</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//输出等腰三角形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>-i;j++)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;  				<span class="comment">//倒三角型</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">2</span>*i+<span class="number">1</span>;k++)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;			<span class="comment">// 按1 3 5 7 9输出三角形</span></span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//九九乘法表</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">          <span class="keyword">int</span> a=i*j;</span><br><span class="line">          System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+a+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、流程控制语句"><a href="#六、流程控制语句" class="headerlink" title="六、流程控制语句"></a>六、流程控制语句</h3><h4 id="1、break"><a href="#1、break" class="headerlink" title="1、break"></a>1、break</h4><p><strong>跳出整个循环</strong></p>
<h4 id="2、continue"><a href="#2、continue" class="headerlink" title="2、continue"></a>2、continue</h4><p><strong>跳出当次循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死循环，+上break判断跳出死循环</span></span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;i&quot;</span>+(++i));</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//循环输入一个Java课程5个学生的成绩，统计大于80分的人数    </span></span><br><span class="line">canner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入第&quot;</span>+i+<span class="string">&quot;个学生的成绩&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> a=sc.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">80</span>)&#123;</span><br><span class="line">       <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       count++;</span><br><span class="line">        &#125;</span><br><span class="line">System.out.println(<span class="string">&quot;大于等于80分的人数是&quot;</span>+count)    </span><br></pre></td></tr></table></figure>



<h3 id="七、简单算法"><a href="#七、简单算法" class="headerlink" title="七、简单算法"></a>七、简单算法</h3><h4 id="1、素数判断"><a href="#1、素数判断" class="headerlink" title="1、素数判断"></a>1、素数判断</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><blockquote>
<p>标记判断，除数字1 和自身外是否被其他数整除</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入break，标记flag判断</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入一个数字：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; a; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a % j == <span class="number">0</span>) &#123;       <span class="comment">//进入循环体的都不是素数</span></span><br><span class="line">        flag=<span class="keyword">false</span>;     <span class="comment">//标记，如果不是素数，flag一直是true</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">	 System.out.println(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> 	 System.out.println(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote>
<p>判断整除次数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//除了1和本身能整除，其他都不能，若是count&lt;=2，是素数</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;输入一个数字：&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;   <span class="comment">//if temp&gt;2不是素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a % j == <span class="number">0</span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这个数是素数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;这个数不是素数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、斐波那契数列"><a href="#2、斐波那契数列" class="headerlink" title="2、斐波那契数列"></a>2、斐波那契数列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>,c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line">    c=a+b;</span><br><span class="line">    System.out.println(c+<span class="string">&quot;/&quot;</span>+b+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    sum+=c*<span class="number">1.0</span>/b;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;   <span class="comment">//2/1  3/2  5/3........</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat</title>
    <url>/2020/11/11/02TomCat/</url>
    <content><![CDATA[<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>Servlet/Jsp容器，轻量级服务中间件</p>
<h4 id="idea配置"><a href="#idea配置" class="headerlink" title="idea配置"></a>idea配置</h4><ul>
<li>导入Tomcat 8.5.3.jar包</li>
</ul>
<h4 id="Tomcat主要目录："><a href="#Tomcat主要目录：" class="headerlink" title="Tomcat主要目录："></a>Tomcat主要目录：</h4><ul>
<li>bin 可执行文件</li>
<li>lib  tomcat可运行的jar文件</li>
<li>logs tomcat运行的日志文件</li>
<li>webapps 存放编写的应用</li>
</ul>
<p>URL:统一资源定位符</p>
<p>URI：统一资源标识符</p>
<h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><p>HyperText Transfer Protocol超文件传输协议，传输Html文件</p>
<p>用于定义Web浏览器与Web服务器之间交换数据的过程及数据本身的格式</p>
<h3 id="请求部分"><a href="#请求部分" class="headerlink" title="请求部分"></a>请求部分</h3><h4 id="请求消息行"><a href="#请求消息行" class="headerlink" title="请求消息行"></a>请求消息行</h4><ol>
<li>Get 明文传输，不安全，数据量有限</li>
<li>Post 暗文传输，安全</li>
</ol>
<h4 id="请求消息头"><a href="#请求消息头" class="headerlink" title="请求消息头"></a>请求消息头</h4><p><strong>Tomcat原理</strong></p>
<p>Servlet是java编写服务器端小程序，功能是交互式浏览和修改数据，生成动态web资源</p>
<ul>
<li>请求到达server端，server根据url映射<code>Map&lt;url,servletname&gt;</code>得到相应的servlet</li>
<li>判断Servlet实例是否存在，不存在则加载和实例化Servlet并调用init方法</li>
<li>server创建request/response对象，调用servlet的service方法(doXXX方法)</li>
<li>从request对象获取请求参数，处理将结果给通过response返回</li>
<li>Server不再需要Servlet时，调用destory()方法</li>
</ul>
]]></content>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>标识符&amp;数据类型</title>
    <url>/2020/11/11/02%E6%A0%87%E8%AF%86%E7%AC%A6&amp;%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<blockquote>
<p>ASCII表是Unicode字符集的子集</p>
</blockquote>
<blockquote>
<p><strong>byte,short,char这几个数据类型一旦参与任何形式的运算，都会先将这个数据类型自动的提升到int类型在去赋值</strong></p>
</blockquote>
<h3 id="一、元字符"><a href="#一、元字符" class="headerlink" title="一、元字符"></a>一、元字符</h3><blockquote>
<p>​            \n换行符       \t制表符(8个字符)   \ &quot;转义字符</p>
<p>​            \x 表示十六进制数         \ 表示八进制数</p>
<p>​             \u后面加上四个十六进制代码来表示<strong>Unicode</strong>字符,long a=’\u00FF’</p>
<p>​             \b 退格  ，\f换页  ，\r回车</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\n换行符</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!!&quot;</span>);   <span class="comment">//先输出，在换行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;你好，世界！！&quot;</span>);        <span class="comment">//输出但不换行</span></span><br><span class="line">    System.out.print(<span class="string">&quot;你好，世界\n&quot;</span>);        <span class="comment">//输出再换行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;\n你好，北京&quot;</span>);    <span class="comment">//先换行再输出</span></span><br><span class="line">    System.out.print(<span class="string">&quot;你好\n上海&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;你好 广州！！！\n\n&quot;</span>);  <span class="comment">//先输出，再换俩行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;你好深圳\n&quot;</span>);       <span class="comment">//先输出，在换俩行</span></span><br><span class="line">    System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;\n\n你好 纽约&quot;</span>);      <span class="comment">//先换俩行，在输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;\n-------------&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;Hello World!!!\n你好 世界！！\n你好 中国！！！&quot;</span>);   <span class="comment">//先换行，在输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;\n----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">\t制表符</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;张无忌\t19\t\t长枪&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;黄飞鸿\t20\t\t无影脚&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;李寻欢\t21\t\t飞刀&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">\转义字符</span><br><span class="line">      System.out.println(<span class="string">&quot;\&quot;hhh\&quot;&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;D:\\Game&quot;</span>);   <span class="comment">//在路径加个斜杠转义</span></span><br><span class="line"></span><br><span class="line">\u后面加上十六进制代码来表示Unicode字符</span><br><span class="line"><span class="keyword">char</span> a=<span class="string">&#x27;\u00FF&#x27;</span>;</span><br><span class="line"><span class="keyword">long</span> b=<span class="string">&#x27;\u0022&#x27;</span>;   <span class="comment">//char--&gt;long</span></span><br></pre></td></tr></table></figure>



<h3 id="二、标识符"><a href="#二、标识符" class="headerlink" title="二、标识符"></a>二、标识符</h3><blockquote>
<p>由26个英语字母a-Z，0-9，$,  _组成，可以为中文</p>
</blockquote>
<ul>
<li><p><strong>不能以数字开头</strong> </p>
</li>
<li><p><strong>不能使用关键字和保留关键字</strong>（go ，const常量）</p>
</li>
<li><p><strong>this_is_Ok可以是标识符</strong></p>
</li>
</ul>
<img src="https://csn.damyoung.cn/image-20200715093232699.png" alt="image-20200715093232699" style="zoom:80%;" />



<h3 id="三、关键字"><a href="#三、关键字" class="headerlink" title="三、关键字"></a>三、关键字</h3><blockquote>
<p>static 、void、short、interface、final</p>
</blockquote>
<h3 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h3><p><img src="https://csn.damyoung.cn/image-20200715092453006.png" alt="image-20200715092453006"></p>
<p>​                                                            空常量：null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> Pi=<span class="number">3.14159</span>;       <span class="comment">//常量，不可再赋值</span></span><br><span class="line"><span class="keyword">double</span> pi=<span class="number">3.13</span>; 				<span class="comment">//变量</span></span><br></pre></td></tr></table></figure>



<h3 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h3><blockquote>
<p>格式:赋值类型 变量名=常量值;  声明–&gt;赋值–&gt;使用</p>
</blockquote>
<p>​                <strong>就是给类或者接口等取名字时候用的字符序列</strong></p>
<ul>
<li>一个变量只能在同一作用域作用，同一作用域不能出同名变量，int a=10;</li>
<li>类成员变量、局部变量(<strong>在作用域里面才能用</strong>)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量的使用</span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">133</span>;    <span class="comment">//输出到控制台</span></span><br><span class="line"><span class="keyword">int</span> sum1=sum;    <span class="comment">//给其他变量赋值</span></span><br><span class="line"><span class="keyword">int</span> sum2=sum+sum1;    <span class="comment">//参与运算</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//多个变量连续赋值</span></span><br><span class="line">  <span class="keyword">int</span> a,b,c;  a=b=c=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> a3,b3,c3=<span class="number">1</span>; a3=b3=c3+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">boolean</span> a= b==<span class="number">1</span>; </span><br><span class="line"> <span class="comment">//int a=b=c=10;,只声明了变量a;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="六、数据类型"><a href="#六、数据类型" class="headerlink" title="六、数据类型"></a>六、数据类型</h3><h4 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h4><p>字符串是一个类，</p>
<p><strong>属于引用数据类型</strong>，String str=new String(“好的”);                        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String字符串连接,左边的数据是字符串，则后面的数据全部都是字符串</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);  <span class="comment">//helloa1</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+(<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>));  <span class="comment">//hello98</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>+<span class="string">&quot;hello&quot;</span>);  <span class="comment">//98hello</span></span><br><span class="line">System.out.println(<span class="string">&quot;5+5=&quot;</span>+<span class="number">5</span>+<span class="number">5</span>);  <span class="comment">//5+5=55</span></span><br><span class="line">System.out.println(<span class="number">5</span>+<span class="number">5</span>+<span class="string">&quot;=5+5&quot;</span>);  <span class="comment">//10=5+5//10=5+5</span></span><br></pre></td></tr></table></figure>



<h4 id="2、整数类型"><a href="#2、整数类型" class="headerlink" title="2、整数类型    "></a>2、整数类型    <img src="https://csn.damyoung.cn/image-20200715091835542.png" alt="image-20200715091835542"></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整型</span></span><br><span class="line"><span class="keyword">int</span> a1,b1,c1;  <span class="comment">//声明多个变量</span></span><br><span class="line"><span class="keyword">long</span> a2=<span class="number">100000003333L</span>;   <span class="comment">//长整型超出范围后面要加L</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浮点型</span></span><br><span class="line"><span class="keyword">double</span> f2=<span class="number">2.34</span>;  		<span class="comment">//浮点型默认为double</span></span><br><span class="line"><span class="keyword">double</span> f3=<span class="number">0.7E-3</span>;		<span class="comment">//0.7*10^-3</span></span><br><span class="line"><span class="keyword">float</span> f1=<span class="number">2.3f</span>;          <span class="comment">//float型后面要加f</span></span><br><span class="line"><span class="keyword">float</span> foo = <span class="number">42e1</span>;	<span class="comment">//错误，科学计算法默认是double类型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符型</span></span><br><span class="line"><span class="keyword">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">char</span> b=<span class="number">65</span>;  <span class="comment">//根据ASCII编码，48--&gt;0  65--&gt;A  97--&gt;a</span></span><br><span class="line"><span class="keyword">char</span> d=(<span class="keyword">char</span>)(c+<span class="number">1</span>);   <span class="comment">//输出为d</span></span><br><span class="line"><span class="keyword">char</span> f=c+<span class="number">1</span>;   <span class="comment">//结果为98，输出为int类型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//布尔类型，只有ture和false</span></span><br><span class="line"><span class="keyword">boolean</span> a=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> d=<span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3、类型转换"><a href="#3、类型转换" class="headerlink" title="3、类型转换"></a>3、类型转换</h4><ul>
<li><p>自动类型转换：从小到大</p>
</li>
<li><p>强制类型转换：从大的数据到小的数据，<strong>boolean类型、String不参与任何形式转换</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动类型转换，从小到大</span></span><br><span class="line"><span class="keyword">double</span> num1=-<span class="number">1</span>;   		<span class="comment">//int--&gt;double</span></span><br><span class="line"><span class="keyword">float</span> num2=<span class="number">0x0123</span>;		<span class="comment">//int--&gt;float</span></span><br><span class="line">System.out.println(num1);   <span class="comment">//double 8个字节，int 4个字节</span></span><br><span class="line"><span class="comment">//强制类型转换</span></span><br><span class="line"><span class="keyword">int</span> i=(<span class="keyword">int</span>)<span class="number">2.2</span>; <span class="comment">//输出为2，强制类型转换会造成精度丢失</span></span><br><span class="line"><span class="keyword">int</span> i1=<span class="number">264</span>;    <span class="comment">//00000000 00000000 00000001 00001000</span></span><br><span class="line"><span class="keyword">byte</span> b=(<span class="keyword">byte</span>)i1;  <span class="comment">//精度丢失，剩下00001000--&gt;8</span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>



<ul>
<li>二进制数前面加<strong>0b</strong>，十六进制加<strong>0x</strong>，八进制加0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1=<span class="number">0b0101</span>;  <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">int</span> num2=<span class="number">011</span>;     <span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">int</span> num3=<span class="number">0x0b</span>;    <span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据ASCII编码，<strong>48–&gt;0  65–&gt;A  97–&gt;a</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> b=<span class="number">65</span>;          <span class="comment">//根据ASCII编码，48--&gt;0  65--&gt;A  97--&gt;a</span></span><br></pre></td></tr></table></figure>



<p>误区：类体只能有声明和方法，不能存在语句；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 变量 </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;		<span class="comment">//java为强类型语言，在类中自动赋值</span></span><br><span class="line">    i=<span class="number">1</span>;  		<span class="comment">//错误，类体中不能有语句</span></span><br><span class="line">  &#125;      <span class="comment">//改为int i=1; </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方法中可分开写</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 变量 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//变量先声明再赋值</span></span><br><span class="line">   <span class="comment">// int a=1;</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        a=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src="https://csn.damyoung.cn/image-20200715165643970.png" alt="image-20200715165643970" style="zoom: 67%;" />

<h3 id="七、运算符"><a href="#七、运算符" class="headerlink" title="七、运算符"></a>七、运算符</h3><blockquote>
<p>单目运算符〉算术运算符〉比较运算符〉逻辑运算符（除了“非”运算）</p>
</blockquote>
<blockquote>
<p><strong>byte,short,char这几个数据类型一旦参与任何形式的运算，都会先将这个数据类型自动的提升到int类型在去赋值</strong></p>
</blockquote>
<h4 id="1、算术运算符"><a href="#1、算术运算符" class="headerlink" title="1、算术运算符"></a>1、算术运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加法运算</span></span><br><span class="line"><span class="keyword">int</span> num1=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2=<span class="number">12.3</span>;</span><br><span class="line"><span class="keyword">double</span> sum=num1+num2; <span class="comment">//要由double接收，不存在强转</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//除法</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">5</span>;<span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">System.out.println(a/b);     <span class="comment">//输出为2</span></span><br><span class="line">System.out.println(a*<span class="number">1.0</span>/b); <span class="comment">//输出为2.5  </span></span><br><span class="line">System.out.println(<span class="number">5.0</span>/<span class="number">2</span>);  <span class="comment">//输出为2.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//%取余，操作数可为浮点数</span></span><br><span class="line"><span class="keyword">double</span> a=<span class="number">52.2</span>;</span><br><span class="line"><span class="keyword">double</span> i=a%<span class="number">10</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="comment">//-7%3和-7%-3结果还是-1，可见求余结果和%右边的数正负无关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自增</span></span><br><span class="line"><span class="keyword">int</span> a1=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=++a1;     <span class="comment">//输出为2，</span></span><br><span class="line"><span class="keyword">int</span> c=a1++;   <span class="comment">//输出为1</span></span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//byte参与运算</span></span><br><span class="line">  <span class="keyword">byte</span> a=<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">byte</span> b=<span class="number">11</span>;</span><br><span class="line">  <span class="keyword">int</span> c=a+b;  <span class="comment">//byte 类型参与运算自动提升为int类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、赋值运算符"><a href="#2、赋值运算符" class="headerlink" title="2、赋值运算符"></a>2、赋值运算符</h4><blockquote>
<p><strong>赋值左边不能为表达式。a=b+3=c错误;</strong></p>
<p><strong>扩展运算符本身就隐藏一个强制类型转换的问题</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">赋值运算符,+= ,-=,/=，*=，%=(取余，操作数必须为整数)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;<span class="keyword">int</span> y=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> z=x*y;</span><br><span class="line">System.out.println(z);  <span class="comment">//输出2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展展运算符本身就隐藏一个强制类型转换的问题</span></span><br><span class="line">  <span class="keyword">int</span> sum1=<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">double</span> sum2=<span class="number">1.2</span>;</span><br><span class="line">  sum1+=sum2; <span class="comment">//输出为11，赋值运算符本身带有强制类型转换</span></span><br><span class="line">  <span class="keyword">int</span> sum3=sum1+sum2;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3、比较运算符"><a href="#3、比较运算符" class="headerlink" title="3、比较运算符"></a>3、比较运算符</h4><p>结果都是boolean型 == ， ！=，&gt;=</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">String str2=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">System.out.println(str1==str2);</span><br><span class="line">System.out.println(str1.equals(str2));</span><br></pre></td></tr></table></figure>



<h4 id="4、逻辑运算符"><a href="#4、逻辑运算符" class="headerlink" title="4、逻辑运算符"></a>4、逻辑运算符</h4><p>逻辑与&amp;  逻辑或|，逻辑非 ！，^逻辑异或</p>
<p>&amp;&amp;具备短路效果，即左边的数据如果为false，那么不在执行右边的数据</p>
<p>||短路或</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">1</span>;</span><br><span class="line">System.out.println(a&lt;b&amp;a&gt;b); <span class="comment">//ture&amp;false=false</span></span><br><span class="line">System.out.println(a&gt;b&amp;&amp;a&lt;b);  <span class="comment">//短路与，当第一个为false时，后面不再运行</span></span><br><span class="line">System.out.println(a&lt;b|a&gt;b); <span class="comment">//true|false=ture</span></span><br><span class="line">System.out.println(a&lt;b||a&gt;b);  <span class="comment">//短路或，当第一个为ture时，后面不再运行</span></span><br><span class="line">System.out.println(a&lt;b^a&gt;b);  <span class="comment">//ture^false=ture  不同为ture</span></span><br><span class="line">System.out.println(!(a&lt;b));   <span class="comment">//!true=false</span></span><br><span class="line"></span><br><span class="line">System.out.println((a++==<span class="number">2</span>)&amp;(b++==<span class="number">2</span>)); <span class="comment">//false&amp;ture=false 输出a=2，b=3</span></span><br><span class="line">System.out.println((a++==<span class="number">2</span>)&amp;&amp;(b++==<span class="number">2</span>)); <span class="comment">//a=2,b=2</span></span><br></pre></td></tr></table></figure>



<h4 id="5、位运算符"><a href="#5、位运算符" class="headerlink" title="5、位运算符"></a>5、位运算符</h4><p>位运算符，<strong>转化为二进制补码比较,  最高位为1要取反+1</strong></p>
<p>按位与&amp;，按位或|，按位取反~，按位异或^</p>
<p>&lt;&lt;左移（右边空位补0），&gt;&gt;右移</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> A=<span class="number">60</span>; <span class="comment">//二进制补码0011 1100</span></span><br><span class="line"><span class="keyword">int</span> B=<span class="number">4</span>;  <span class="comment">//二进制补码0000 0100</span></span><br><span class="line">System.out.println(A&amp;B);  <span class="comment">//按位与，0000 0100  --&gt;4</span></span><br><span class="line">System.out.println(A|B);  <span class="comment">//按位或，0011 1100   --&gt;60</span></span><br><span class="line">System.out.println(A^B);  <span class="comment">//按位异或，0011 1000  --&gt;56</span></span><br><span class="line">System.out.println(~A);  <span class="comment">//按位取反，1100 0011 --&gt;1011 1101--&gt;-61负数，除符号位取反+1</span></span><br><span class="line">System.out.println(B&gt;&gt;<span class="number">1</span>); <span class="comment">//右移一位0000 0010 --&gt;2</span></span><br></pre></td></tr></table></figure>



<h4 id="6、三目运算符"><a href="#6、三目运算符" class="headerlink" title="6、三目运算符"></a>6、三目运算符</h4><blockquote>
<p>int max=a&gt;b? a:b; </p>
<p>String height=a&gt;b? “a大”:”b大”</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> max=a&gt;b?a:b;   <span class="comment">// 如果a&gt;b为ture返回a，否则返回b</span></span><br><span class="line">System.out.println(<span class="string">&quot;俩个数最大值是：&quot;</span>+max);</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>/2020/11/11/03IO%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、File工具类"><a href="#一、File工具类" class="headerlink" title="一、File工具类"></a>一、File工具类</h2><blockquote>
<p>通过IO流来对文件进行操作</p>
</blockquote>
<h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><h4 id="1-1-分隔符"><a href="#1-1-分隔符" class="headerlink" title="1.1 分隔符"></a>1.1 分隔符</h4><ul>
<li><p>路径分隔符    pathSeparator（；）</p>
</li>
<li><p>名称分隔符     separator(Windows \   linux  /)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path=<span class="string">&quot;D:\\TopView\\java&quot;</span>;</span><br><span class="line">path=<span class="string">&quot;D:&quot;</span>+File.separator+<span class="string">&quot;TopView&quot;</span>+File.separator+<span class="string">&quot;java&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a>1.2 路径</h4><ul>
<li>绝对路径：有盘符</li>
<li>相对路径:   相对项目而言，无盘符</li>
</ul>
<h3 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h3><ul>
<li>File(String pathname);            </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;E:\\aa&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>File(String parent, String child)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">&quot;E:&quot;</span>,<span class="string">&quot;A.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>File(File parent,String child);</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File f=<span class="keyword">new</span> File(<span class="string">&quot;E:\\aa&quot;</span>);</span><br><span class="line">File f2=<span class="keyword">new</span> File(f,<span class="string">&quot;test3.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="3、普通方法"><a href="#3、普通方法" class="headerlink" title="3、普通方法"></a>3、普通方法</h3><h4 id="3-1-创建"><a href="#3-1-创建" class="headerlink" title="3.1 创建"></a>3.1 创建</h4><p><code>createNewFile()</code> 创建新文件，返回boolean类型</p>
<p><code>mkdir()</code>: 创建目录（文件夹），不能越级创建（中间目录不会被创建）</p>
<p><code>mkdirs()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;E:\\a\\b&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(file.mkdir()); //只能创建单级目录</span></span><br><span class="line">System.out.println(file.mkdirs()); <span class="comment">//mkdirs()</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h4><p><code>delete()</code>: 删除,文件夹必须是空才能删除（先删除文件在删除文件夹）</p>
<h4 id="3-3-获取"><a href="#3-3-获取" class="headerlink" title="3.3 获取"></a>3.3 获取</h4><p><code>listFiles()</code>:返回所有文件(含文件夹)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;F:\\&quot;</span>);</span><br><span class="line">File[] files=file.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File s:files)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!s.isFile()) &#123;</span><br><span class="line">       System.out.println(s.getName());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>list()</code> :  返回的String数组</p>
<p>getPath()     getAbsolutePath() 获取绝对路径</p>
<p>getName() 获取文件名     </p>
<p>length() 获取文件的长度</p>
<h4 id="3-4-判断"><a href="#3-4-判断" class="headerlink" title="3.4 判断"></a>3.4 判断</h4><p>isFile()     isDirectory()是否是目录      exists()</p>
<h4 id="3-5-重命名"><a href="#3-5-重命名" class="headerlink" title="3.5 重命名"></a>3.5 重命名</h4><p>renameTo(File)</p>
<ul>
<li>路径相同，则是重命名</li>
<li>路径不同，则重命名且剪切（复制并删除）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//旧命名</span></span><br><span class="line">File file=<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>);</span><br><span class="line"> <span class="comment">//新命名</span></span><br><span class="line">File file1=<span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>);</span><br><span class="line">file.renameTo(file1)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-递归"><a href="#3-6-递归" class="headerlink" title="3.6 递归"></a>3.6 递归</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dd</span><span class="params">(File file)</span></span>&#123;</span><br><span class="line">    File[] fileArray=file.listFiles();</span><br><span class="line">    <span class="keyword">if</span>(fileArray!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(File file1:fileArray)&#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isDirectory())&#123;</span><br><span class="line">                dd(file);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;删除&quot;</span>+file.getName()+file.delete());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20200804203021432.png" alt="image-20200804203021432"></p>
<h2 id="二、IO流"><a href="#二、IO流" class="headerlink" title="二、IO流"></a>二、IO流</h2><h3 id="0、IO流的分类"><a href="#0、IO流的分类" class="headerlink" title="0、IO流的分类"></a>0、IO流的分类</h3><ul>
<li>按照流的流向，分为<strong>输入流</strong>和<strong>输出流</strong></li>
<li>按照操作单元划分，分为<strong>字节流</strong>和<strong>字符流</strong></li>
<li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li>
</ul>
<blockquote>
<p>字符流、缓冲流一般都要刷新flush();</p>
<p><strong>输入输出是相对java编译器而言</strong></p>
</blockquote>
<ul>
<li>字节流：1个字节 InputStream OutputStream</li>
<li>字符流：2个字节 Reader Writer</li>
<li>高效流：带有缓冲区，处理速度比较高效</li>
<li>转换流：字节转换为字符</li>
</ul>
<blockquote>
<p>close():关闭IO连接通道，并且释放当前的系统资源,再次使用只能再次创建流</p>
</blockquote>
<h3 id="1、字节流"><a href="#1、字节流" class="headerlink" title="1、字节流"></a>1、字节流</h3><p>字节流：字节0-255范围</p>
<p>构造方法： InputStream f1=new FileInputStream(File file,boolean append)</p>
<h4 id="1、InputStream"><a href="#1、InputStream" class="headerlink" title="1、InputStream"></a>1、InputStream</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream f1=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\Javacode\\Stream\\input.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>read(byte[] b):通过游标移动来读取，若是字符不存在返回-1；</p>
<h5 id="1-1-单个字符"><a href="#1-1-单个字符" class="headerlink" title="1.1 单个字符"></a>1.1 单个字符</h5><p> read():游标移动,无字节返回-1</p>
<p> read(byte[]a ) 返回的是读取的个数(数组长度够返回文件长度)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((data=f1.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">	System.out.println((<span class="keyword">char</span>)data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-多个字符"><a href="#1-2-多个字符" class="headerlink" title="1.2 多个字符"></a>1.2 多个字符</h5><p>​        方法：available():获取流的长度</p>
<p>​        read(byte[] b);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] b=<span class="keyword">new</span> <span class="keyword">byte</span>[f1.available()];</span><br><span class="line"><span class="keyword">while</span>(f1.read(b)!=-<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(b)); <span class="comment">//解码</span></span><br><span class="line">    num++;</span><br><span class="line">   <span class="comment">// b=new byte[4];  //清空，不然覆盖后（存在旧字节）</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure>

<h4 id="2、OutputStream"><a href="#2、OutputStream" class="headerlink" title="2、OutputStream"></a>2、OutputStream</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\Javacode\\Stream\\output.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>write(int o)</p>
<p>write(byte b[]，int off,int len)off开始偏移量为len,</p>
<p>write(byte[] b)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] b=<span class="string">&quot;hello World!&quot;</span>.getBytes(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//编码</span></span><br><span class="line">out.write(b);</span><br></pre></td></tr></table></figure>

<h4 id="3、文件的拷贝"><a href="#3、文件的拷贝" class="headerlink" title="3、文件的拷贝"></a>3、文件的拷贝</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream f1=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\Javacode\\Stream\\hh.gif&quot;</span>);</span><br><span class="line">OutputStream o1=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\Javacode\\Stream\\hhhh.gif&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] b1=<span class="keyword">new</span> <span class="keyword">byte</span>[f1.available()];</span><br><span class="line">f1.read(b1);</span><br><span class="line">o1.write(b1);</span><br></pre></td></tr></table></figure>

<h3 id="2、字符流"><a href="#2、字符流" class="headerlink" title="2、字符流"></a>2、字符流</h3><h4 id="2-1-字符编码"><a href="#2-1-字符编码" class="headerlink" title="2.1 字符编码"></a>2.1 字符编码</h4><p>​        utf-8：英文1个字节，中文3个字节</p>
<pre><code>     GBK:第一个字节为负数，第二个字节可正可负</code></pre>
<p>（1）编码：” “.getBytes(“GBK”);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String school=<span class="string">&quot;社会&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b=school.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>（2）解码：new String(b,”GBK”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(new String(b,&quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure>

<p>（3）换行：\r\n windows ,\n linux</p>
<h4 id="2-2-Reader"><a href="#2-2-Reader" class="headerlink" title="2.2 Reader"></a>2.2 Reader</h4><p>Reader–&gt;FileReader,定义一个字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Reader r=<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\Javacode\\Stream\\reader.txt&quot;</span>);</span><br><span class="line"><span class="keyword">char</span>[] c=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span> (r.read(c)!=-<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(c );</span><br><span class="line">    c=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-Writer"><a href="#2-3-Writer" class="headerlink" title="2.3 Writer"></a>2.3 Writer</h4><blockquote>
<p>构造方法：Writer–&gt;FileWriter<strong>存在缓冲区</strong></p>
<p>​        默认是替换模式false，若<strong>追加模式true</strong></p>
<pre><code>    Writer w=new FileWriter(String file,boolean append);</code></pre>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Writer w=<span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\Javacode\\Stream\\reader.txt&quot;</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>flush()：刷新缓冲区</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">w.write(<span class="string">&quot;床前明月光&quot;</span>);   <span class="comment">//写入缓冲区</span></span><br><span class="line">w.flush(); <span class="comment">//缺少将无法写入</span></span><br></pre></td></tr></table></figure>



<h3 id="3、缓冲流（高效流）"><a href="#3、缓冲流（高效流）" class="headerlink" title="3、缓冲流（高效流）"></a>3、缓冲流（高效流）</h3><blockquote>
<p>BufferWriter、BufferReader</p>
</blockquote>
<p>存在8k的缓冲区，数据未达到限值，不会写入文件，需要<strong>刷新flush()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(w);</span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(r);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Writer w=<span class="keyword">new</span> FileWriter(<span class="string">&quot;F:\\Javacode\\Stream\\reader.txt&quot;</span>);</span><br><span class="line">BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(w);</span><br><span class="line">bw.write(<span class="string">&quot;春眠不觉晓&quot;</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line">bw.flush();</span><br><span class="line"></span><br><span class="line">Reader r=<span class="keyword">new</span> FileReader(<span class="string">&quot;F:\\Javacode\\Stream\\reader.txt&quot;</span>);</span><br><span class="line">BufferedReader br=<span class="keyword">new</span> BufferedReader(r);</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;     <span class="comment">//一次读一行</span></span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、转换流"><a href="#4、转换流" class="headerlink" title="4、转换流"></a>4、转换流</h3><blockquote>
<p><strong>将字节流转化为字符流</strong></p>
</blockquote>
<h4 id="4-1-InputStreamReader"><a href="#4-1-InputStreamReader" class="headerlink" title="4.1 InputStreamReader"></a>4.1 InputStreamReader</h4><p>​        用于将字节输入流转换为字符流</p>
<p>​        InputStreamReader(InputStream in , String charseName)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\Javacode\\Stream\\reader.txt&quot;</span>);</span><br><span class="line">Reader r=<span class="keyword">new</span> InputStreamReader(in,<span class="string">&quot;UTF-8&quot;</span>);      <span class="comment">//解码</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-OutputStreamWriter"><a href="#4-2-OutputStreamWriter" class="headerlink" title="4.2 OutputStreamWriter"></a>4.2 OutputStreamWriter</h4><p>​        用于将字节输出流转换为字符流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\Javacode\\Stream\\reader2.txt&quot;</span>);</span><br><span class="line">Writer w=<span class="keyword">new</span> OutputStreamWriter(out,<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-3-键盘输入"><a href="#4-3-键盘输入" class="headerlink" title="4.3 键盘输入"></a>4.3 键盘输入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> BufferReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String s = input.nextLine();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure>



<h3 id="5、对象流"><a href="#5、对象流" class="headerlink" title="5、对象流"></a>5、对象流</h3><p>   将java对象的基本数据类型和图形写入ObjectOutputStream（支持java.io.Serializable的对象）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;F:\\Javacode\\Stream\\dd.txt&quot;</span>);</span><br><span class="line">ObjectOutputStream objo=<span class="keyword">new</span> ObjectOutputStream(out);</span><br></pre></td></tr></table></figure>

<h4 id="5-1-写入"><a href="#5-1-写入" class="headerlink" title="5.1 写入"></a>5.1 写入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逐个写入</span></span><br><span class="line">objo.writeObject(p);</span><br><span class="line">objo.writeObject(p2);</span><br><span class="line">objo.writeObject(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用list</span></span><br><span class="line">List&lt;Person&gt; list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(p);list.add(p1); list.add(p2);</span><br></pre></td></tr></table></figure>

<h4 id="5-2-遍历"><a href="#5-2-遍历" class="headerlink" title="5.2 遍历"></a>5.2 遍历</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p=(Person) o.readObject();</span><br><span class="line">System.out.println(p);</span><br><span class="line">Person p1=(Person) o.readObject();</span><br><span class="line">System.out.println(p1);</span><br><span class="line">Person p2=(Person) o.readObject();</span><br><span class="line">System.out.println(p2)</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list= (List&lt;Person&gt;) o.readObject();</span><br><span class="line">	<span class="keyword">for</span> (Object o1:list) &#123;</span><br><span class="line">		System.out.println(o1);</span><br><span class="line">&#125;</span><br><span class="line">            </span><br><span class="line"> <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"> 	<span class="keyword">try</span> &#123;</span><br><span class="line"> 		Person p=(Person)o.readObject(); <span class="comment">//指针下移</span></span><br><span class="line"> 		System.out.println(p);</span><br><span class="line">		 &#125;<span class="keyword">catch</span> (EOFException e)&#123;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">	 &#125;</span><br><span class="line"> &#125;</span><br><span class="line">            </span><br></pre></td></tr></table></figure>



<h2 id="三、IO模型"><a href="#三、IO模型" class="headerlink" title="三、IO模型"></a>三、IO模型</h2><h4 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h4><p>Blocking I/O，同步阻塞IO，数据的读取与写入都必须阻塞在一个线程内等待完成，这种方式在连接数不是特别高的情况下，这种模型比较不错，可以让每个线程都专注于自己的IO，并且编程模型简单，也不用过多的考虑系统的过载、限流等问题。但是面对十万甚至是百万级连接的时候，传统BIO模型是无能为力的，因此需要一些更高效的IO来面对更高的并发量。</p>
<h4 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h4><p>new I/O,同步非阻塞IO.它是支持面向缓存的，基于通道的IO操作方法。但是其IO行为还是同步的，对于NIO来说，业务线程是在IO操作准备好之后才会得到通知，接着由该线程自行完成IO操作，IO操作本身是同步。</p>
<h4 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h4><p>Asynchronous IO,是异步非阻塞IO，它是基于事件和回调机制实现的，也是应用操作之后会直接返回，不会阻塞在那里，当后台处理完成后，操作系统会通知相应的线程进行后续的操作。</p>
]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>jsp</title>
    <url>/2020/11/11/04jsp/</url>
    <content><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p><strong>html静态内容</strong></p>
<p>java Server Pages <strong>开发动态Web资源</strong></p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>Java JDK、Tomcat服务器、配置环境变量</p>
<h3 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h3><p><strong>解析JSP文件，将JSP文件转为servlet，编译servlet</strong></p>
<ul>
<li>初始化阶段</li>
<li>执行阶段</li>
<li>销毁阶段</li>
</ul>
<h3 id="二、jsp和Servlet"><a href="#二、jsp和Servlet" class="headerlink" title="二、jsp和Servlet"></a>二、jsp和Servlet</h3><p>Servlet:负责 <strong>获取表单数据、处理业务逻辑、分发转向</strong></p>
<p>Jsp:代码显示模块。重点在于<strong>显示数据</strong></p>
<img src="https://csn.damyoung.cn/image-20200916162638158.png" alt="image-20200916162638158" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200917102959090.png" alt="image-20200917102959090" style="zoom: 80%;" />

<h3 id="三、jsp基本语法"><a href="#三、jsp基本语法" class="headerlink" title="三、jsp基本语法"></a>三、jsp基本语法</h3><h4 id="1、jsp脚本"><a href="#1、jsp脚本" class="headerlink" title="1、jsp脚本"></a>1、jsp脚本</h4><p>**&lt;%    java代码    %&gt;、&lt;%    =2+3(表达式)**    %&gt; == out.print(2+3)</p>
<h4 id="2、三大指令"><a href="#2、三大指令" class="headerlink" title="2、三大指令"></a>2、三大指令</h4><p><strong>&lt;%@ page/include/taglib =””%&gt;</strong></p>
<h5 id="（1）page"><a href="#（1）page" class="headerlink" title="（1）page"></a>（1）page</h5><p>用于定义jsp页面的各种属性</p>
<img src="https://csn.damyoung.cn/image-20200916163841073.png" alt="image-20200916163841073" style="zoom: 80%;" />

<h5 id="（2）include"><a href="#（2）include" class="headerlink" title="（2）include"></a>（2）include</h5><p>把其他资源包含到当前页面中</p>
<img src="https://csn.damyoung.cn/image-20200916163911731.png" alt="image-20200916163911731" style="zoom: 80%;" />

<p>静态包含：&lt;%@ include file=”**/**include/header.jsp” %&gt;</p>
<p>动态包含：&lt;jsp:include page=”/include/header.jsp”&gt;&lt; /jsp:include&gt;</p>
<p><strong>区别：</strong></p>
<p>前者：在解析时就把两个文件合并</p>
<p>后者：不会合并文件，当代码执行到include时，才包含另一个文件的内容。</p>
<h5 id="（3）taglib"><a href="#（3）taglib" class="headerlink" title="（3）taglib"></a>（3）taglib</h5><p>在JSP页面中导入JSTL标签库。替换jsp中的java代码片段。</p>
<h4 id="3、六大动作"><a href="#3、六大动作" class="headerlink" title="3、六大动作"></a>3、六大动作</h4><p>动态包含&lt; jsp:include&gt;</p>
<p>请求转发 &lt; jsp:forward &gt;</p>
<p>设置请求参数 &lt; jsp:param&gt;</p>
<p>创建对象  &lt; jsp:useBean&gt;</p>
<p>对象属性赋值&lt; jsp:setProperty&gt;</p>
<p>取出对象属性值&lt; jsp:getProperty&gt;</p>
<h4 id="4、内置对象"><a href="#4、内置对象" class="headerlink" title="4、内置对象"></a>4、内置对象</h4><p>request、reponse、session、application、</p>
<p>exception、page、config、out</p>
<p>pageContext</p>
<h4 id="5、pageContext域"><a href="#5、pageContext域" class="headerlink" title="5、pageContext域"></a>5、pageContext域</h4><p><strong>域对象，生命周期为当前jsp页面</strong></p>
<p>findAttribute(String name);   自动从page request session application依次查找，找到了就取值，结束查找。</p>
<p><strong>可以操作其他三个域对象</strong></p>
<p><img src="https://csn.damyoung.cn/image-20200916165030469.png" alt="image-20200916165030469"></p>
<h3 id="四、EL表达式"><a href="#四、EL表达式" class="headerlink" title="四、EL表达式"></a>四、EL表达式</h3><p>expression language</p>
<p><strong>jsp获取数据的规范</strong></p>
<blockquote>
<p>当el表达式首字母大写，会判断第二个字母大小写，小写，抛异常；大写，则直接拼接get，形成getter方法</p>
<p>当el表达式首字母小写，会判断第二个字母大小写，大写，必须第一个字母大写；否则无法获取值</p>
<p>el首字母大写，至少第二个字母必须大写。</p>
</blockquote>
<h4 id="1、直接获取"><a href="#1、直接获取" class="headerlink" title="1、直接获取"></a>1、直接获取</h4><img src="https://csn.damyoung.cn/image-20200917111912413.png" alt="image-20200917111912413" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200917115049001.png" alt="image-20200917115049001" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200917111942792.png" alt="image-20200917111942792" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200917111953729.png" alt="image-20200917111953729" style="zoom:80%;" />

<h4 id="2、域"><a href="#2、域" class="headerlink" title="2、域"></a>2、域</h4><p><strong>未指定则按从上往下找</strong></p>
<p><img src="https://csn.damyoung.cn/image-20200917113240622.png" alt="image-20200917113240622"></p>
<table>
<thead>
<tr>
<th>EL隐式对象引用名称</th>
<th>类型</th>
<th>JSP内置对象名称</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>pageContext</td>
<td>javax.servlet.jsp.PageContext</td>
<td>pageContext</td>
<td align="center">一样的</td>
</tr>
<tr>
<td>pageScope</td>
<td>java.util.Map&lt;String,Object&gt;</td>
<td>没有对应的</td>
<td align="center">pageContext范围中存放的数据,页面范围</td>
</tr>
<tr>
<td>requestScope</td>
<td>java.util.Map&lt;String,Object&gt;</td>
<td>没有对应的</td>
<td align="center">请求范围数据</td>
</tr>
<tr>
<td>sessionScope</td>
<td>java.util.Map&lt;String,Object&gt;</td>
<td>没有对应的</td>
<td align="center">会话范围数据</td>
</tr>
<tr>
<td>applicationScope</td>
<td>java.util.Map&lt;String,Object&gt;</td>
<td>没有对应的</td>
<td align="center">应用范围数据</td>
</tr>
<tr>
<td>param</td>
<td>java.util.Map&lt;String,String&gt;</td>
<td>没有对应的</td>
<td align="center">一个请求参数</td>
</tr>
<tr>
<td>paramValues</td>
<td>java.util.Map&lt;String,String[]&gt;</td>
<td>没有对应的</td>
<td align="center">重名请求参数</td>
</tr>
<tr>
<td>header</td>
<td>java.util.Map&lt;String,String&gt;</td>
<td>没有对应的</td>
<td align="center">一个请求消息头</td>
</tr>
<tr>
<td>headerValues</td>
<td>java.util.Map&lt;String,String[]&gt;</td>
<td>没有对应的</td>
<td align="center">重名请求消息头</td>
</tr>
<tr>
<td>initParam</td>
<td>java.util.Map&lt;String,String&gt;</td>
<td>没有对应的</td>
<td align="center">web.xml中全局参数</td>
</tr>
<tr>
<td>cookie</td>
<td>java.util.Map&lt;String,Cookie&gt;</td>
<td>没有对应的</td>
<td align="center">key:cookie对象的name值</td>
</tr>
</tbody></table>
<h4 id="3、param请求参数"><a href="#3、param请求参数" class="headerlink" title="3、param请求参数"></a>3、param请求参数</h4><p><strong>获取表单元素</strong></p>
<img src="https://csn.damyoung.cn/image-20200917113941184.png" alt="image-20200917113941184" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200917113918244.png" alt="image-20200917113918244" style="zoom: 80%;" />

<h4 id="4、运算"><a href="#4、运算" class="headerlink" title="4、运算"></a>4、运算</h4><h5 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h5><p>判断null</p>
<img src="https://csn.damyoung.cn/image-20200917141810079.png" alt="image-20200917141810079" style="zoom:80%;" />

<h5 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h5><img src="https://csn.damyoung.cn/image-20200917141828111.png" alt="image-20200917141828111" style="zoom:80%;" />

<h3 id="五、JSTL"><a href="#五、JSTL" class="headerlink" title="五、JSTL"></a>五、JSTL</h3><p>导入jstl-1.2.jar包</p>
<p>javaServletPages Standard Tag Library <strong>JSP标准标签库</strong></p>
<p>作用：<strong>实现JSP页面中逻辑处理</strong>，如循环判断</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>（1）添加taglib指令 </p>
<blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>（2）使用JSTL标签</p>
<h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">设置变量:&lt;c:set var=&quot;num&quot; value=&quot;$&#123;10+5&#125;&quot; scope=&quot;request&quot; &gt;&lt;/c:set&gt;&lt;br&gt;</span><br><span class="line">输出数据:&lt;c:out value=&quot;$&#123;num&#125;&quot;&gt;&lt;/c:out&gt;&lt;br&gt;</span><br><span class="line">移除变量:&lt;c:remove var=&quot;$&#123;num&#125;&quot;&gt;&lt;/c:remove&gt;&lt;br&gt;</span><br><span class="line">移除后输出:&lt;c:out value=&quot;$&#123;num&#125;&quot; default=&quot;aaa&quot;&gt;&lt;/c:out&gt;</span><br></pre></td></tr></table></figure>

<h5 id="条件标签"><a href="#条件标签" class="headerlink" title="条件标签"></a>条件标签</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:set var=&quot;num&quot; value=&quot;3&quot;&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;num&lt;5&#125;&quot;</span>&gt;</span><br><span class="line">    结果为<span class="keyword">true</span></span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;num==1&#125;&quot;</span>&gt;</span><br><span class="line">        第一名</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;num==2&#125;&quot;</span>&gt;</span><br><span class="line">        第二名<span class="number">0</span></span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;num==3&#125;&quot;</span>&gt;</span><br><span class="line">        第三名</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">     &lt;c:otherwise&gt;</span><br><span class="line">        不及格</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>

<h5 id="迭代标签"><a href="#迭代标签" class="headerlink" title="迭代标签"></a>迭代标签</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;2&quot;</span> end=<span class="string">&quot;10&quot;</span> step=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">    &lt;hr&gt;$&#123;i&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>items表示遍历的集合</p>
<p>varStatus表示引用一个对象(count、first、last、index)</p>
<p>var表示变量</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;li&quot;</span> varStatus=<span class="string">&quot;vs&quot;</span>&gt;</span><br><span class="line">   &lt;tr $&#123;vs.count%<span class="number">2</span>==<span class="number">1</span>? <span class="string">&quot;style=&#x27;background-color:yellow&#x27;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;&gt;</span><br><span class="line">       &lt;td&gt;$&#123;li.key&#125;&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;$&#123;li.value&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;li&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;vs.index&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;vs.count&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;vs.first&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;vs.last&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;&lt;hr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax&amp;json</title>
    <url>/2020/11/11/05ajax%E3%80%81json/</url>
    <content><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>ASynchronous JavaScript And XML <strong>异步的JavaScript和XML</strong></p>
<h4 id="基于JQuery的ajax"><a href="#基于JQuery的ajax" class="headerlink" title="基于JQuery的ajax"></a>基于JQuery的ajax</h4><p><strong>通过<code>out.print(result)</code> 得到结果</strong></p>
<blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;validate();&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter out=resp.getWriter();</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="comment">//输出字符串给请求者</span></span><br><span class="line"><span class="comment">//            out.print(&quot;true&quot;);</span></span><br><span class="line">            out.print(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//            out.print(&quot;false&quot;);</span></span><br><span class="line">            out.print(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可以使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> username = $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (username==<span class="literal">null</span> || username===<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:<span class="string">&#x27;ajaxServlet&#x27;</span>,</span><br><span class="line">            type:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">     		data:<span class="string">&#x27;username=&#x27;</span>+username, <span class="comment">//相当于同步请求的URL&quot;ajaxServlet?username=admin&quot;</span></span><br><span class="line">            success:<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// if (result===&#x27;true&#x27;)&#123;</span></span><br><span class="line">                <span class="comment">//     $(&quot;#msg&quot;).html(&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;font&gt;&quot;);</span></span><br><span class="line">                <span class="comment">// &#125;else &#123;</span></span><br><span class="line">                <span class="comment">//     $(&quot;#msg&quot;).html(&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可以使用!&lt;font&gt;&quot;);</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                $(<span class="string">&quot;#msg&quot;</span>).html(result);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;执行失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="get-post-简化"><a href="#get-post-简化" class="headerlink" title="get()/post()简化"></a>get()/post()简化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//get()简化</span></span><br><span class="line">$.get(<span class="string">&#x27;ajaxServlet&#x27;</span>,<span class="string">&#x27;username=&#x27;</span>+username,<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result===<span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可以使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post()简化</span></span><br><span class="line">$.post(<span class="string">&#x27;ajaxServlet&#x27;</span>,<span class="string">&#x27;username=&#x27;</span>+username,<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result===<span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;&lt;font color=&#x27;green&#x27;&gt;用户名可以使用!&lt;font&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="load-方法简化"><a href="#load-方法简化" class="headerlink" title="load()方法简化"></a>load()方法简化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> username = $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">    <span class="keyword">if</span> (username==<span class="literal">null</span> || username===<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).html(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">&quot;#msg&quot;</span>).load(<span class="string">&#x27;ajaxServlet&#x27;</span>,<span class="string">&quot;username=&quot;</span>+username)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JavaScript Object Notation  <strong>JavaScript对象表示法</strong></p>
<p><strong>类似于Map的表示方式</strong></p>
<ul>
<li>json多用于存储和交换文本信息的语法</li>
<li>进行数据的传输</li>
<li>json比XML更小、更快、更易解析</li>
</ul>
<h4 id="1、基本格式"><a href="#1、基本格式" class="headerlink" title="1、基本格式"></a>1、基本格式</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本格式</span></span><br><span class="line">const person = &#123;&#x27;name&#x27;: &quot;李四&quot;, age: 12, &quot;gender&quot;: true&#125;;</span><br><span class="line"><span class="comment">// var name=person[&quot;name&quot;];</span></span><br><span class="line">alert(person.name);</span><br><span class="line"></span><br><span class="line">const ps = [</span><br><span class="line">    &#123;&#x27;name&#x27;: &quot;李四&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">    &#123;&#x27;name&#x27;: &quot;张三&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">    &#123;&#x27;name&#x27;: &quot;呜呜&quot;, age: 12, &quot;gender&quot;: true&#125;</span><br><span class="line">];</span><br><span class="line">alert(ps[2].name);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&#125;==&#123;&#x27;&#x27;:&#123; &#125; &#125;</span></span><br><span class="line">const pears = &#123;</span><br><span class="line">    &quot;person&quot;: &#123;&#x27;name&#x27;: &quot;李四&quot;, age: 12, &quot;gender&quot;: true&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(pears.person.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&#125;==&#123;&#x27;&#x27;:[ &#123;&#125;, &#123;&#125;, &#123;&#125; ] &#125;</span></span><br><span class="line">const peas2 = &#123;</span><br><span class="line">    &quot;person2&quot;: [</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;李四&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;张三&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;呜呜&quot;, age: 12, &quot;gender&quot;: true&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line">alert(peas2.person2[2].name);</span><br></pre></td></tr></table></figure>

<h4 id="2、遍历"><a href="#2、遍历" class="headerlink" title="2、遍历"></a>2、遍历</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">// for in</span></span><br><span class="line">for (const key in person)&#123;</span><br><span class="line">    alert(key+&quot;:&quot;+person[key])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const peas2 = &#123;</span><br><span class="line">    &quot;person2&quot;:[</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;李四&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;张三&quot;, age: 12, &quot;gender&quot;: true&#125;,</span><br><span class="line">        &#123;&#x27;name&#x27;: &quot;呜呜&quot;, age: 12, &quot;gender&quot;: true&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line">for (var i=0;i&lt;peas2.person2.length;i++)&#123;</span><br><span class="line">    const person=peas2.person2[i];</span><br><span class="line">    for (const key in person)&#123;</span><br><span class="line">        alert(key+&quot;:&quot;+person[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (var i=0;i&lt;peas2.person2.length;i++)&#123;</span><br><span class="line">    alert(peas2.person2[i].name+&quot;,&quot;+peas2.person2[i].age+&quot;,&quot;+peas2.person2[i].gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、json字符串"><a href="#3、json字符串" class="headerlink" title="3、json字符串"></a>3、json字符串</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">const person=&#x27;&#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 12, &quot;gender&quot;: true&#125;&#x27;;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将JSON对象转换为JSON字符串</span></span><br><span class="line">person3=JSON.stringify(person)</span><br><span class="line">alert(person3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// //将json字符串转化为JSON对象</span></span><br><span class="line">const person2=JSON.parse(person);</span><br><span class="line">alert(person2.name);</span><br></pre></td></tr></table></figure>

<h4 id="4、转化4种方法"><a href="#4、转化4种方法" class="headerlink" title="4、转化4种方法"></a>4、转化4种方法</h4><h5 id="（1）从Servlet获得Json字符串"><a href="#（1）从Servlet获得Json字符串" class="headerlink" title="（1）从Servlet获得Json字符串"></a>（1）从Servlet获得Json字符串</h5><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jsonStr=<span class="string">&quot;&#123;\&quot;flag\&quot;:true,\&quot;msg\&quot;:\&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;/font&gt;\&quot;&#125;&quot;</span>;</span><br><span class="line">out.print(jsonStr);</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="（2）json字符串转化为json对象"><a href="#（2）json字符串转化为json对象" class="headerlink" title="（2）json字符串转化为json对象"></a>（2）json字符串转化为json对象</h5><ul>
<li><pre><code class="java">resp.setContentType(&quot;application/json; charset=UTF-8&quot;);
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">  result &#x3D; JSON.parse(result)</span><br><span class="line">  $(&quot;#msg&quot;).html(result.flag + &quot;---&quot; + result.msg);</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><pre><code class="json">$.getJSON(&#39;jsonServlet&#39;,&#123;username:username&#125;,function (data) &#123;
    $(&quot;#msg&quot;).html(data.flag + &quot;---&quot; + data.msg);
&#125;)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;json</span><br><span class="line">  url: &#39;jsonServlet&#39;,</span><br><span class="line">  type: &#39;get&#39;,</span><br><span class="line">  data: &#123;&#39;username&#39;:username&#125;, &#x2F;&#x2F;相当于同步请求的URL&quot;ajaxServlet?username&#x3D;admin&quot;</span><br><span class="line">  dataType:&quot;json&quot;,</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h4 id="5、Gson"><a href="#5、Gson" class="headerlink" title="5、Gson"></a>5、Gson</h4><p><strong>可为多种形式的对象（List,对象，Map…）转化为json字符串</strong></p>
<p>导入gson-2.2.4.jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;flag&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已被使用!&lt;/font&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">String data=gson.toJson(map);</span><br><span class="line">out.print(data);</span><br></pre></td></tr></table></figure>

<p>通过前端传过来的name进行搜索，将集合转化为Json字符串，再传到前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">List&lt;Book&gt; bookList = <span class="keyword">new</span> BookService().findBookByName(name);</span><br><span class="line"></span><br><span class="line">Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line"><span class="comment">//创建Json字符串</span></span><br><span class="line">String json = gson.toJson(bookList);</span><br><span class="line"><span class="comment">//传回请求者</span></span><br><span class="line">resp.getWriter().write(json);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="comment">//新建一个名为SearchNameAjaxServlet的servlet,URL如下</span></span><br><span class="line">    url: <span class="string">&quot;searchNameAjax&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">//传递的参数</span></span><br><span class="line">        <span class="string">&quot;name&quot;</span>: content,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: time</span><br><span class="line">    &#125;,<span class="comment">//&quot;info=&quot;+content+&quot;&amp;time=&quot;+time</span></span><br><span class="line">    dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//拼接html</span></span><br><span class="line">        <span class="comment">//var res = data.split(&quot;,&quot;);</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">//每一个div还有鼠标移出、移入点击事件</span></span><br><span class="line">            html += <span class="string">&quot;&lt;div onmousedown=&#x27;setSearch_onclick(this)&#x27; onmouseout=&#x27;changeBackColor_out(this)&#x27; onmouseover=&#x27;changeBackColor_over(this)&#x27;&gt;&quot;</span></span><br><span class="line">                + data[i].name + <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">&quot;#context1&quot;</span>).html(html);</span><br><span class="line">        <span class="comment">//显示为块级元素</span></span><br><span class="line">        $(<span class="string">&quot;#context1&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>异常控制</title>
    <url>/2020/11/11/04%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="一、异常"><a href="#一、异常" class="headerlink" title="一、异常"></a>一、异常</h3><p><img src="https://csn.damyoung.cn/image-20200730200213622.png" alt="image-20200730200213622"></p>
<h3 id="1、Throwable"><a href="#1、Throwable" class="headerlink" title="1、Throwable"></a>1、Throwable</h3><blockquote>
<p>所有的异常都有一个共同的祖先<code>java.lang</code>包中的的<code>Throwable类</code>。</p>
<p>它有两个重要的子类：<code>Exception(异常)</code>和<code>Error(错误)</code>,二者都是java处理异常的重要子类</p>
</blockquote>
<h4 id="1-1-Error"><a href="#1-1-Error" class="headerlink" title="1.1 Error"></a>1.1 Error</h4><blockquote>
<p><strong>程序无法处理的错误</strong>，表示运行应用程序中较严重问题，表示代码执行时JVM出现的问题。</p>
<p>如java虚拟机运行错误(VirtualMachineError)、内存溢出(OutofMemoryError)</p>
<p>这些异常发生时，java虚拟机一般会选择线程终止</p>
</blockquote>
<blockquote>
<p>绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。</p>
</blockquote>
<h4 id="1-2-Exception"><a href="#1-2-Exception" class="headerlink" title="1.2 Exception"></a>1.2 Exception</h4><blockquote>
<p><strong>是程序本身可以处理的异常</strong></p>
<p><code>Exception</code>类有一个重要的子类<code>RuntimeException</code>。</p>
<p>该异常由Java虚拟机抛出</p>
</blockquote>
<ul>
<li> <code>ArrithmeticException</code>：算术运算异常，一个整数除以0时，会抛出该异常</li>
<li><code>ClassNotFoundException</code></li>
<li><code>NullPointerException</code>：要访问的变量没有引用任何对象时抛出该异常。</li>
<li><code>IllegalArgumentException</code>：非法参数异常</li>
<li><code>ArrayIndexOutOfBoundsException</code>：下标越界异常</li>
</ul>
<blockquote>
<p>异常和错误的区别：异常能被程序本身处理，错误无法处理</p>
</blockquote>
<h4 id="1-3-处理过程"><a href="#1-3-处理过程" class="headerlink" title="1.3 处理过程"></a>1.3 处理过程</h4><ul>
<li><p>抛出异常：发生异常，生成异常对象，交给JRE</p>
</li>
<li><p>捕获异常：JRE得到异常，寻找相应的代码处理异常</p>
</li>
</ul>
<h4 id="1-4-受检异常和运行异常"><a href="#1-4-受检异常和运行异常" class="headerlink" title="1.4 受检异常和运行异常"></a>1.4 受检异常和运行异常</h4><h5 id="受检异常"><a href="#受检异常" class="headerlink" title="受检异常"></a>受检异常</h5><p>跟程序的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而导致异常。</p>
<p>Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。</p>
<h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><p>表示虚拟机的通常操作中可能遇到的异常，是一种常见的运行错误，只要程序设计得当通常就不会发生。</p>
<p>当出现这样的异常，可以不处理，总是由虚拟机接管。<code>RuntimeException</code>下的类便都是运行时异常。</p>
<h4 id="1-5-异常处理总结"><a href="#1-5-异常处理总结" class="headerlink" title="1.5 异常处理总结"></a>1.5 异常处理总结</h4><ul>
<li><p><code>try块</code>： 用于捕获异常。其后可接零个或多个<code>catch</code>块，如果没有catch块，则必须跟一个<code>finally</code>块。</p>
</li>
<li><p><code>catch块</code>：用于处理<code>try</code>捕获到的异常</p>
</li>
<li><p><code>finally块</code>：无论是否捕获或处理异常，<code>finally</code>中的语句都会被执行。</p>
<blockquote>
<p>当try和finally语句中都有return语句时</p>
<p>在方法返回之前，finally语句的内容将被执行，</p>
<p>并且finally语句的返回值将会覆盖原始的返回值。</p>
</blockquote>
</li>
<li><p><code>throw</code>：用于在代码中明确的排除一个异常</p>
</li>
<li><p><code>throws</code>：用在方法声明上标明函数可能抛出的各种异常。</p>
</li>
</ul>
<h4 id="1-6-finally块不会被执行的四种情况"><a href="#1-6-finally块不会被执行的四种情况" class="headerlink" title="1.6 finally块不会被执行的四种情况"></a>1.6 finally块不会被执行的四种情况</h4><ul>
<li>在finally语句块第一行发生了异常。因为在其他行，finally块还是会得到执行</li>
<li>在前面的代码中用了<code>System.exit(int)</code>已退出程序。 exit是带参函数；若该语句在异常语句之后，finally会执行</li>
<li>程序所在的线程死亡。</li>
<li>关闭CPU。</li>
</ul>
<h3 id="2、-try-catch-finally"><a href="#2、-try-catch-finally" class="headerlink" title="2、 try-catch-finally"></a>2、 try-catch-finally</h3><ul>
<li><strong>执行try时，若出现异常后，try语句中后面的语句不再执行</strong></li>
<li>finally无论有无异常都会执行，无论如何都会执行                 </li>
<li>catch可捕获多个异常，越是父类放下面（子类异常若在父类异常后面，子类异常不再执行）</li>
</ul>
<h3 id="3、异常处理"><a href="#3、异常处理" class="headerlink" title="3、异常处理"></a>3、异常处理</h3><ul>
<li>抛出RuntimeException及其子类则声明上没有throws</li>
<li>如果抛出的是Exception及其子类则声明上必须要有throws</li>
</ul>
<p>（1）手动抛出异常 throw new Exception();  （代码级别）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(age&gt;<span class="number">120</span>)&#123;    <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;年龄不合理&quot;</span>);   <span class="comment">//手动抛出异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;   <span class="comment">//捕获异常</span></span><br><span class="line">    System.out.println(e.getMessage());	<span class="comment">//打印出详细字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）抛出异常：throws(方法级别)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">()</span> <span class="keyword">throws</span> ArithmeticException</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">         demo1();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();	<span class="comment">//打印出堆栈</span></span><br><span class="line">      &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4、自定义异常"><a href="#4、自定义异常" class="headerlink" title="4、自定义异常"></a>4、自定义异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exception</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">//<span class="title">Exception</span>的无参构造</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Exception</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Exception的带参构造</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Exception</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span><span class="keyword">throws</span> GenderException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(gender.equals(<span class="string">&quot;男&quot;</span>)|gender.equals(<span class="string">&quot;女&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">this</span>.gender=gender;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GenderException(<span class="string">&quot;性别只能是男或女&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenderException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenderException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg); <span class="comment">//调用父类Exception 构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Student s=<span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生性别&quot;</span>);</span><br><span class="line">        String gender=input.next();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            s.setGender(gender);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (GenderException e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5、return"><a href="#5、return" class="headerlink" title="5、return"></a>5、return</h3><ul>
<li><p>执行try，catch，给返回值赋值（暂时不输出）</p>
</li>
<li><p>执行finally（在里面加return，上面的return会被覆盖，而且还会掩盖try-catch中的异常）</p>
</li>
<li><p>return ，finally中有return语句时，会覆盖try-catch的return语句</p>
</li>
</ul>
<h3 id="6、声明异常范围"><a href="#6、声明异常范围" class="headerlink" title="6、声明异常范围"></a>6、声明异常范围</h3><blockquote>
<p>子类声明范围不能超过父类声明范围</p>
</blockquote>
<ul>
<li>父类没有声明异常，子类也不能</li>
<li>不可抛出异常类的父类或上层类</li>
<li>抛出异常数目不能比原有方法还多</li>
</ul>
]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2020/05/01/06Maven/</url>
    <content><![CDATA[<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><blockquote>
<p>Maven的Apache公司开源项目，是<strong>项目构建工具</strong>，用来<strong>管理依赖</strong>。</p>
<p>优点：没有jar包</p>
<p>实现：maven项目，在maven项目中配置jar包坐标信息，根据坐标信息去jar包仓库中查找jar包。</p>
<p>环境：maven程序纯java开发，运行依赖jdk</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//使得maven项目支持jdk1.8</span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><h4 id="1、window环境变量"><a href="#1、window环境变量" class="headerlink" title="1、window环境变量"></a>1、window环境变量</h4><img src="https://csn.damyoung.cn/image-20201025223737952.png" alt="image-20201025223737952" style="zoom: 67%;" />

<img src="https://csn.damyoung.cn/image-20201025223913347.png" alt="image-20201025223913347" style="zoom:67%;" />

<img src="https://csn.damyoung.cn/image-20201025223959954.png" alt="image-20201025223959954" style="zoom:67%;" />

<h4 id="2、配置本地仓库"><a href="#2、配置本地仓库" class="headerlink" title="2、配置本地仓库"></a>2、配置本地仓库</h4><blockquote>
<p>conf-setting.xml</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201026160220588.png" alt="image-20201026160220588" style="zoom:80%;" />

<h4 id="3、配置阿里云镜像"><a href="#3、配置阿里云镜像" class="headerlink" title="3、配置阿里云镜像"></a>3、配置阿里云镜像</h4><img src="https://csn.damyoung.cn/image-20201027154949169.png" alt="image-20201027154949169" style="zoom:80%;" />



<h3 id="二、Maven"><a href="#二、Maven" class="headerlink" title="二、Maven"></a>二、Maven</h3><blockquote>
<p><strong>搜索第三方组件</strong>：<a href="https://search.maven.org/">search.maven.org</a></p>
</blockquote>
<h4 id="1、maven概述"><a href="#1、maven概述" class="headerlink" title="1、maven概述"></a>1、maven概述</h4><h5 id="1-1-俩个核心"><a href="#1-1-俩个核心" class="headerlink" title="1.1 俩个核心"></a>1.1 俩个核心</h5><ul>
<li><p><strong>依赖管理</strong>：对jar包统一管理</p>
</li>
<li><p><strong>项目构建</strong>：项目在编译完成后，对项目进行编译、测试、打包、部署等一系列操作通过命令完成</p>
</li>
</ul>
<h5 id="1-2-仓库类型"><a href="#1-2-仓库类型" class="headerlink" title="1.2 仓库类型"></a>1.2 仓库类型</h5><blockquote>
<ul>
<li>本地仓库：在个人计算机上</li>
<li>私服：存在于<strong>局域网</strong>内一台服务器，存jar包</li>
<li>中央仓库：在<strong>互联网</strong>上，存放基本上所有开源的jar包(<a href="https://repo1.maven.org/">repo1.maven.org</a>)</li>
</ul>
<p><strong>一个jar包一旦被下载过，就会被Maven自动缓存在本地目录</strong></p>
</blockquote>
<h4 id="2、项目结构"><a href="#2、项目结构" class="headerlink" title="2、项目结构"></a>2、项目结构</h4><ul>
<li><p>pom.xml-maven<strong>项目核心配置文件</strong>project object model</p>
<ul>
<li>groupId-类似java的包名，往往是公司名称</li>
<li>artifactId-构建名</li>
<li>version- 构建版本号</li>
</ul>
<blockquote>
<p><strong>作为maven项目的唯一标识。</strong></p>
<p>引用其他第三方库时，也是通过这3个变量确定。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201026171335080.png" alt="image-20201026171335080" style="zoom:80%;" />
</li>
<li><p>main</p>
<ul>
<li>java-java文件</li>
<li>resources-资源配置文件</li>
</ul>
</li>
<li><p>test-单元测试</p>
</li>
<li><p><strong>target</strong>-编译打包生成的文件</p>
</li>
</ul>
<h4 id="3、依赖关系"><a href="#3、依赖关系" class="headerlink" title="3、依赖关系"></a>3、依赖关系</h4><blockquote>
<p>compile、test、runtime、provided</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">scope</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">compile</td>
<td align="left">编译时需要用到该jar包（默认）</td>
<td align="left">commons-logging</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">编译Test时需要用到该jar包</td>
<td align="left">junit</td>
</tr>
<tr>
<td align="left">runtime</td>
<td align="left">编译时不需要，但运行时需要用到</td>
<td align="left">mysql/jdbc驱动</td>
</tr>
<tr>
<td align="left">provided</td>
<td align="left">编译时需要用到，但运行时由JDK或某个服务器提供</td>
<td align="left">servlet-api</td>
</tr>
</tbody></table>
<h4 id="4、生命周期"><a href="#4、生命周期" class="headerlink" title="4、生命周期"></a>4、生命周期</h4><blockquote>
<p><strong>lifecycle-phase-goal</strong></p>
</blockquote>
<blockquote>
<p>Maven的生命周期lifecycle由<strong>一系列阶段phase构成</strong></p>
<ul>
<li><code>mvn</code>这个命令时，后面的参数是phase，Maven<strong>自动根据生命周期运行到指定的phase。</strong></li>
</ul>
</blockquote>
<blockquote>
<p>**生命周期default:**validate - initialize - generate-sources - ……..</p>
<p><strong>生命周期clean：</strong>preclean - clean - postclean</p>
</blockquote>
<ul>
<li><p>运行<code>mvn package</code>，Maven就会执行<code>default</code>生命周期，它会从开始一直运行到<code>package</code>这个phase为止：</p>
</li>
<li><p>运行<code>mvn compile</code>，Maven也会执行<code>default</code>生命周期，但这次它只会运行到<code>compile</code></p>
</li>
</ul>
<p><strong>常见的命令</strong></p>
<ul>
<li><code>mvn clean</code>：清理所有生成的<strong>class和jar</strong>；</li>
<li><code>mvn clean compile</code>：先清理，再执行到<code>compile</code>；</li>
<li><code>mvn clean test</code>：先清理，再执行到<code>test</code>，因为执行<code>test</code>前必须执行<code>compile</code>，所以这里不必指定<code>compile</code>；</li>
<li><code>mvn clean package</code>：先清理，再执行到<code>package</code>。</li>
</ul>
<p><strong>Goal</strong></p>
<blockquote>
<p><strong>执行一个phase又会触发一个或多个goal</strong></p>
<p><strong>goal是最小任务单元</strong></p>
<p>goal的命名总是<code>abc:xyz</code>这种形式 <strong>plugins:goal</strong> </p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">执行的Phase</th>
<th align="left">对应执行的Goal</th>
</tr>
</thead>
<tbody><tr>
<td align="left">compile</td>
<td align="left">compiler:compile</td>
</tr>
<tr>
<td align="left">test</td>
<td align="left">compiler:testCompile surefire:test</td>
</tr>
</tbody></table>
<h4 id="5、插件"><a href="#5、插件" class="headerlink" title="5、插件"></a>5、插件</h4><blockquote>
<p>执行每个phase，都是通过某个插件plugin来执行</p>
<p>Maven本身其实并不知道如何执行<code>compile</code>，它只是负责找到对应的<code>compiler</code>插件，然后执行默认的<code>compiler:compile</code>这个goal来完成编译。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">插件名称</th>
<th align="left">对应执行的phase</th>
</tr>
</thead>
<tbody><tr>
<td align="left">clean</td>
<td align="left">clean</td>
</tr>
<tr>
<td align="left">compiler</td>
<td align="left">compile</td>
</tr>
<tr>
<td align="left">surefire</td>
<td align="left">test</td>
</tr>
<tr>
<td align="left">jar</td>
<td align="left">package</td>
</tr>
</tbody></table>
<h4 id="6、Maven的模块管理"><a href="#6、Maven的模块管理" class="headerlink" title="6、Maven的模块管理"></a>6、Maven的模块管理</h4><blockquote>
<p>Maven支持模块化管理,分拆成多个模块降低软件复杂度</p>
<ul>
<li>可以通过继承parent的pom.xml统一定义重复配置</li>
<li>通过&lt; modules&gt;编译多个模块</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                        ┌ ─ ─ ─ ─ ─ ─ ┐</span><br><span class="line">                          ┌─────────┐</span><br><span class="line">                        │ │Module A │ │</span><br><span class="line">                          └─────────┘</span><br><span class="line">┌──────────────┐ split  │ ┌─────────┐ │</span><br><span class="line">│Single Project│───────&gt;  │Module B │</span><br><span class="line">└──────────────┘        │ └─────────┘ │</span><br><span class="line">                          ┌─────────┐</span><br><span class="line">                        │ │Module C │ │</span><br><span class="line">                          └─────────┘</span><br><span class="line">                        └ ─ ─ ─ ─ ─ ─ ┘</span><br><span class="line">  </span><br><span class="line"> &#x2F;&#x2F;多个模块的项目结构</span><br><span class="line">multiple-project</span><br><span class="line">├── pom.xml</span><br><span class="line">├── parent</span><br><span class="line">│   └── pom.xml</span><br><span class="line">├── module-a</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── module-b</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── module-c</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	//继承parent的xml</span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果模块A依赖模块B，则模块A需要模块B的jar包才能正常编译，我们需要在模块A中引入模块B：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，在编译的时候，需要在根目录创建一个<code>pom.xml</code>统一编译：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itranswarp.learnjava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>build<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>build<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-a<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-b<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>module-c<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="三、Maven-Wrapper"><a href="#三、Maven-Wrapper" class="headerlink" title="三、Maven Wrapper"></a>三、Maven Wrapper</h3><blockquote>
<p>默认情况下，系统所有项目都会使用全局安装的这个Maven版本</p>
<p>Maven Wrapper就是给一个项目<strong>提供一个独立的，指定版本的Maven给它使用</strong></p>
</blockquote>
<blockquote>
<p>在项目下执行命令为项目安装指定版本的Maven</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -N io.takari:maven:0.7.6:wrapper</span><br><span class="line"></span><br><span class="line">mvn -N io.takari:maven:0.7.6:wrapper -Dmaven&#x3D;3.3.3</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201029130517820.png" alt="image-20201029130517820"></p>
<blockquote>
<p>执行命令时，将mvn 改成 mvnw 就可以使用跟项目关联的Maven。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvnw clean package</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型</title>
    <url>/2020/11/11/07%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote>
<p><strong>泛型是参数化类型，使用广泛的类型</strong></p>
<p><strong>声明时使用泛型，使用时确定类型</strong></p>
<p>编译时使用泛型，JVM并不知道泛型的存在，泛型使用时强制转换类型</p>
</blockquote>
<h4 id="泛型是什么？"><a href="#泛型是什么？" class="headerlink" title="泛型是什么？"></a>泛型是什么？</h4><ul>
<li>泛型是参数化类型，使用广泛的类型，声明时使用泛型，使用时确定类型</li>
<li>泛型是一个重要特性是泛型擦除，由于JVM并不知道泛型的存在，泛型在编译期就被转化为普通的类，目的是避免创建过多的类造成性能上的损耗</li>
<li>泛型在数据取出时会进行一个强制类型转换(此时若是创建泛型数组，进行强制类型转换时会出行<code>ClassCastException</code>!)</li>
</ul>
<p><strong>泛型字母</strong></p>
<blockquote>
<p>T type ，K V  ， E element</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<ul>
<li>不能使用基本类型，指定类型引用类型</li>
<li>使用时自动类型检查，自动类型转换</li>
</ul>
</blockquote>
<h3 id="1、泛型的使用"><a href="#1、泛型的使用" class="headerlink" title="1、泛型的使用"></a>1、泛型的使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdk1.7以后泛型只需要声明一次，后面使用该类型</span></span><br><span class="line">Test1&lt;String&gt; s1=<span class="keyword">new</span> Test1&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h5 id="1-1-泛型类"><a href="#1-1-泛型类" class="headerlink" title="1.1 泛型类"></a>1.1 泛型类</h5><blockquote>
<p>class 类名&lt;字母列表&gt;{  }</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  T1 javaScore;</span><br><span class="line">    <span class="keyword">private</span>  T2 oracleScore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-泛型接口"><a href="#1-2-泛型接口" class="headerlink" title="1.2 泛型接口"></a>1.2 泛型接口</h5><p><strong>格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inte</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>泛型字母不能使用在接口静态方法中，不能使用在全局常量中（隐含static）。</p>
</blockquote>
<h5 id="1-3-泛型方法"><a href="#1-3-泛型方法" class="headerlink" title="1.3 泛型方法"></a>1.3 泛型方法</h5><blockquote>
<p>在public与返回值之间的<T>必不可少，这表明这是一个泛型方法.</p>
<p>并且声明了一个泛型T，这个T可以出现在这个泛型方法的任意位置</p>
</blockquote>
<p><strong>格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T,T1&gt; <span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(T t,T1,t1)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-4-静态方法"><a href="#1-4-静态方法" class="headerlink" title="1.4 静态方法"></a>1.4 静态方法</h5><blockquote>
<p><strong>静态方法无法访问类上定义的泛型</strong></p>
<p>如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T,T1&gt; <span class="keyword">void</span> <span class="title">Test</span><span class="params">(T t,T1,t1)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-5-通配符"><a href="#1-5-通配符" class="headerlink" title="1.5 通配符"></a>1.5 通配符</h5><blockquote>
<p> 类型不定，使用时确定类型</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test1&lt;?&gt; s=<span class="keyword">new</span> Test1&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<h5 id="1-6-泛型的上下边界"><a href="#1-6-泛型的上下边界" class="headerlink" title="1.6 泛型的上下边界"></a>1.6 泛型的上下边界</h5><p>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型</p>
<p> ? extends : &lt;=上限  为泛型添加上边界，即传入的类型实参必须是指定类型的子类型</p>
<p> ? super：&gt;=下限 指定类型为自身或父类、</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    T score; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Test1&lt;?&gt; s)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Test1&lt;?extends Fruit&gt; s)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Test1&lt;?<span class="keyword">super</span> Fruit&gt; s)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2、自定义泛型"><a href="#2、自定义泛型" class="headerlink" title="2、自定义泛型"></a>2、自定义泛型</h3><h5 id="2-1-继承关系"><a href="#2-1-继承关系" class="headerlink" title="2.1 继承关系"></a>2.1 继承关系</h5><blockquote>
<p>​    <strong>T&gt;Object，子类&gt;=父类泛型</strong></p>
</blockquote>
<ul>
<li>父类为泛型类：属性，方法；子类：使用时指定具体类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">String</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类为泛型类,类型在使用时确定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child1</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类为泛型类，父类不指定类型（泛型的擦除，用Object）<br>​                    （不能子类擦除，父类泛型） </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child2</span> &lt;<span class="title">T</span>&gt;<span class="keyword">extends</span>  <span class="title">Father</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类和父类同时擦除</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child3</span> <span class="keyword">extends</span> <span class="title">Father</span></span></span><br></pre></td></tr></table></figure>



<h5 id="2-2-重写参数类型"><a href="#2-2-重写参数类型" class="headerlink" title="2.2 重写参数类型"></a>2.2 重写参数类型</h5><ul>
<li><p>重写方法时，方法形参随父亲而定 </p>
</li>
<li><p>属性子类随子类，父类随父类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    String t2;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、泛型的擦除"><a href="#3、泛型的擦除" class="headerlink" title="3、泛型的擦除"></a>3、泛型的擦除</h3><blockquote>
<p><strong>继承和声明时不指定类型，用Object对待</strong></p>
</blockquote>
<ul>
<li><p><strong>Java泛型擦除是Java泛型的一个重要特性，目的是避免过多的创建类造成的性能损耗</strong></p>
</li>
<li><p>JVM并不知道泛型的存在，因为泛型在编译阶段就已经被处理成普通的类和方法； </p>
</li>
<li><p>而泛型会在数据取出进行一个强制类型转换</p>
</li>
</ul>
<p><strong>擦除规则</strong></p>
<ul>
<li>若泛型类型没有指定具体类型，用Object作为原始类型；</li>
<li>若有限定类型&lt; T exnteds XClass &gt;，使用XClass作为原始类型；</li>
<li>若有多个限定&lt; T exnteds XClass1 &amp; XClass2 &gt;，使用第一个边界类型XClass1作为原始类型；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child3</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、泛型的嵌套"><a href="#4、泛型的嵌套" class="headerlink" title="4、泛型的嵌套"></a>4、泛型的嵌套</h3><p> 泛型的嵌套：与调用没有关系。从外到内拆分</p>
<h3 id="5、泛型与数组"><a href="#5、泛型与数组" class="headerlink" title="5、泛型与数组"></a>5、泛型与数组</h3><blockquote>
<h5 id="没有泛型数组-，可以声明，不能创建"><a href="#没有泛型数组-，可以声明，不能创建" class="headerlink" title="没有泛型数组  ，可以声明，不能创建"></a><strong>没有泛型数组  ，可以声明，不能创建</strong></h5></blockquote>
<p><strong>！！！</strong>由于JVM在编译时是不知道泛型的存在的，泛型是数据获取时进行的强制类型转换，若是创建泛型数组，进行强制类型转换时会出行<code>ClassCastException</code>!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt;[] ls &#x3D; new ArrayList&lt;String&gt;[10]; &#x2F;&#x2F;不可以</span><br><span class="line"></span><br><span class="line">List&lt;?&gt;[] ls &#x3D; new ArrayList&lt;?&gt;[10]; &#x2F;&#x2F;可以</span><br><span class="line"></span><br><span class="line">List&lt;String&gt;[] ls &#x3D; new ArrayList[10]; &#x2F;&#x2F;可以</span><br></pre></td></tr></table></figure>

<h3 id="6、泛型不能使用多态"><a href="#6、泛型不能使用多态" class="headerlink" title="6、泛型不能使用多态"></a>6、泛型不能使用多态</h3><p>泛型不能使用多态： A<Fruit> test(){ return A<Apple>; } 错误</p>
<p>​    使用：只能在声明时使用（不能在声明类或使用时使用问号）</p>
]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2020/11/11/08%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><ul>
<li>在网络通信协议下，实现<strong>网络互连</strong>的不同计算机运行的程序间可以进行数据交换</li>
</ul>
<h4 id="1-1-三要素"><a href="#1-1-三要素" class="headerlink" title="1.1  三要素"></a>1.1  三要素</h4><ul>
<li><strong>IP地址</strong>：使得每台计算机得以通信，为计算机指定一个识别号，即<strong>设备的标识</strong></li>
<li><strong>端口</strong>：网络的通信，本质上是俩个应用程序的通信，即<strong>应用程序的标识</strong></li>
<li><strong>协议</strong>：位于同一个网络中的计算机进行连接和通信是需要遵守一定的规则，这些规则被称为网络通信协议。对数据的<strong>传输格式、传输速率、传输步骤</strong>等做了统一规定。常见的协议有UDP协议和TCP协议</li>
</ul>
<h4 id="1-2-IP地址"><a href="#1-2-IP地址" class="headerlink" title="1.2 IP地址"></a>1.2 IP地址</h4><blockquote>
<p>网络中设备的唯一标识</p>
</blockquote>
<ul>
<li><p>IPV4：给每个连接在网络上的主机分配一个32bit地址(4个字节)，IP地址用二进制表示。</p>
<p>​            IP地址被写成十进制形式(点分十进制表示法)  4*8个二进制数</p>
<p>​            192.168.137.1</p>
</li>
<li><p>IPV6：采用128bit地址，即16个字节一组，分成8组十六进制数</p>
<p>​            fd7d:cdbc:2395:0:8d3f:6f5e:c964:8f63</p>
</li>
</ul>
<blockquote>
<p>常用命令</p>
<ul>
<li>ipconfig：查看本机IP地址</li>
<li>ping IP地址：检查网络是否连通</li>
<li>特殊IP地址：127.0.0.1 回送地址，可以代表本机地址，一般用来测试使用</li>
</ul>
</blockquote>
<h5 id="1-2-1-InetAddress"><a href="#1-2-1-InetAddress" class="headerlink" title="1.2.1 InetAddress"></a>1.2.1 InetAddress</h5><blockquote>
<p>对IP地址的获取和操作</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">static InetAddress  getByName(String host)</td>
<td align="left">确定主机的IP地址，主机名称可以机器名称，也可以是IP地址</td>
</tr>
<tr>
<td align="center">String getHostName()</td>
<td align="left">获取该IP地址的主机名</td>
</tr>
<tr>
<td align="center">String getHostAddress()</td>
<td align="left">返回文本显示中IP地址字符串</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InetAddress inetAddress = InetAddress.getByName(<span class="string">&quot;DESKTOP-GD4A4EF&quot;</span>);</span><br><span class="line">System.out.println(inetAddress);<span class="comment">//DESKTOP-GD4A4EF/192.168.2.54</span></span><br><span class="line"></span><br><span class="line">String ip = inetAddress.getHostAddress();</span><br><span class="line">String hostName = inetAddress.getHostName();</span><br><span class="line">System.out.println(<span class="string">&quot;IP地址&quot;</span>+ip+<span class="string">&quot;主机名&quot;</span>+hostName);<span class="comment">//192.168.2.54  DESKTOP-GD4A4EF</span></span><br></pre></td></tr></table></figure>



<h4 id="1-3-端口"><a href="#1-3-端口" class="headerlink" title="1.3 端口"></a>1.3 端口</h4><blockquote>
<p>俩个字节表示的整数，取值范围0~65535。若果端口号被另外一个服务或应用所占用，会导致应用程序启动失败</p>
</blockquote>
<h4 id="1-4-协议"><a href="#1-4-协议" class="headerlink" title="1.4 协议"></a>1.4 协议</h4><h5 id="（1）UDP协议"><a href="#（1）UDP协议" class="headerlink" title="（1）UDP协议"></a>（1）UDP协议</h5><blockquote>
<p>用户数据报协议 User Datagram Protocol</p>
</blockquote>
<ul>
<li><strong>无连接通信协议</strong>，即在数据传输时，数据的发送端和接收端不建立逻辑连接。也就是说，A向B发送数据时，发送端不会确认接收端是否存在，就会发出数据；同样，接收端在收到数据时，也不会向发送端反馈是否收到数据。</li>
<li>UDP的面向无连接性，不能保证数据的完整性，在传输重要数据时不建议使用UDP协议</li>
</ul>
<h5 id="（2）TCP协议"><a href="#（2）TCP协议" class="headerlink" title="（2）TCP协议"></a>（2）TCP协议</h5><blockquote>
<p>传输控制协议 Transmission Control Protocol</p>
</blockquote>
<ul>
<li><strong>面向连接</strong>的通信协议，即传输数据时，发送端和接收端建立逻辑连接，然后再传输数据。它提供了俩台计算机之间<strong>可靠无差错</strong>的数据传输。</li>
<li>在TCP连接中必须明确客户端和服务器端，由客户端向服务器发出连接请求，每次连接的创建都要经过三次握手</li>
</ul>
<h5 id="（3）三次握手"><a href="#（3）三次握手" class="headerlink" title="（3）三次握手"></a>（3）三次握手</h5><p>TCP协议中，在发送数据的准备阶段，客户端和服务器端之间的三次交互，以保证连接的可靠性</p>
<ul>
<li>第一次握手：客户端向服务器端发送连接请求，等待服务器确认</li>
<li>第二次握手：服务器端向客户端回送一个响应，通知客户端收到了连接请求</li>
<li>第三次握手：客户端再次向服务器端发送确认信息，确认连接</li>
</ul>
<h3 id="二、UDP通信程序"><a href="#二、UDP通信程序" class="headerlink" title="二、UDP通信程序"></a>二、UDP通信程序</h3><h4 id="1-1-UDP通信原理"><a href="#1-1-UDP通信原理" class="headerlink" title="1.1 UDP通信原理"></a>1.1 UDP通信原理</h4><p>一种不可靠的网络协议，它在通信的俩端各建立一个Socket对象，但仅仅只是发送、接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓客户端和服务器的概念。</p>
<h4 id="2-2UDP发送数据"><a href="#2-2UDP发送数据" class="headerlink" title="2.2UDP发送数据"></a>2.2UDP发送数据</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li>创建发送端Socket对象</li>
<li>创建数据，并把数据打包<code>new DatagramPacket(bytes,length,inetAddress,port)</code>（数据报包）</li>
<li>调用<code>DatagramSocke.send(DatagramPacket)</code>对象的方法发送数据</li>
<li>关闭发送端 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用DatagramSocket对象发送数据</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1、创建发送端的Socket对象</span></span><br><span class="line">    DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">    <span class="comment">//2、创建数据，并把数据打包成数据报包</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes=<span class="string">&quot;hello word&quot;</span>.getBytes();</span><br><span class="line">    <span class="comment">//buf-数组 length-数据长度 address-ip地址 port-端口地址</span></span><br><span class="line">    DatagramPacket datagramPacket=<span class="keyword">new</span> DatagramPacket(bytes,bytes.length,InetAddress.getByName(<span class="string">&quot;DESKTOP-GD4A4EF&quot;</span>),<span class="number">10086</span>);</span><br><span class="line">    <span class="comment">//3、调用DatagramSocket对象发送数据报包</span></span><br><span class="line">    datagramSocket.send(datagramPacket);</span><br><span class="line">    <span class="comment">//4、关闭发送端</span></span><br><span class="line">    datagramSocket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-UDP接收数据"><a href="#2-3-UDP接收数据" class="headerlink" title="2.3 UDP接收数据"></a>2.3 UDP接收数据</h4><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li>创建接收端Socket对象 <code>new DatagramSocket(port)</code></li>
<li>创建数据报包，用来接收数据 <code>DatagramPacket(byte[],int length)</code></li>
<li>调用<code>DatagramSocket.receive</code>对象用来接收数据</li>
<li>解析数据报包，并把数据在控制台显示 <code>DatagramPacket.getData()</code></li>
<li>关闭接收端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、创建接收端的Socket对象</span></span><br><span class="line">DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">10086</span>);</span><br><span class="line"><span class="comment">//2、创建数据报包，用来接收数据</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(bytes,bytes.length);</span><br><span class="line"><span class="comment">//3、调用DatagramSocket对象用来接收数据报包</span></span><br><span class="line">datagramSocket.receive(datagramPacket);</span><br><span class="line"><span class="comment">//4、解析数据报包</span></span><br><span class="line"><span class="keyword">byte</span>[] data = datagramPacket.getData();</span><br><span class="line">String dataString=<span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">System.out.println(dataString);</span><br><span class="line"><span class="comment">//5、关闭接收端</span></span><br><span class="line">datagramSocket.close();</span><br></pre></td></tr></table></figure>

<h4 id="2-4-类聊天室实例"><a href="#2-4-类聊天室实例" class="headerlink" title="2.4 类聊天室实例"></a>2.4 类聊天室实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *  使用键盘录入数据，发送给接收端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpPractiseSend</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String line=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//键盘录入数据</span></span><br><span class="line">        BufferedReader br=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">                <span class="comment">//如果输入为 886 则结束发送数据报包</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建数据，并将数据打包</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes=line.getBytes();</span><br><span class="line">            DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(bytes,bytes.length, InetAddress.getByName(<span class="string">&quot;DESKTOP-GD4A4EF&quot;</span>),<span class="number">10000</span>);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象发送数据报包</span></span><br><span class="line">            datagramSocket.send(datagramPacket);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *      因为接收端不知道什么时候停止发送，故用死循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpPractiseReceive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//创建一个数据包,用来接收数据报包</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket datagramPacket = <span class="keyword">new</span> DatagramPacket(bytes, bytes.length);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象用来接收数据</span></span><br><span class="line">            datagramSocket.receive(datagramPacket);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析数据报包，显示在控制台</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据是:&quot;</span> + <span class="keyword">new</span> String(datagramPacket.getData(), <span class="number">0</span>, datagramPacket.getLength()));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、TCP通信程序"><a href="#三、TCP通信程序" class="headerlink" title="三、TCP通信程序"></a>三、TCP通信程序</h3><h4 id="3-1-通信原理"><a href="#3-1-通信原理" class="headerlink" title="3.1 通信原理"></a>3.1 通信原理</h4><p>可靠的网络协议，在通信的俩端各建立一个Socket对象，从而在通信的俩端形成<strong>网络虚拟链路</strong>。</p>
<p>俩端的程序通过虚拟链路进行通信</p>
<p>Java对基于TCP协议的网络提供良好的封装，使用Socket对象代表俩端的通信端口，并通过<strong>Socket产生IO流</strong>进行网络通信。</p>
<p>Java为客户端提供了<code>Socket</code>类，为服务器端提供了<code>ServerSocket</code>类</p>
<h4 id="3-2-发送数据"><a href="#3-2-发送数据" class="headerlink" title="3.2 发送数据"></a>3.2 发送数据</h4><h5 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li>创建客户端的Socket对象<code>Socket(String host,int port)</code></li>
<li>获取输出流，写数据  <code>OutputStream getOutputStream()</code></li>
<li>释放资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建客户端的Socket对象</span></span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;DESKTOP-GD4A4EF&quot;</span>), <span class="number">18000</span>);</span><br><span class="line"><span class="comment">//获取输出流</span></span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">outputStream.write(<span class="string">&quot;hello TCP&quot;</span>.getBytes());</span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h4 id="3-3-接收数据"><a href="#3-3-接收数据" class="headerlink" title="3.3 接收数据"></a>3.3 接收数据</h4><h5 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h5><ul>
<li>创建服务器端的Socket对象<code>ServerSocket(int port)</code></li>
<li>监听客户端连接 <code>serverSocket.accept()</code></li>
<li>获取输入流，读数据，并把数据显示在控制台 <code>accept.getInputStream()</code></li>
<li>释放资源</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.获取服务器端的Socket对象</span></span><br><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">18000</span>);</span><br><span class="line"><span class="comment">//2.监听客户端连接</span></span><br><span class="line">Socket accept = serverSocket.accept();</span><br><span class="line"><span class="comment">//3.创建输入流,获取数据</span></span><br><span class="line">InputStream inputStream = accept.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">String data=<span class="keyword">new</span> String(bytes,<span class="number">0</span>,read);</span><br><span class="line">System.out.println(data);</span><br><span class="line"><span class="comment">//4.释放资源</span></span><br><span class="line">serverSocket.close();</span><br></pre></td></tr></table></figure>

<h4 id="3-4-服务器给出反馈"><a href="#3-4-服务器给出反馈" class="headerlink" title="3.4 服务器给出反馈"></a>3.4 服务器给出反馈</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Socket socket=<span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">&quot;DESKTOP-GD4A4EF&quot;</span>),<span class="number">12000</span>);</span><br><span class="line">OutputStream outputStream = socket.getOutputStream();</span><br><span class="line"><span class="comment">//创建输出流，数据来源与键盘录入</span></span><br><span class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(line))&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    outputStream.write(line.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建输入流,接收服务器端回馈信息</span></span><br><span class="line">InputStream inputStream = socket.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,read));</span><br><span class="line"></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">12000</span>);</span><br><span class="line">Socket accept = serverSocket.accept();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">    InputStream inputStream = accept.getInputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,read));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建服务器端输出流,回馈客户端信息</span></span><br><span class="line">    OutputStream outputStream = accept.getOutputStream();</span><br><span class="line">    outputStream.write(<span class="string">&quot;服务器收到请求&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2020/11/11/09%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote>
<p><strong>反射就是把java类中的各种成分映射成一个个的java对象模板</strong></p>
</blockquote>
<h1 id="基本应用"><a href="#基本应用" class="headerlink" title="基本应用"></a>基本应用</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>Object类方法，根据一个字符串得到类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;jjj&quot;</span>;</span><br><span class="line"><span class="comment">//根据字符串得到一个类</span></span><br><span class="line">Class c=s.getClass();</span><br><span class="line">System.out.println(c.getName());</span><br></pre></td></tr></table></figure>

<h2 id="Class-forName"><a href="#Class-forName" class="headerlink" title="Class.forName"></a>Class.forName</h2><p>根据类的全限名得到运行时类信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包名+类名</span></span><br><span class="line">String s1=<span class="string">&quot;java.lang.String&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class c1=Class.forName(s1);</span><br><span class="line">    System.out.println(c1.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取class对象"><a href="#获取class对象" class="headerlink" title="获取class对象"></a>获取class对象</h1><h2 id="根据对象获取"><a href="#根据对象获取" class="headerlink" title="根据对象获取"></a>根据对象获取</h2><p><code>new Student().getClass()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu1 = <span class="keyword">new</span> Student();<span class="comment">//这一new 产生一个Student对象，一个Class对象。</span></span><br><span class="line">Class stuClass = stu1.getClass();<span class="comment">//获取Class对象</span></span><br><span class="line">System.out.println(stuClass.getName());</span><br></pre></td></tr></table></figure>

<h2 id="class"><a href="#class" class="headerlink" title=".class"></a>.class</h2><blockquote>
<p>任何数据类型都有一个静态的class属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class stuClass2 = Student.class;</span><br></pre></td></tr></table></figure>

<h2 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class stuClass3 = Class.forName(<span class="string">&quot;fanshe.Student&quot;</span>);</span><br><span class="line"><span class="comment">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>第一种对象都有了还要反射干什么。</strong></p>
<p><strong>第二种需要导入类的包，依赖太强，不导包就抛编译错误。</strong></p>
<p><strong>一般都第三种，一个字符串可以传入也可写在配置文件中等多种方法。</strong></p>
</blockquote>
<h1 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h1><blockquote>
<p>通过反射调用私有属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class class1=Class.forName(<span class="string">&quot;反射.Test&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="批量"><a href="#批量" class="headerlink" title="批量"></a>批量</h2><blockquote>
<p>获取所有公有构造<code>getConstructors()</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor[] constructors=class1.getConstructors();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取<strong>所有</strong>构造方法（包括私有，受保护）<code>getDeclaredConstrustors()</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor[] constructors=class1.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c:constructors) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单个"><a href="#单个" class="headerlink" title="单个"></a>单个</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用无参公有构造方法</span></span><br><span class="line">Constructor con=class1.getConstructor(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用私有构造方法</span></span><br><span class="line">Constructor constructor=class1.getDeclaredConstructor(String.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>); <span class="comment">//暴力访问，忽略访问修饰符</span></span><br><span class="line">obj=constructor.newInstance(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">System.out.println(constructor);</span><br></pre></td></tr></table></figure>

<h2 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h2><blockquote>
<p>默认调用无参构造器 </p>
<p>newInstance是 Constructor类的方法（管理构造函数的类）</p>
<p>newInstance是创建了一个构造方法的声明类的新实例对象。并为之调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; aClass1 = Class.forName(<span class="string">&quot;demo.Student&quot;</span>);</span><br><span class="line">Object o = aClass1.newInstance();</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反射出无参构造</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor con=s.getConstructor(<span class="keyword">null</span>);</span><br><span class="line">Object obj=con.newInstance(); <span class="comment">//调用构造方法</span></span><br><span class="line">Test test1=(Test) obj;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>反射出有参构造</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; declaredConstructor = aClass1.getDeclaredConstructor(String.class);</span><br><span class="line">Student o1 = (Student) declaredConstructor.newInstance(<span class="string">&quot;hhh&quot;</span>);</span><br><span class="line">System.out.println(o1.getB());</span><br></pre></td></tr></table></figure>

<h1 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h1><h2 id="批量-1"><a href="#批量-1" class="headerlink" title="批量"></a>批量</h2><blockquote>
<p>获取成员字段值：field.<strong>get</strong>(<strong>实例对象</strong>)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object o = aClass1.newInstance();  <span class="comment">//反射实例对象</span></span><br><span class="line"></span><br><span class="line">Field[] declaredFields = aClass1.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field:declaredFields)&#123;</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>); <span class="comment">//暴力访问私有字段</span></span><br><span class="line">    System.out.println(field.getName()+<span class="string">&quot;:&quot;</span>+field.get(o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单个-1"><a href="#单个-1" class="headerlink" title="单个"></a>单个</h2><blockquote>
<p>aClass1.getField(“<strong>字段名</strong>“)；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取共有属性</span></span><br><span class="line">Field f=aClass1.getField(<span class="string">&quot;num&quot;</span>);</span><br><span class="line"><span class="comment">//获取私有属性</span></span><br><span class="line">Field f1=aClass1.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">f1.setAccessible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<h2 id="设置字段值"><a href="#设置字段值" class="headerlink" title="设置字段值"></a>设置字段值</h2><blockquote>
<p><strong>set</strong>(obj,value)</p>
<ul>
<li><p>obj:要设置的字段所在的<strong>对象</strong></p>
</li>
<li><p>value:要为字段设置的<strong>值</strong>；</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>Object obj = stuClass.getConstructor().newInstance();//产生Student对象–》Student stu = new Student();<br>//为字段设置值<br><strong>f.set(obj, “刘德华”)</strong>;//为Student对象中的name属性赋值–》stu.name = “刘德华”</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field field=aClass1.getField(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">Object obj=aClass1.getConstructor().newInstance();</span><br><span class="line">field.set(obj,<span class="number">1</span>);</span><br><span class="line">Teacher teacher1=(Teacher) obj;</span><br><span class="line">System.out.println(teacher1.num);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//私有属性</span></span><br><span class="line">Field field1=aClass1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">field1.setAccessible(<span class="keyword">true</span>); <span class="comment">//暴力反射，解除私有限定</span></span><br><span class="line">field1.set(obj,<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">System.out.println(teacher1.getName());</span><br></pre></td></tr></table></figure>

<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h2 id="批量-2"><a href="#批量-2" class="headerlink" title="批量"></a>批量</h2><blockquote>
<p>getMethods()</p>
<p>getDeclaredMethods()</p>
</blockquote>
<h2 id="单个-2"><a href="#单个-2" class="headerlink" title="单个"></a>单个</h2><blockquote>
<p><strong>getMethod</strong>(String name, Class&lt;?&gt; parameterType)</p>
<ul>
<li><p>name:方法名</p>
</li>
<li><p>Class…:形参的Class类型对象</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公有方法</span></span><br><span class="line">Method method=class1.getMethod(<span class="string">&quot;show1&quot;</span>, String.class)</span><br><span class="line"><span class="comment">//私有方法</span></span><br><span class="line">method2=c.getDeclareMethod(<span class="string">&quot;show4&quot;</span>,<span class="keyword">int</span>.class);</span><br><span class="line">method2.setAcessible(<span class="keyword">true</span>); <span class="comment">//解除私有限定</span></span><br><span class="line">method2.invoke(obj,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><blockquote>
<p><strong>invoke</strong>(Object obj,Object… args):</p>
<ul>
<li><p>obj : 要调用方法的对象；</p>
</li>
<li><p>args:调用方式时所传递的实参</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例一个Student对象</span></span><br><span class="line">Object obj=c.getConstrustor().newInstance()</span><br><span class="line">m.invoke(obj,<span class="string">&quot;hhh&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="反射的应用"><a href="#反射的应用" class="headerlink" title="反射的应用"></a>反射的应用</h1><h2 id="反射main方法"><a href="#反射main方法" class="headerlink" title="反射main方法"></a>反射main方法</h2><blockquote>
<p><strong>invoke</strong></p>
<p>第一个参数，对象类型，因为方法是static静态的，所以为null可以</p>
<p>第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数</p>
<p> methodMain.invoke(null, (Object)new String[]{“a”,”b”,”c”})</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe.main;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Student类的main方法、不要与当前的main方法搞混了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//1、获取Student对象的字节码</span></span><br><span class="line">			Class clazz = Class.forName(<span class="string">&quot;fanshe.main.Student&quot;</span>);</span><br><span class="line">			<span class="comment">//2、获取main方法</span></span><br><span class="line">			 Method methodMain = clazz.getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line">			<span class="comment">//3、调用main方法</span></span><br><span class="line"><span class="comment">//第一个参数，对象类型，因为方法是static静态的，所以为null可以，第二个参数是String数组，这里要注意在jdk1.4时是数组，jdk1.5之后是可变参数</span></span><br><span class="line">			 <span class="comment">//这里拆的时候将  new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125; 拆成3个对象。。。所以需要将它强转。</span></span><br><span class="line">			 methodMain.invoke(<span class="keyword">null</span>, (Object)<span class="keyword">new</span> String[]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>&#125;);<span class="comment">//方式一</span></span><br><span class="line">			<span class="comment">// methodMain.invoke(null, new Object[]&#123;new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;&#125;);//方式二</span></span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="越过泛型检查"><a href="#越过泛型检查" class="headerlink" title="越过泛型检查"></a>越过泛型检查</h2><p><strong>泛型是在编译期间起作用的。在编译后的.class文件中是没有泛型的</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;11&quot;</span>);</span><br><span class="line"><span class="comment">//        list.add(11); //类型不一致，报错</span></span><br><span class="line"><span class="comment">//获取Arraylist的class对象，反向调用add()方法</span></span><br><span class="line">Class listClass=list.getClass();</span><br><span class="line">Method m=listClass.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line">m.invoke(list,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">for</span> (Object o:list)&#123;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行配置文件内容"><a href="#运行配置文件内容" class="headerlink" title="运行配置文件内容"></a>运行配置文件内容</h2><p>我们利用反射和配置文件，可以使：应用程序更新时，对源码无需进行任何修改</p>
<p> 我们只需要将新类发送给客户端，并修改配置文件即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">反射.调用配置文件</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">show</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 调用配置文件 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        Class s=Class.forName(getValue(<span class="string">&quot;className&quot;</span>));</span><br><span class="line">        Object o1=s.getConstructor().newInstance(); <span class="comment">//获取实例</span></span><br><span class="line">        Method m=s.getMethod(getValue(<span class="string">&quot;methodName&quot;</span>));   <span class="comment">//获取show()方法</span></span><br><span class="line">        m.invoke(o1);                       <span class="comment">//调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(String key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取配置文件对象</span></span><br><span class="line">        Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//pro获取流</span></span><br><span class="line">        FileReader fileReader=<span class="keyword">new</span> FileReader(<span class="string">&quot;Stream\\调用配置文件&quot;</span>);</span><br><span class="line">        pro.load(fileReader);</span><br><span class="line">        <span class="keyword">return</span> pro.getProperty(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们升级这个系统时，不要Student类，而需要新写一个Student2的类时，这时只需要更改pro.txt的文件内容就可以了。代码就一点不用改动</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span> = <span class="string">cn.fanshe.Student2</span></span><br><span class="line"><span class="attr">methodName</span> = <span class="string">show2</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc</title>
    <url>/2020/07/11/01JDBC/</url>
    <content><![CDATA[<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><ul>
<li><p>Java Data Base Connectivity（java数据库连接）是一种用于执行SQL语句的<strong>JavaAPI</strong></p>
</li>
<li><p><strong>它由一组类和接口组成</strong></p>
</li>
<li><p>JDBC API使用java的<strong>反射机制</strong>来实现java程序和JDBC驱动的松耦合</p>
</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200909103051980.png" alt="image-20200909103051980"></p>
<h3 id="二、JDBC-API"><a href="#二、JDBC-API" class="headerlink" title="二、JDBC API"></a>二、<strong>JDBC API</strong></h3><h4 id="（1）接口"><a href="#（1）接口" class="headerlink" title="（1）接口"></a>（1）接口</h4><ul>
<li><p>DriverManager驱动管理类，它可以<strong>创建连接</strong>，本身就是一个创建Connection的工厂</p>
</li>
<li><p>java.sql.Driver 主要功能是描述驱动程序，<strong>提供驱动信息</strong>，最重要<strong>实现数据库连接的抽象</strong></p>
</li>
<li><p>java.sql.Connection 是数据库jdbc连接的抽象层，主要<strong>生成SQL并发送给数据库</strong></p>
</li>
<li><p>ResultSet接口（结果集），用来接收select语句返回的查询结果（true/false(query)、num(Update)）</p>
</li>
</ul>
<h4 id="（2）Statement接口"><a href="#（2）Statement接口" class="headerlink" title="（2）Statement接口"></a>（2）Statement接口</h4><p>​    <strong>编译语句</strong> java.sql.Statement</p>
<ul>
<li>由createStatement创建</li>
</ul>
<p>​    <strong>预编译</strong>     java.sql.PreparedStatement</p>
<ul>
<li>继承自Statement接口，有preparedStatement创建，用于发送含有一个或多个参数的SQL语句</li>
<li>效率比Statement高，并且可以防止SQL注入</li>
</ul>
<p>​    <strong>数据库存储过程</strong> java.sql.CallableStatement</p>
<ul>
<li>继承自PrepareStament接口，由prepareCall创建</li>
</ul>
<h4 id="（3）Statement方法"><a href="#（3）Statement方法" class="headerlink" title="（3）Statement方法"></a>（3）Statement方法</h4><ul>
<li><p>execute:  返回是否有结果集</p>
</li>
<li><p>excuteQuery：运行select语句，返回Result结果集合</p>
</li>
<li><p>excuteUpdate：运行insert/update/delete操作，返回更新的行数</p>
</li>
<li><p>addBatch(String sql): 将多条sql语句放到一个批处理中</p>
</li>
<li><p>executeBatch() :  向数据库发送一批sql语句</p>
</li>
<li><p>set<Type>(int colunmIndex,Type val) ：为PreparedStatement回填参数值</p>
</li>
<li><p>getString(int index)  getString(String columnIndex)</p>
</li>
</ul>
<h3 id="三、步骤"><a href="#三、步骤" class="headerlink" title="三、步骤"></a>三、步骤</h3><p>1、导入jar包（<strong>JDBC驱动，jdbc接口的实现</strong>）</p>
<p><strong>idea导入</strong>：File–&gt;project Structure–&gt;Modules–&gt;Dependencies–&gt;+JARS or Directory</p>
<p>2、加载驱动</p>
<p>加载<strong>驱动类Driver</strong>，并执行初始化，这个动作会触发Driver类中的static静态块</p>
<p><strong>创建自己的实例并向DriverManager注册该实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 不这样写的原因：</span></span><br><span class="line"><span class="comment">* 1. 会导致注册两次</span></span><br><span class="line"><span class="comment">* 2. 会时程序依赖于MySQL数据包</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//DriverManager.registerDriver(new Driver());//第二种注册方式</span></span><br></pre></td></tr></table></figure>

<p>3、<strong>驱动管理类</strong>获取连接</p>
<p>DriverManager类，本身就是一个创建Connection的工厂</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String url=<span class="string">&quot;jdbc:mysql://localhost:3306/myabl?useSSL=true&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String password=<span class="string">&quot;*******&quot;</span>;</span><br><span class="line"></span><br><span class="line">Connection conn = DriverManager.getConnection(url,user,password);</span><br></pre></td></tr></table></figure>

<p>4、关闭连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">conn.close();</span><br></pre></td></tr></table></figure>

<h3 id="四、查询"><a href="#四、查询" class="headerlink" title="四、查询"></a>四、查询</h3><h4 id="prepareStatement接口"><a href="#prepareStatement接口" class="headerlink" title="prepareStatement接口"></a><strong>prepareStatement接口</strong></h4><p>优点:预编译，使用占位符</p>
<h4 id="executeQuery"><a href="#executeQuery" class="headerlink" title="executeQuery"></a>executeQuery</h4><p>1、数据库操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select *from emp&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>2、装载MySql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement preparedStatement=conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure>

<p>3、发送MySql语句到数据库执行，获取返回结果</p>
<p><strong>execute()</strong>: 可以执行任何SQL语句，返回boolean值</p>
<p>​                执行后第一个结果是ResultSet,否则返回true</p>
<p><strong>executeQuery()</strong>:执行select语句</p>
<p><strong>executeUpdate()</strong> :执行DML语句（insert,update,delect),影响返回的记录条数</p>
<h4 id="Resultset"><a href="#Resultset" class="headerlink" title="Resultset"></a>Resultset</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ResultSet resultSet=preparedStatement.executeQuery();</span><br></pre></td></tr></table></figure>

<p>4、遍历返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">    <span class="comment">//根据第几列获取值</span></span><br><span class="line">   	System.out.println(resultSet.getInt(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//根据字段名获取</span></span><br><span class="line">    System.out.println(resultSet.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><p>set<Type>(int colunmIndex,Type val) ：为PreparedStatement回填参数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入员工工号&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> i=s.nextInt();</span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">Connection connection= DriverManager.getConnection(url,user,password);</span><br><span class="line"><span class="comment">//?为占位符</span></span><br><span class="line"><span class="comment">//使用？占位符，执行时会替换成实际数据，预编译</span></span><br><span class="line">String sql=<span class="string">&quot;select *from emp where ename=?&quot;</span>;</span><br><span class="line"><span class="comment">//发送sql语句到MySql数据库并执行，返回执行结果，如果有占位符，对占位符先赋值</span></span><br><span class="line">PreparedStatement preparedStatement=connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//给preparedStatement设置参数,第一个参数是索引从1开始，第二个是具体值</span></span><br><span class="line">preparedStatement.setInt(<span class="number">1</span>,i);</span><br><span class="line"></span><br><span class="line">ResultSet resultSet=preparedStatement.executeQuery();</span><br></pre></td></tr></table></figure>

<h3 id="五、Sql注入"><a href="#五、Sql注入" class="headerlink" title="五、Sql注入"></a>五、Sql注入</h3><h4 id="statement接口"><a href="#statement接口" class="headerlink" title="statement接口"></a>statement接口</h4><p><strong>使用拼接验证，若密码，使用  1’or’1’=’1,也会被验证成功</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement statement=connection.createStatement();</span><br><span class="line">ResultSet resultSet=statement.executeQuery(sql);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">&quot;select *from userpass where username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+passwordin+<span class="string">&quot;&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner s=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">String username=s.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">String passwordin=s.next();</span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">Connection connection= DriverManager.getConnection(url,user,password);</span><br><span class="line">String sql=<span class="string">&quot;select *from userpass where username=&#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//发送sql语句到MySql数据库并执行，返回执行结果</span></span><br><span class="line">Statement statement=connection.createStatement();</span><br><span class="line">ResultSet resultSet=statement.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="六、DML"><a href="#六、DML" class="headerlink" title="六、DML"></a>六、DML</h3><h4 id="executeUpdate"><a href="#executeUpdate" class="headerlink" title="executeUpdate"></a>executeUpdate</h4><p>insert/update/delete</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">       connection = DriverManager.getConnection(</span><br><span class="line">           <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/blog?useSSL=false&quot;</span>,</span><br><span class="line">           <span class="string">&quot;root&quot;</span>,</span><br><span class="line">           <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">       )</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//修改update</span></span><br><span class="line">       statement = connection.createStatement();</span><br><span class="line">       <span class="comment">//返回执行受影响的条数，执行失败返回0</span></span><br><span class="line">       <span class="keyword">int</span> i = statement.executeUpdate(</span><br><span class="line">           <span class="string">&quot;update categories set path=&#x27;改一下试试&#x27; where id=1&quot;</span></span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//插入insert</span></span><br><span class="line">       <span class="keyword">int</span> j = statement.executeUpdate(</span><br><span class="line">  <span class="string">&quot;insert into categories(name,pid,path) values (&#x27;插入语句&#x27;,2,&#x27;要用单引号&#x27;);&quot;</span></span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span>(j&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;插入失败&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">	<span class="comment">//删除delete</span></span><br><span class="line">       <span class="keyword">int</span> k = statement.executeUpdate(</span><br><span class="line">           <span class="string">&quot;delete from categories where id = 2;&quot;</span></span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">if</span>(k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<h3 id="七、批处理"><a href="#七、批处理" class="headerlink" title="七、批处理"></a>七、批处理</h3><p>一次执行多条语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn=getConnection();</span><br><span class="line">        stmt=conn.createStatement();</span><br><span class="line">        String sql=<span class="string">&quot;drop table if exists school&quot;</span>;</span><br><span class="line">        String sql2=<span class="string">&quot;create table school(id int,name varchar(20))&quot;</span>;</span><br><span class="line">        String sql3=<span class="string">&quot;insert into school values(2,&#x27;hh&#x27;)&quot;</span>;</span><br><span class="line">        String sql4=<span class="string">&quot;update school set id=1&quot;</span>;</span><br><span class="line"></span><br><span class="line">        stmt.addBatch(sql);</span><br><span class="line">        stmt.addBatch(sql2);</span><br><span class="line">        stmt.addBatch(sql3);</span><br><span class="line">        stmt.addBatch(sql4);</span><br><span class="line">        stmt.executeBatch();</span><br><span class="line">        System.out.println(<span class="string">&quot;批处理成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        closeAll(conn,stmt,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">batchDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pre=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn=getConnection();</span><br><span class="line">        String sql=<span class="string">&quot;delete from users where username=?&quot;</span>;</span><br><span class="line">        pre=conn.prepareStatement(sql);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            pre.setString(<span class="number">1</span>, <span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            pre.addBatch();</span><br><span class="line">        &#125;</span><br><span class="line">        pre.executeBatch();</span><br><span class="line">        System.out.println(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        closeAll(conn,pre,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="八、存储过程"><a href="#八、存储过程" class="headerlink" title="八、存储过程"></a>八、存储过程</h3><h4 id="prepareCall"><a href="#prepareCall" class="headerlink" title="prepareCall"></a>prepareCall</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入部门编号&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> deptno=sc.nextInt();</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    CallableStatement c=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn=getConnection();</span><br><span class="line">        String sql=<span class="string">&quot;call sp_emp4(?,?)&quot;</span>;</span><br><span class="line">        c=conn.prepareCall(sql);</span><br><span class="line">        <span class="comment">//设置输入参数</span></span><br><span class="line">        c.setInt(<span class="number">1</span>,deptno);</span><br><span class="line">        <span class="comment">//设置输出参数</span></span><br><span class="line">        c.registerOutParameter(<span class="number">2</span>, Types.INTEGER);</span><br><span class="line"></span><br><span class="line">        c.executeQuery();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        closeAll(conn,c,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testIn</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入部门编号&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> deptno=sc.nextInt();</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    CallableStatement c=<span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        conn=getConnection();</span><br><span class="line">        String sql=<span class="string">&quot;call sp_emp2(?)&quot;</span>;</span><br><span class="line">        c=conn.prepareCall(sql);</span><br><span class="line">        <span class="comment">//设置输入参数</span></span><br><span class="line">        c.setInt(<span class="number">1</span>,deptno);</span><br><span class="line">        <span class="comment">//发送参数</span></span><br><span class="line">        rs=c.executeQuery();</span><br><span class="line">        System.out.println(deptno+<span class="string">&quot;员工&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(rs.getInt(<span class="number">1</span>)+rs.getString(<span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        closeAll(conn,c,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="九、jdbc分层"><a href="#九、jdbc分层" class="headerlink" title="九、jdbc分层"></a>九、jdbc分层</h3><h4 id="使用属性文件动态切换数据库"><a href="#使用属性文件动态切换数据库" class="headerlink" title="使用属性文件动态切换数据库"></a>使用属性文件动态切换数据库</h4><h5 id="配置文件propertise"><a href="#配置文件propertise" class="headerlink" title="配置文件propertise"></a>配置文件propertise</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/emp</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">86795462m</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h5 id="使用statis代码块"><a href="#使用statis代码块" class="headerlink" title="使用statis代码块"></a>使用statis代码块</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driverClass=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">			InputStream in=JdbcUtil.class.getResourceAsStream(<span class="string">&quot;/jdbcEmp.properties&quot;</span>);</span><br><span class="line">			properties.load(in);</span><br><span class="line"></span><br><span class="line">			url=properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">			user=properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">			password=properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">			driverClass=properties.getProperty(<span class="string">&quot;driverClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">			Class.forName(driverClass);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1、创建工具类"><a href="#1、创建工具类" class="headerlink" title="1、创建工具类"></a>1、创建工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建立连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 数据连接对象</span></span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   <span class="comment">// 获取连接并捕获异常</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();<span class="comment">// 异常处理</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 返回连接对象</span></span><br><span class="line">   <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeAll</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 若结果集对象不为空，则关闭</span></span><br><span class="line">   <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         rs.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 若Statement对象不为空，则关闭</span></span><br><span class="line">   <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         stmt.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 若数据库连接对象不为空，则关闭</span></span><br><span class="line">   <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         conn.close();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql, Object[] param)</span> </span>&#123;</span><br><span class="line">   Connection conn = getConnection();</span><br><span class="line">   <span class="comment">// 数据连接对象</span></span><br><span class="line">   PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      pstmt = conn.prepareStatement(sql);</span><br><span class="line">      <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; param.length; i++) &#123;</span><br><span class="line">            pstmt.setObject(i + <span class="number">1</span>, param[i]);</span><br><span class="line">            <span class="comment">// 为预编译sql设置参数</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      num = pstmt.executeUpdate();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      closeAll(conn, pstmt, <span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql=<span class="string">&quot;insert into emp values (?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">Object[] params=&#123;empno,ename,job,mgr,<span class="keyword">new</span> java.sql.Date(hiredate.getTime()),sal,comm,deptno&#125;;</span><br><span class="line"><span class="keyword">int</span> result=JdbcUtil.executeUpdate(sql,params);</span><br></pre></td></tr></table></figure>

<h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p><img src="https://csn.damyoung.cn/image-20200908125204782.png" alt="image-20200908125204782"><img src="https://csn.damyoung.cn/image-20200908125225154.png" alt="image-20200908125225154"></p>
<h4 id="2、创建数据访问层"><a href="#2、创建数据访问层" class="headerlink" title="2、创建数据访问层"></a>2、创建数据访问层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接User表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByUsernameAndPassword</span><span class="params">(String username,String pwd)</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn=getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;select *from user where username=? and password=?&quot;</span>;</span><br><span class="line">            PreparedStatement p=conn.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给通配符添加数据</span></span><br><span class="line">            p.setString(<span class="number">1</span>,username);</span><br><span class="line">            p.setString(<span class="number">2</span>,pwd);</span><br><span class="line">            <span class="comment">//将sql语句发送到数据库查询，并返回结果boolean</span></span><br><span class="line">            ResultSet r=p.executeQuery();</span><br><span class="line">            <span class="comment">//如果存在该用户</span></span><br><span class="line">            <span class="keyword">if</span> (r.next())&#123;</span><br><span class="line">                user=<span class="keyword">new</span> User(username,pwd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpDao</span> <span class="keyword">extends</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteEmp</span><span class="params">(<span class="keyword">int</span> empno)</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;delete from emp where empno=?&quot;</span>;</span><br><span class="line">        Object[] params=&#123;empno&#125;;</span><br><span class="line">        <span class="keyword">return</span> executeUpdate(sql,params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addEmp</span><span class="params">(Emp emp)</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;insert into emp valuse(?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">        Object[] params=&#123;emp.getEmpno(),emp.getEname(),emp.getJob(),emp.getMgr(),<span class="keyword">new</span> java.sql.Date(emp.getHiredate().getTime()),emp.getSal(),emp.getComm(),emp.getDeptno()&#125;;</span><br><span class="line">        <span class="keyword">return</span> executeUpdate(sql,params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title">selectAllEmps</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Emp&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn=getConnection();</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">            String sql=<span class="string">&quot;select *from emp&quot;</span>;</span><br><span class="line">            PreparedStatement p=conn.prepareStatement(sql);</span><br><span class="line">            ResultSet rs=p.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                Emp emp=<span class="keyword">new</span> Emp();</span><br><span class="line">              	emp.setSal(rs.getInt(<span class="string">&quot;sal&quot;</span>));</span><br><span class="line">                emp.setComm(rs.getInt(<span class="string">&quot;comm&quot;</span>));</span><br><span class="line">                emp.setDeptno(rs.getInt(<span class="string">&quot;deptno&quot;</span>));</span><br><span class="line">                emp.setEmpno(rs.getInt(<span class="string">&quot;empno&quot;</span>));</span><br><span class="line">                emp.setEname(rs.getString(<span class="string">&quot;ename&quot;</span>));</span><br><span class="line">                emp.setHiredate(rs.getDate(<span class="string">&quot;hiredate&quot;</span>));</span><br><span class="line">                emp.setMgr(rs.getInt(<span class="string">&quot;mgr&quot;</span>));</span><br><span class="line">                emp.setJob(rs.getString(<span class="string">&quot;job&quot;</span>));</span><br><span class="line">                list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">            closeAll(conn,p,rs);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、创建视图层"><a href="#3、创建视图层" class="headerlink" title="3、创建视图层"></a>3、创建视图层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示层</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">        String username=sc.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">        String pwd=sc.next();</span><br><span class="line"></span><br><span class="line">        UserDao userDao=<span class="keyword">new</span> UserDao();</span><br><span class="line">        User user=userDao.findUserByUsernameAndPassword(username,pwd);</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有员工信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectAllEmps</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EmpDao empDao=<span class="keyword">new</span> EmpDao();</span><br><span class="line">        List&lt;Emp&gt; list=empDao.selectAllEmps();</span><br><span class="line"><span class="comment">//        for (Emp e:list) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addEmp</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">           System.out.println(<span class="string">&quot;编号&quot;</span>);</span><br><span class="line">           <span class="keyword">int</span> empno=sc.nextInt();</span><br><span class="line">           System.out.println(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">           String ename=sc.next();</span><br><span class="line">           System.out.println(<span class="string">&quot;职位&quot;</span>);</span><br><span class="line">           String job=sc.next();</span><br><span class="line">           System.out.println(<span class="string">&quot;经理编号&quot;</span>);</span><br><span class="line">           <span class="keyword">int</span> mgr=sc.nextInt();</span><br><span class="line">           System.out.println(<span class="string">&quot;yyyy-mm-dd&quot;</span>);</span><br><span class="line">           String date=sc.next();</span><br><span class="line">           SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">           Date hiredate=dateFormat.parse(date);</span><br><span class="line">           System.out.println(<span class="string">&quot;工资&quot;</span>);</span><br><span class="line">           <span class="keyword">double</span> sal=sc.nextDouble();</span><br><span class="line">           System.out.println(<span class="string">&quot;奖金&quot;</span>);</span><br><span class="line">           <span class="keyword">double</span> comm=sc.nextDouble();</span><br><span class="line">           System.out.println(<span class="string">&quot;部门编号&quot;</span>);</span><br><span class="line">           <span class="keyword">int</span> deptno=sc.nextInt();</span><br><span class="line">           Emp emp=<span class="keyword">new</span> Emp(empno,ename,job,mgr,hiredate,sal,comm,deptno);</span><br><span class="line"></span><br><span class="line">           EmpDao empDao=<span class="keyword">new</span> EmpDao();</span><br><span class="line">           <span class="keyword">int</span> result=empDao.addEmp(emp);</span><br><span class="line">           <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deletEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入员工编号&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> empno=sc.nextInt();</span><br><span class="line">        EmpDao empDao=<span class="keyword">new</span> EmpDao();</span><br><span class="line">        <span class="keyword">int</span> result =empDao.deleteEmp(empno);</span><br><span class="line">        <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="十、事务"><a href="#十、事务" class="headerlink" title="十、事务"></a>十、事务</h3><p>connection.setAutoCommit(false) 默认true，自动提交</p>
<p>connection.commit() 提交事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=getConnection();</span><br><span class="line">            <span class="comment">//设置提交方式</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            String delSql=<span class="string">&quot;update account set balance=balance-500 where name=&#x27;张三&#x27;&quot;</span>;</span><br><span class="line">            String addSql=<span class="string">&quot;update account set balance=balance+500 where name=&#x27;李四&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            stmt=conn.prepareStatement(delSql);</span><br><span class="line">            stmt.executeUpdate();</span><br><span class="line"></span><br><span class="line"><span class="comment">//            int i=100/0;</span></span><br><span class="line">            stmt=conn.prepareStatement(addSql);</span><br><span class="line">            stmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">assert</span> conn != <span class="keyword">null</span>;</span><br><span class="line">                conn.rollback();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (SQLException e1)&#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h2 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h2><p>创建一个连接池，每次需要的的时候从连接池获取连接，减少每次用户都要从服务器获取连接，效率低</p>
<p>使用<code>DataSource</code>接口</p>
<h3 id="1、C3P0"><a href="#1、C3P0" class="headerlink" title="1、C3P0"></a>1、C3P0</h3><p>导入c3p0-0.9.1.2.jar包</p>
<p><strong>配置文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql数据库连接的各项参数--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/myabl?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8<span class="symbol">&amp;amp;</span>useSSL=false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>86795462m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据库连接池的初始连接数、最小链接数、获取连接数、最大连接数、最大空闲时间--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用mysql的配置读取连接池对象 --&gt;</span></span><br><span class="line"></span><br><span class="line">    -<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置字符集和时区 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/emp<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--最大空闲时间，超过该秒数未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--连接池中保留的最大连接数。默认值: 15 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接池中保留的最小连接数，默认为：3--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--重新尝试的时间间隔，默认为：1000毫秒--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryDelay&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;automaticTestTable&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;breakAfterAcquireFailure&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleConnectionTestPeriod&quot;</span>&gt;</span>60<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- This is my config for oracle --&gt;</span></span><br><span class="line"></span><br><span class="line">    -<span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>oracle.jdbc.driver.OracleDriver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:oracle:thin:@localhost:1521:orcl<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>scott<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0Utils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *使用ComboPooledDataSource来生成DataSource的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从连接池中获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">            <span class="comment">//1/10</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *释放连接回连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement stmt, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            rs = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            stmt = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            conn = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addEmp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Connection conn=<span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement pstmt=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//从池子获取连接</span></span><br><span class="line">        conn= com.seehope.util.C3P0Utils.getConnection();</span><br><span class="line">        String sql=<span class="string">&quot;insert into emp(empno,ename) values(?,?)&quot;</span>;</span><br><span class="line">     <span class="comment">//必须在自定义的connection类中重写prepareStatement(sql)方法</span></span><br><span class="line">        pstmt=conn.prepareStatement(sql);</span><br><span class="line">        pstmt.setInt(<span class="number">1</span>,<span class="number">123</span>);</span><br><span class="line">        pstmt.setString(<span class="number">2</span>,<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> rows =pstmt.executeUpdate();</span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+rows);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、Druid"><a href="#2、Druid" class="headerlink" title="2、Druid"></a>2、Druid</h3><p>导入druid-1.0.9.jar包</p>
<p>阿里巴巴</p>
<p><strong>配置文件properties</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/emp</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">*******</span></span><br><span class="line"><span class="comment"># \u521D\u59CB\u5316\u8FDE\u63A5\u6570\u91CF</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># \u6700\u5927\u8FDE\u63A5\u6570</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># \u6700\u5927\u7B49\u5F85\u65F6\u95F4</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>

<p><strong>工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.seehope.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *     1.定义成员变量 DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream in=DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            pro.load(in);</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="comment">//1/10</span></span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line">        close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> <span class="keyword">extends</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection conn=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement psmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn=getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;insert into account(name,balance) values(?,?)&quot;</span>;</span><br><span class="line">            psmt=conn.prepareStatement(sql);</span><br><span class="line">            psmt.setString(<span class="number">1</span>,<span class="string">&quot;试试&quot;</span>);</span><br><span class="line">            psmt.setDouble(<span class="number">2</span>,<span class="number">3000</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> count=psmt.executeUpdate();</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DruidUtils.close(psmt,conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3、DButils"><a href="#3、DButils" class="headerlink" title="3、DButils"></a>3、DButils</h3><p>导入 commons-dbutils-1.4.jar</p>
<h4 id="（1）update"><a href="#（1）update" class="headerlink" title="（1）update"></a>（1）update</h4><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">queryRunner.update(<span class="string">&quot;update book set name=?,price=?,category=?,pnum=?,imgurl=?,description=?,author=?,sales=? where id=?&quot;</span>, params);</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UButilDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr=<span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">        qr.update(<span class="string">&quot;insert into user values (?,?)&quot;</span>,<span class="string">&quot;alice&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr=<span class="keyword">new</span> QueryRunner(C3P0Utils.getDataSource());</span><br><span class="line">        qr.update(<span class="string">&quot;update user set username=?,password=? where username=?&quot;</span>,<span class="string">&quot;rose&quot;</span>,<span class="string">&quot;111&quot;</span>,<span class="string">&quot;alice&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr=<span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">        qr.update(<span class="string">&quot;delete from user where username=?&quot;</span>,<span class="string">&quot;rose&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        QueryRunner qr=<span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">        Object[][] params=<span class="keyword">new</span> Object[<span class="number">10</span>][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;params.length; i++) &#123;</span><br><span class="line">            params[i]=<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;seehope&quot;</span>+i,<span class="string">&quot;123&quot;</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        qr.batch(<span class="string">&quot;insert into user(username,password) values(?,?)&quot;</span>,params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）query"><a href="#（2）query" class="headerlink" title="（2）query"></a>（2）query</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ScalarHandler:适合取单行单列数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    QueryRunner qr=<span class="keyword">new</span> QueryRunner(C3P0Utils.getDataSource());</span><br><span class="line">    Object o=qr.query(<span class="string">&quot;select count(*) from emp&quot;</span>,<span class="keyword">new</span> ScalarHandler(<span class="number">1</span>));</span><br><span class="line">    System.out.println(o.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BeanHandler: 适合取单行数据，返回指定泛型对象类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils.getDataSource());</span><br><span class="line">    Emp emp = qr.query(<span class="string">&quot;select *from emp where empno=?&quot;</span>, <span class="keyword">new</span> BeanHandler&lt;Emp&gt;(Emp.class), <span class="number">7369</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">    System.out.println(emp.getComm()+<span class="string">&quot;\t&quot;</span>+emp.getDeptno()+<span class="string">&quot;\t&quot;</span>+emp.getEmpno()+<span class="string">&quot;\t&quot;</span>+emp.getMgr());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BeanListHandler: 返回泛型集合多行多列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    QueryRunner qr = <span class="keyword">new</span> QueryRunner(C3P0Utils.getDataSource());</span><br><span class="line">    List&lt;Emp&gt; emp = qr.query(<span class="string">&quot;select *from emp&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;Emp&gt;(Emp.class));</span><br><span class="line">    System.out.println(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Emp e :emp)&#123;</span><br><span class="line">        System.out.println(e.getComm()+<span class="string">&quot;\t&quot;</span>+e.getDeptno()+<span class="string">&quot;\t&quot;</span>+e.getEmpno()+<span class="string">&quot;\t&quot;</span>+e.getMgr());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>jdbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/11/25/01spring/</url>
    <content><![CDATA[<h1 id="1、JavaBean规范以及javaBean类型"><a href="#1、JavaBean规范以及javaBean类型" class="headerlink" title="1、JavaBean规范以及javaBean类型"></a>1、JavaBean规范以及javaBean类型</h1><h2 id="JavaBean规范"><a href="#JavaBean规范" class="headerlink" title="JavaBean规范"></a>JavaBean规范</h2><ul>
<li>必须要有包</li>
<li>必须实现get/set方法</li>
<li>必须提供无参构造</li>
<li>必须实现序列化接口</li>
</ul>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><blockquote>
<p>序列化：是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。</p>
<p>​                序列化后的字节流保存了Java对象的状态以及相关的描述信息</p>
<p>反序列化：客户端从文件中或网络上获得序列化后的对象字节流后，</p>
<p>​                    根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p>
</blockquote>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><blockquote>
<p>简单无规则java对象(plian ordinary java object pojo)</p>
<ul>
<li>一个中间对象，可以转化为PO、DTO、VO</li>
</ul>
</blockquote>
<blockquote>
<p>PO持久化对象(persistent object)</p>
<ul>
<li>对应数据库中的entity</li>
</ul>
</blockquote>
<blockquote>
<p>接收请求对象BO(bussiness object)</p>
<ul>
<li>在前后端分离，http响应json格式封装的数据对象</li>
</ul>
</blockquote>
<blockquote>
<p>返回响应VO(value object)</p>
<ul>
<li>封装渲染前端view的数据对象</li>
</ul>
</blockquote>
<blockquote>
<p>数据传输对象(data transfer object)</p>
<ul>
<li>返回的数据库操作对象 (count(*) )</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="2、简介"><a href="#2、简介" class="headerlink" title="2、简介"></a>2、简介</h1><p>Spring 是分层的 Java SE/EE 应用 full-stack 轻量级开源框架，以 <strong>IoC</strong>（Inverse Of Control： 反转控制）和 <strong>AOP</strong>（Aspect Oriented Programming：面向切面编程）为内核，提供了展现层 Spring MVC 和持久层 Spring JDBC 以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多 著名的第三方框架和类库，</p>
<p><strong>工厂模式解耦</strong></p>
<p>将MVC三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让类中通过读取配置文件，把这些对象创建出来并存起来</p>
<p>这个读取配置文件，创建和获取三层对象的类就是工厂</p>
<h1 id="3、IOC"><a href="#3、IOC" class="headerlink" title="3、IOC"></a>3、IOC</h1><h2 id="IOC原理"><a href="#IOC原理" class="headerlink" title="IOC原理"></a>IOC原理</h2><blockquote>
<p>Spring提供的容器又称为IOC容器</p>
<p>IOC-inversion of Control-控制反转</p>
</blockquote>
<h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a><strong>传统方式</strong></h3><blockquote>
<p>创建实例需要<code>new</code>,存在实例化麻烦的问题，且多个Service可能创建多个相同实例</p>
<p>组件由应用程序自身创建和配置</p>
</blockquote>
<p>系统在没有引入IOC容器之前，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。</p>
<p> IoC 容器实际上就是个<code>Map（key，value）</code>,<code>Map</code>中存放的是各种对象。</p>
<h3 id="IOC模式"><a href="#IOC模式" class="headerlink" title="IOC模式"></a><strong>IOC模式</strong></h3><blockquote>
<p>控制权发生了反转，从应用程序转移到Ioc容器。</p>
<p>为了让组件在IOC容器中被”装配”出来，需要某种”注入”机制</p>
</blockquote>
<p>由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。</p>
<h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a><strong>DI</strong></h3><blockquote>
<p>DI-dependecy Injection-依赖注入</p>
<ul>
<li>将组件的创建+配置 与组件的使用分离</li>
<li>由IOC容器负责管理组件的生命周期</li>
</ul>
</blockquote>
<p>DI即Dependency Injection，是控制反转的一种实现方式。控制被反转之后，获得依赖对象的过程由自身管理变为了由IOC容器主动注入所谓依赖注入，就是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。</p>
<h2 id="Spring工厂"><a href="#Spring工厂" class="headerlink" title="Spring工厂"></a>Spring工厂</h2><blockquote>
<p>Spring使用工厂模式可以通过<code>BeanFactory</code>或者<code>ApplicationContext</code>创建bean对象</p>
</blockquote>
<p><code>BeanFactory</code>是Spring容器中的顶层接口，<code>ApplicationContext</code>是它的子接口</p>
<p>区别：创建对象的时间点不同</p>
<ul>
<li><code>BeanFactory</code>：延迟注入（使用到某个bean的时候才会注入），相比于<code>ApplicationContext</code>来说会占用更少的内存，程序启动速度更快</li>
<li><code>ApplicationContext</code>：容器启动的时候，不管用没用到，一次性创建所有bean。<code>BeanFactory</code>仅提供了最基本的依赖注入支持，<code>ApplicationContext</code>扩展了<code>BeanFactory</code>，除了有<code>BeanFactory</code>的功能，还有额外的更多功能，所以一般使用<code>ApplicationContext</code>。</li>
</ul>
<p><code>ApplicationContext</code>的实现类</p>
<ol>
<li><code>ClassPathXmlApplication</code>：把上下文文件当成类路径资源</li>
<li><code>FileSystemXmlApplication</code>：从文件系统中的XML文件载入上下文定义信息</li>
<li><code>XmlWebApplicationContext</code>：从Web系统中的XML文件载入上下文定义信息</li>
</ol>
<h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="XML形式"><a href="#XML形式" class="headerlink" title="XML形式"></a>XML形式</h3><blockquote>
<ul>
<li>XML配置文件指示IoC容器创建JavaBean组件，</li>
<li>把id为<code>servlet</code>的组件通过属性<code>dataSource</code>（即调用<code>setDataSource()</code>方法）注入到组件中</li>
</ul>
</blockquote>
<p><strong>bean标签</strong></p>
<blockquote>
<p><strong>由spring管理bean的生命周期</strong></p>
<p>id: javabean的id</p>
<p>class: 包名+类名</p>
<p>scope：request （一次请求之内都是统一bean）<br>              session（一次会话之内都是一个bean）<br>              singleton 单例<br>              prototype原型 （每一次获取都是新的bean） 默认是单例</p>
<p>init-method:指定初始化方法</p>
<p>destroy-method:指定销毁方法</p>
</blockquote>
<p>单例对象：singleton，一个应用只有一个对象的实例</p>
<p>​                    生命周期跟着容器创建和销毁</p>
<p>多例对象：每次访问对象，都会重新创建对象实例</p>
<p>​                    创建会受到ioc容器管理，ioc容器不能控制其死亡，当不使用会被GC回收</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serlvet1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mock.MockServlet1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DI 依赖注入 给零件装配初始值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 8大基本类型以及String， 都是通过 value装配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lines&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用类型装配的时候，必须也要是工厂的零件之一 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mockServlet2&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;serlvet2&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maps&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>di<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mockServlet2s&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;serlvet2&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;serlvet2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;serlvet2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;mock.MockServlet2&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-bean.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><blockquote>
<p>通过构造方法实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookService</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Annotation配置"><a href="#Annotation配置" class="headerlink" title="Annotation配置"></a>Annotation配置</h3><blockquote>
<p>通过注解形式，让Spring<strong>自动扫描Bean并组装</strong></p>
<p>XML配置相比，<code>@Autowired</code>大幅简化了注入，因为它不但可以写在<code>set()</code>方法上，还可以直接写在字段上，甚至可以写在构造方法中</p>
</blockquote>
<h4 id="开启注解扫描以及注解支持"><a href="#开启注解扫描以及注解支持" class="headerlink" title="开启注解扫描以及注解支持"></a><strong>开启注解扫描以及注解支持</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解扫描 base-package 表示从哪一个包开始扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;dm&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="为bean添加注解"><a href="#为bean添加注解" class="headerlink" title="为bean添加注解"></a><strong>为bean添加注解</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;1&quot;)</span> <span class="comment">//1位bean name</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;userServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User(<span class="string">&quot;mt&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">      userService.insertUser(user);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> 		                                              ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserController userController = (UserController) 				                                   applicationContext.getBean(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">userController.insertUser();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Filter过滤器：拦截web访问url地址。</p>
<p>Interceptor拦截器：拦截以 .action结尾的url，拦截Action的访问。</p>
<p>Spring AOP拦截器：只能拦截Spring管理Bean的访问（业务层Service）</p>
</blockquote>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><blockquote>
<p>相当于<bean id = " " class=" "/></p>
</blockquote>
<p>IOC</p>
<p>@Controller 控制层   @Service 业务层  @Repository dao层   @Configuration 配置层</p>
<p>@Component 其他  默认使用当前类名首字母小写作为Bean名字</p>
<p>属性：value:用于指定bean的id，如果不指定value属性，默认bean的id为当前类名，首字母小写</p>
<h3 id="注入数据"><a href="#注入数据" class="headerlink" title="注入数据"></a>注入数据</h3><blockquote>
<p>相当于<property name =" " ref= " "> </p>
<p>​            <property name = " " value= " "></p>
</blockquote>
<p>@Autowired 自动写入</p>
<ul>
<li>先判断容器是否有xxx的实现，若只有一个，则直接注入</li>
<li>找到多个实现，则先看成员变量是否和bean相同，则直接注入</li>
<li>若无，则报错</li>
</ul>
<p>使用@Qualifier去指定bean的id(默认类名)，与@autowired配置使用</p>
<p>@Resource: 相当于@Autowired+@Qualifier,以byName形式进行自动装配</p>
<h3 id="作用范围"><a href="#作用范围" class="headerlink" title="作用范围"></a>作用范围</h3><blockquote>
<p>相当于 <bean id = " " class = "" scope = " "></p>
</blockquote>
<p>@Scope:指定bean的作用范围 value:singleton,prototype,request,response</p>
<h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><p>@PostConstruct :用于指定初始化方法</p>
<p>@PreDestory :  用于指定销毁方法</p>
<h3 id="废弃xml"><a href="#废弃xml" class="headerlink" title="废弃xml"></a>废弃xml</h3><p><strong>@Configuration</strong></p>
<p> 用于指定当前类是一个Spring配置类。当<strong>创建容器时会从该类上加载注解</strong>，获取容器时需要使用AnnotationApplicationContext</p>
<p>属性 value:用于指定配置类的字节码</p>
<p><strong>@Bean</strong></p>
<p>该注解只能写在方法上，表名使用此方法创建一个对象，并且放入Spring容器中</p>
<p>属性： name:给当前@Bean注解方法创建的对象指定一个名称(bean的id)</p>
<p><strong>@Import</strong></p>
<p>用于导入其他配置类</p>
<p>属性： value[]用于指定其他配置类的字节码</p>
<p>@<strong>PropertySource</strong></p>
<p>用于加载.properties文件的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.itheima.spring&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123; JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="4、AOP"><a href="#4、AOP" class="headerlink" title="4、AOP"></a>4、AOP</h1><blockquote>
<p>Aspect：切面，存放所有切面方法的类</p>
<p>joinpoint：连接点，被选中存在bean中的方法，一般是service方法</p>
<p>pointcut：切点，即一组连接点的集合</p>
<p>Interceptor：拦截器，是一种实现增强的方式</p>
</blockquote>
<p><strong>添加切面依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 切面依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>aop-aspect oriented programming-面向切面编程 </p>
<p>前置通知：在方法执行之前执行，返回值为boolean，返回为真，表示方法不会继续执行</p>
<p>后置通知：在方法执行结束之后的拦截，会得到方法的结果</p>
<p>异常通知：能够得到异常对象</p>
<p>环绕通知：在方法执行前后执行，目标执行的节点在这个方法之内</p>
</blockquote>
<p><strong>切面表达式</strong></p>
<table>
<thead>
<tr>
<th>标识符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>execution()</td>
<td>表达式的主体</td>
</tr>
<tr>
<td>第一个“*”符号</td>
<td>表示返回值的类型任意</td>
</tr>
<tr>
<td>com.loongshawn.method.ces</td>
<td>AOP所切的服务的包名，即，需要进行横切的业务类</td>
</tr>
<tr>
<td>包名后面的“..”</td>
<td>表示当前包及子包</td>
</tr>
<tr>
<td>第二个“*”</td>
<td>表示类名，*即所有类</td>
</tr>
<tr>
<td>.*(..)</td>
<td>表示任何方法名，括号表示参数，两个点表示任何参数类型</td>
</tr>
</tbody></table>
<h2 id="注解形式"><a href="#注解形式" class="headerlink" title="注解形式"></a>注解形式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启对切面的注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span>	</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//切面</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* dm.demo..*.service.impl.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;aroundBefore&quot;</span>);</span><br><span class="line">            Object proceed = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;aroundAfter&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;在&quot;</span> + <span class="keyword">new</span> Date() + <span class="string">&quot;使用参数&quot;</span> + Arrays.deepToString(joinPoint.getArgs()) + <span class="string">&quot;调用了&quot;</span></span><br><span class="line">                    + joinPoint.getSignature().getName() + <span class="string">&quot;并且得到了&quot;</span> + proceed + <span class="string">&quot;结果&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;pointCut()&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, Object result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="xml形式"><a href="#xml形式" class="headerlink" title="xml形式"></a>xml形式</h2><p><strong>在xml中配置切面</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dm.demo.aspect.MyAspect&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--面向切面的编程 最主要的目的就是批量处理或者在不影响源代码的情况下，单独修改某个方法的逻辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* dm.demo..*.service.impl.*.*(..))&quot;</span> <span class="attr">id</span>=<span class="string">&quot;servicePC&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePC&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;around&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturning&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowing&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;e&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;servicePC&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>切面方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">       Object proceed = joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;在&quot;</span> + <span class="keyword">new</span> Date() + <span class="string">&quot;使用参数&quot;</span> + Arrays.deepToString(joinPoint.getArgs()) + <span class="string">&quot;调用了&quot;</span></span><br><span class="line">               + joinPoint.getSignature().getName() + <span class="string">&quot;并且得到了&quot;</span> + proceed + <span class="string">&quot;结果&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> proceed;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, Object result)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint jp, Exception e)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint jp)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><strong>绑定切面</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserService service = (UserService) applicationContext.getBean(<span class="string">&quot;userServiceImpl&quot;</span>);</span><br><span class="line">service.insertUser(<span class="keyword">new</span> User(<span class="string">&quot;contorlller&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">UserService serviceProxy = (UserService) JDKProxyFactory.bind(service,</span><br><span class="line">      <span class="string">&quot;dm.demo.aspect.InterceptorImpl1&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>责任链模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserService serviceProxy2 = (UserService) JDKProxyFactory.bind(serviceProxy,</span><br><span class="line">      <span class="string">&quot;dm.demo.aspect.InterceptorImpl1&quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="拦截器类型"><a href="#拦截器类型" class="headerlink" title="拦截器类型"></a>拦截器类型</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>interceptor拦截器</p>
</blockquote>
<ul>
<li>@Before：这种拦截器先执行拦截代码，再执行目标代码。如果拦截器抛异常，那么目标代码就不执行了；</li>
<li>@After：这种拦截器先执行目标代码，再执行拦截器代码。无论目标代码是否抛异常，拦截器代码都会执行；</li>
<li>@AfterReturning：和@After不同的是，只有当目标代码正常返回时，才执行拦截器代码；</li>
<li>@AfterThrowing：和@After不同的是，只有当目标代码抛出了异常时，才执行拦截器代码；</li>
<li>@Around：能完全控制目标代码是否执行，并可以在执行前后、抛异常后执行任意拦截代码，可以说是包含了上面所有功能。</li>
</ul>
<h1 id="5、Jdbc"><a href="#5、Jdbc" class="headerlink" title="5、Jdbc"></a>5、Jdbc</h1><p><strong>导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置Druid连接池"><a href="#配置Druid连接池" class="headerlink" title="配置Druid连接池"></a>配置Druid连接池</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    druid连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;86795462m&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    用来操作数据源的操作模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addMoney</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where id=?&quot;</span>,account.getMoney().toString(),</span><br><span class="line">            account.getId());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transfer</span><span class="params">(Integer in, Integer out, BigDecimal money)</span> </span>&#123;</span><br><span class="line">    Account inUser = <span class="keyword">new</span> Account();</span><br><span class="line">    inUser.setId(in);</span><br><span class="line">    inUser.setMoney(money);</span><br><span class="line">    <span class="keyword">int</span> i=accountDao.addMoney(inUser);</span><br><span class="line"></span><br><span class="line">    Account outUser = <span class="keyword">new</span> Account();</span><br><span class="line">    outUser.setId(out);</span><br><span class="line">    outUser.setMoney(money);</span><br><span class="line">    <span class="keyword">int</span> i1 = accountDao.decrease(outUser);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">AccountService accountService= (AccountService) applicationContext.getBean(<span class="string">&quot;accountServiceImpl&quot;</span>);</span><br><span class="line">accountService.transfer(<span class="number">1</span>,<span class="number">2</span>,<span class="keyword">new</span> BigDecimal(<span class="number">20</span>));</span><br></pre></td></tr></table></figure>



<h1 id="6、事务管理"><a href="#6、事务管理" class="headerlink" title="6、事务管理"></a>6、事务管理</h1><blockquote>
<p>出现异常支持事务回滚</p>
</blockquote>
<h2 id="注解形式-1"><a href="#注解形式-1" class="headerlink" title="注解形式"></a>注解形式</h2><blockquote>
<p>在连接点加上注解<code>@transactional</code></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置切面"><a href="#配置切面" class="headerlink" title="配置切面"></a>配置切面</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1、配置事务增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当方法被切点选中之后，不是直接被通知，还要过一次筛选 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 要增强的方法,query*开头的方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPC&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* dm.demo..*.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--      事务引用+切面引用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/12/01/02springMVC/</url>
    <content><![CDATA[<h1 id="三层架构和MVC模型"><a href="#三层架构和MVC模型" class="headerlink" title="三层架构和MVC模型"></a>三层架构和MVC模型</h1><p>咱们开发服务器端程序，一般都基于两种形式，一种C/S架构程序(客户端和服务端)，一种B/S架构程序(浏览器和服务端)</p>
<p>在 JavaEE 开发中，几乎全都是基于 B/S 架构的开发。那么在 B/S 架构中，系统标准的三层架构 包括：表现层、业务层、持久层。    </p>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p><strong>表现层</strong></p>
<p>也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。 </p>
<p>表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。 表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。 表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</p>
<a id="more"></a> 

<p><strong>业务层</strong></p>
<p>也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业 务层，但是业务层不依赖 web 层。 业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的， 事务应该放到业务层来控制） </p>
<p><strong>持久层</strong></p>
<p>也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进 行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库 中。通俗的讲，持久层就是和数据库交互，对数据库表进行增删改查的。</p>
<h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><p>model view controller,一种用于设计创建Web应用程序表现层的模式</p>
<p><strong>Model模型</strong>：数据模型，用于封装数据</p>
<p><strong>View视图</strong>：展示数据，视图是依据模型数据创建的</p>
<p><strong>Controller控制器</strong>：应用程序中处理用户交互的部分，处理程序逻辑</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li>基于java实现的MVC设计模型的请求驱动类型的轻量级WEB框架</li>
<li>提供构建Web应用程序的全功能MVC模块</li>
<li>表现层框架(<strong>controller层由SpringMVC来管理</strong>)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mangofactory/swagger-springmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mangofactory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-springmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p><strong>1、配置web.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    springMVC核心类</span></span><br><span class="line"><span class="comment">        配置前端控制器</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--     配置Servlet初始化参数,加载spring-mvc配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        启动服务器，创建该servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        所有请求交由springMVC的前端控制器DispatcherServlet处理</span></span><br><span class="line"><span class="comment">        / 静态动态web资源</span></span><br><span class="line"><span class="comment">        /* 动态web资源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>！！！整合Spring</strong></p>
<blockquote>
<p>监听器是沟通spring和web服务器的桥梁，整合spring和springMVC</p>
<p>目的：在项目启动时，就加载applicationContext.xml配置文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   给监听器提供参数，必须使用全局参数，全局参数注入到servletContext中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    使用spring的webServlet监听器，在服务启动时创建spring容器</span></span><br><span class="line"><span class="comment">            是连接spring和服务器的桥梁</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、配置springmvc.xml</strong></p>
<blockquote>
<p>由于dispatcherServlet会拦截一切请求，包括静态资源，需要开启对静态资源的访问支持</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描整个工程，但是只处理controller    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;dm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    开启mvc的注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启默认的对静态资源文件访问支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    默认的解析jsp的视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/web/WEB-INF/jsp/&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、编写index.jsp和controller层</strong></p>
<p>1.index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h3&gt;入门案例&lt;/h3&gt;</span><br><span class="line">	&lt;a href=&quot;$&#123; pageContext.request.contextPath &#125;/hello&quot;&gt;入门案例&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>2.helloController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/1&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelMap modelMap, User user, <span class="meta">@RequestParam(required = true)</span>String password, String username)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">    System.out.println(username+password);</span><br><span class="line"></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line"></span><br><span class="line">    System.out.println(user.getPassword());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/web/WEB-INF/jsp/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、启动tomcat服务器</strong></p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p><img src="https://csn.damyoung.cn/SpringMVC%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg"></p>
<ol>
<li>用户发送的请求首先都会被<strong>前端控制器（中央控制器）</strong><code>DispatcherServlet</code>捕获</li>
<li>中央控制器通过<strong>处理器映射器</strong><code>HandleMapping</code>找到对应的处理器返回给中央控制器</li>
<li>中央控制器根据返回的处理器调用<strong>处理器适配器</strong><code>HandleAdapter</code>，处理器适配器经过适配调用具体的Controller，并将得到的ModelAndView返回给中央控制器</li>
<li>中央控制器将结果传递给<strong>视图解析器</strong><code>ViewReslover</code></li>
<li>视图解析器解析后返回具体视图</li>
</ol>
<h1 id="分发请求"><a href="#分发请求" class="headerlink" title="分发请求"></a>分发请求</h1><blockquote>
<p>有三种形式</p>
<p>所有请求都交给springMVC<strong>前端控制器</strong><code>DispatcherServlet</code>处理</p>
<ul>
<li>/ 静态与动态的web资源     /* 动态的web资源</li>
</ul>
<p>beanName</p>
<p>simpleUrl</p>
<p>annotation</p>
</blockquote>
<h2 id="beanName"><a href="#beanName" class="headerlink" title="beanName"></a>beanName</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloController&quot;</span> <span class="attr">name</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dm.demo.project.web.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="SimpleUrl"><a href="#SimpleUrl" class="headerlink" title="SimpleUrl"></a>SimpleUrl</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/1&quot;</span>&gt;</span>helloController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/2&quot;</span>&gt;</span>helloController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;/3&quot;</span>&gt;</span>helloController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启默认的对静态资源文件访问支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- exclude开启注解扫描 base-package 从哪一个包开始扫描类型是字符串 但是如果要从多个包开始扫描，中间可以用，隔开，而且支持通配符 --&gt;</span></span><br><span class="line">&lt;context:component-scan</span><br><span class="line">        base-package=&quot;dm&quot; &gt;</span><br><span class="line">    &lt;context:exclude-filter</span><br><span class="line">            type=&quot;annotation&quot;</span><br><span class="line">            expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--include 扫描整个工程，但是只处理controller    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;dm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="传入注解参数"><a href="#传入注解参数" class="headerlink" title="传入注解参数"></a>传入注解参数</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><ol>
<li>建立请求url和处理方法之间的对应关系</li>
<li>可以作用类(一级访问目录)，作用在方法上(二级访问目录)，加上”<code>/</code>“</li>
<li>属性<ol>
<li>path 请求路径的url  </li>
<li>value等同于path属性</li>
<li>method：请求该方法的请求方式</li>
<li>params : 指定限制请求参数的条件</li>
</ol>
</li>
</ol>
<p>请求参数中文乱码解决</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置过滤器，解决中文乱码的问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-</span>				     <span class="attr">class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filterclass</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定字符集 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h2><p>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</p>
<p>属性 </p>
<ol>
<li> value: 请求参数的名称</li>
<li>required: 请求url是否必须提供该参数，默认true(必须提供)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/id&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryUserById</span><span class="params">(<span class="meta">@RequestParam(value = &quot;id&quot;,required = false)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h2><p>作用：用于获取请求体的内容(<strong>不能用于get方法，get方法中没有请求体</strong>)</p>
<p>属性：required:是否必须要有请求体，默认是true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/body&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(<span class="meta">@RequestBody(required = false)</span>String body)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h2><blockquote>
<p>restful风格的url，可以根据不同的请求方法去执行后台的不同方法</p>
</blockquote>
<p>作用：拥有绑定url中的占位符 ( url中有/delete/{id} ,{id}就是占位符)</p>
<p>属性：value：指定url中的占位符名称     </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserByUrlId</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h2><p>作用：获取指定请求头的值</p>
<p>属性：value：请求头的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Accept&quot;)</span>String header)</span></span>&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CookieValue"><a href="#CookieValue" class="headerlink" title="@CookieValue"></a>@CookieValue</h2><p>作用：用于获取指定cookie的名称的值</p>
<p>属性：value：cookie的名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path=&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@CookieValue(value=&quot;JSESSIONID&quot;)</span> String cookieValue)</span> </span>&#123;</span><br><span class="line">	System.out.println(cookieValue);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h1><h2 id="返回值分类"><a href="#返回值分类" class="headerlink" title="返回值分类"></a>返回值分类</h2><h3 id="返回字符串"><a href="#返回字符串" class="headerlink" title="返回字符串"></a>返回字符串</h3><p>1.Controller方法返回字符串，根据使用的视图解析器解析为物理视图的地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;Accept&quot;)</span>String header)</span></span>&#123;</span><br><span class="line">    System.out.println(header);</span><br><span class="line">    <span class="comment">//使用默认的jsp视图解析器，hello.jsp</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    默认的解析jsp的视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/web/WEB-INF/jsp/&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置beetl解析器</strong></p>
<p>更改视图解析器(不能共存)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beetlConfig&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.beetl.ext.spring.BeetlGroupUtilConfiguration&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.beetl.ext.spring.BeetlSpringViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置字符集 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/web/WEB-INF/beetl/&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">DELIMITER_STATEMENT_START=<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">DELIMITER_STATEMENT_END=--&gt;</span></span><br><span class="line">TEMPLATE_CHARSET=UTF-8</span><br></pre></td></tr></table></figure>

<h3 id="返回ModelAndView"><a href="#返回ModelAndView" class="headerlink" title="返回ModelAndView"></a>返回ModelAndView</h3><ol>
<li>ModelAndView是Spring提供的一个对象，用来调整具体的JSP视图</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回ModelAndView对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">hello2</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//跳转到index.jsp</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;/web/WEB-INF/jsp/index.jsp&quot;</span>);</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;1232&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.ModelMap是数据模型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">(ModelMap modelMap, User user, <span class="meta">@RequestParam(required = true)</span>String password, String username)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">    <span class="comment">//返回到hello.jsp</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h2><blockquote>
<p>转发：使用forward关键字进行请求转发，转发的jsp路径，不走视图解析器，需要编写完整的路径</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUserByUrlId</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span><span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/web/WEB-INF/jsp/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>重定向：redirect</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 重定向</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/count&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">count</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;count方法执行了...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/add.jsp&quot;</span>;</span><br><span class="line">    <span class="comment">// return &quot;redirect:/user/findAll&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResponseBody响应json数据"><a href="#ResponseBody响应json数据" class="headerlink" title="ResponseBody响应json数据"></a>ResponseBody响应json数据</h2><blockquote>
<p>使用@ResponseBody 注解实现将 controller 方法返回对象(javabean)转换为 json 响应给客户端</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jackson2HttpMessageConverter&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               添加消息转化器--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;jackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用requestBody获得请求体数据</span></span><br><span class="line"><span class="comment"> * 使用responseBody 将javaBean对象转换成json字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">getUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><blockquote>
<p> SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的 name属性名称相同</p>
</blockquote>
<blockquote>
<ul>
<li>form表单enctype(表单请求正文类型)取值必须是 ： multipart/form-data</li>
<li>method属性取值为<strong>post</strong></li>
</ul>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--        文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/fileUpload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;picname&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">图片：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>配置文件解析器</p>
<blockquote>
<p>文件上传的解析器 id 是固定的，不能起别的名称，否则无法实现请求参数的绑定。（不光是文件，其他 字段也将无法绑定）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置最大文件大小(单位KB) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload2</span><span class="params">(HttpServletRequest request, MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;SpringMVC方式的文件上传...&quot;</span>);</span><br><span class="line">       <span class="comment">// 先获取到要上传的文件目录</span></span><br><span class="line">       String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">       <span class="comment">// 创建File对象，一会向该路径下上传文件</span></span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="comment">// 判断路径是否存在，如果不存在，创建该路径</span></span><br><span class="line">       <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">           file.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">       String filename = multipartFile.getOriginalFilename();</span><br><span class="line">       String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">       <span class="comment">// 把文件的名称唯一化</span></span><br><span class="line">       filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">       <span class="comment">// 上传文件</span></span><br><span class="line">       multipartFile.transferTo(<span class="keyword">new</span> File(file,filename));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>Controller调用service，service调用dao，异常都是<strong>向上抛出</strong>的，最终有<code>DispatcherServlet</code>找异常处理器进行异常的处理</p>
<p>自定义异常错误页面404</p>
</blockquote>
<p><strong>自定义异常</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message=message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自定义异常处理器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到具体的错误页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        SysException exception=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            exception=(SysException)ex;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            exception=<span class="keyword">new</span> SysException(<span class="string">&quot;请联系管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;message&quot;</span>,exception.getMessage());</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置异常处理器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;dm.demo.exception.SysExceptionResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Controller</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义内容显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/error-resolver&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">errorTest2</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> SysException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SysException(<span class="string">&quot;不能除以0小老弟啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



















]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2020/11/25/03Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>基于Java的持久层框架，还有封装程度更高的框架Hibernate</p>
<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>mybatis 是一个优秀的基于 java 的持久层框架，它<strong>内部封装了 jdbc</strong>，使开发者只需要关注 sql 语句本身， 而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。 </p>
<p>mybatis 通过 <strong>xml 或注解</strong>的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中 sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将<strong>结果</strong>映射为 java 对象并 返回。 </p>
<p>采用 <strong>ORM</strong> 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我 们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作。</p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//加载数据库驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//通过驱动管理类获取数据库链接</span></span><br><span class="line">        connection = DriverManager</span><br><span class="line">       .getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//定义 sql 语句 ?表示占位符</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from user where username = ?&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取预处理 statement</span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的</span></span><br><span class="line">        参数值</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        <span class="comment">//向数据库发出 sql 执行查询，查询出结果集</span></span><br><span class="line">        resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="comment">//遍历查询结果集</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">             System.out.println(resultSet.getString(<span class="string">&quot;id&quot;</span>)+<span class="string">&quot;</span></span><br><span class="line"><span class="string">             &quot;</span>+resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    	e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	resultSet.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            preparedStatement.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>存在的问题</strong></p>
<p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 </p>
<p>2、Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码。 </p>
<p>3、使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能 多也可能少，修改 sql 还要修改代码，系统不易维护。 </p>
<p>4、对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记 录封装成 pojo 对象解析比较方</p>
<a id="more"></a>

<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="基于xml与mapper接口"><a href="#基于xml与mapper接口" class="headerlink" title="基于xml与mapper接口"></a>基于xml与mapper接口</h2><p><strong>依赖maven</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring整合mybatis --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件mybatis.conf</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--改变MyBatis运行时行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启赖加载功能--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        关闭积极的懒加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        二级缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    自定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        单个别名定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置mybatis的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            配置连接数据库的信息，用的是数据源(连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;86795462m&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrdersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>映射配置UserMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select *from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试类</strong></p>
<blockquote>
<p>mybatis与jdbc一样，在实现crud操作时要去控制事务的提交commit</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建 session域工厂</span></span><br><span class="line">SqlSessionFactory sessionFactory =</span><br><span class="line">        <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到SqlSession</span></span><br><span class="line">SqlSession sqlSession = sessionFactory.openSession();</span><br><span class="line"><span class="comment">//配置文件中读取</span></span><br><span class="line">List&lt;Object&gt; queryAllUser = sqlSession.selectList(<span class="string">&quot;queryAllUser&quot;</span>);</span><br><span class="line"></span><br><span class="line">queryAllUser.forEach(System.out::println);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure>

<h2 id="基于注解形式"><a href="#基于注解形式" class="headerlink" title="基于注解形式"></a>基于注解形式</h2><p><strong>mapper层</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>mybatis.conf</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.IUserDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="MyBatis设计模式"><a href="#MyBatis设计模式" class="headerlink" title="MyBatis设计模式"></a>MyBatis设计模式</h1><p>工厂模式</p>
<p>代理模式</p>
<p>建造者模式</p>
<h1 id="Mybatis-conf配置标签"><a href="#Mybatis-conf配置标签" class="headerlink" title="Mybatis.conf配置标签"></a>Mybatis.conf配置标签</h1><blockquote>
<p>存在顺序问题</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-properties（属性）</span><br><span class="line">	--property</span><br><span class="line">-settings（全局配置参数）</span><br><span class="line">	--setting</span><br><span class="line">-typeAliases（类型别名）</span><br><span class="line">	--typeAliase</span><br><span class="line">	--package</span><br><span class="line">-typeHandlers（类型处理器）</span><br><span class="line">	-objectFactory（对象工厂）</span><br><span class="line">	-plugins（插件）</span><br><span class="line">-environments（环境集合属性对象）</span><br><span class="line">	--environment（环境子属性对象）</span><br><span class="line">		---transactionManager（事务管理）</span><br><span class="line">		---dataSource（数据源）</span><br><span class="line">-mappers（映射器）</span><br><span class="line">	--mapper</span><br><span class="line">	--package</span><br></pre></td></tr></table></figure>

<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>外部属性，这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一般用来给 environment 标签中的 dataSource 赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><p>MyBatis 中极其重要的配置，它们会改变 MyBatis 的运行时行为。</p>
<p>settings 中配置有很多。这里介绍几个平常使用过程中比较重要的配置：</p>
<p>![MyBatis中Setting节点内容](<a href="http://qiniu.xiaoming.net.cn/myBatis">http://qiniu.xiaoming.net.cn/myBatis</a> setting节点内容.jpg)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h2><p>类型别名，类型别名是为 Java 类型设置的一个名字。它只和 XML 配置有关。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias alias&#x3D;&quot;Blog&quot; type&#x3D;&quot;domain.blog.Blog&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure>

<p>当这样配置时，Blog 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p>
<h2 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h2><p>类型处理器，无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p>
<p>在 <code>org.apache.ibatis.type</code> 包下有很多已经实现好的 TypeHandler，可以参考如下:</p>
<p>![MyBatis 实现好的 TypeHandler](<a href="http://qiniu.xiaoming.net.cn/MyBatis%E5%AE%9E%E7%8E%B0%E5%A5%BD%E7%9A%84">http://qiniu.xiaoming.net.cn/MyBatis实现好的</a> TypeHandler.jpg)</p>
<p>可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p>
<p>具体做法为：实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口， 或继承一个很方便的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>， 然后可以选择性地将它映射到一个 JDBC 类型。</p>
<h2 id="objectFactory"><a href="#objectFactory" class="headerlink" title="objectFactory"></a>objectFactory</h2><p>对象工厂，MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public class ExampleObjectFactory extends DefaultObjectFactory &#123;</span><br><span class="line">  public Object create(Class type) &#123;</span><br><span class="line">    return super.create(type);</span><br><span class="line">  &#125;</span><br><span class="line">  public Object create(Class type, List<span class="tag">&lt;<span class="name">Class</span>&gt;</span> constructorArgTypes, List<span class="tag">&lt;<span class="name">Object</span>&gt;</span> constructorArgs) &#123;</span><br><span class="line">    return super.create(type, constructorArgTypes, constructorArgs);</span><br><span class="line">  &#125;</span><br><span class="line">  public void setProperties(Properties properties) &#123;</span><br><span class="line">    super.setProperties(properties);</span><br><span class="line">  &#125;</span><br><span class="line">  public <span class="tag">&lt;<span class="name">T</span>&gt;</span> boolean isCollection(Class<span class="tag">&lt;<span class="name">T</span>&gt;</span> type) &#123;</span><br><span class="line">    return Collection.class.isAssignableFrom(type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后需要在 XML 中配置此对象工厂</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.example.ExampleObjectFactory&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;someProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><p>插件开发，插件开发是 MyBatis 设计人员给开发人员留给自行开发的接口，MyBatis 允许在已映射语句执行过程中的某一点进行拦截调用。MyBatis 允许使用插件来拦截的方法调用包括：<code>Executor</code>、<code>ParameterHandler</code>、<code>ResultSetHandler</code>、<code>StatementHandler</code> 接口，这几个接口也是 MyBatis 中非常重要的接口。</p>
<h2 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h2><p>MyBatis 环境配置，MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。</p>
<p>这里注意一点，虽然 environments 可以指定多个环境，但是 SqlSessionFactory 只能有一个，为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure>

<p>环境配置如下:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h2><p>数据库厂商标示，MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h2><p>映射器，这是告诉 MyBatis 去哪里找到这些 SQL 语句，mappers 映射配置有四种方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>









<h1 id="ParameterStatement"><a href="#ParameterStatement" class="headerlink" title="ParameterStatement"></a>ParameterStatement</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span>&gt;</span></span><br><span class="line">        	select *from orders where user_id=#&#123;userid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ParameterType:代表参数的类型</li>
<li>resultType：代表返回结果集的类型</li>
<li>#{ ognl表达(对象.对象 ) }：代表占位符？，是用于执行语句时替换实际的数据</li>
</ul>
<h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><ul>
<li>java代码层次</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = userDao.findByName(<span class="string">&quot;%王%&quot;</span>);</span><br><span class="line"></span><br><span class="line">select * from user where username like #&#123;username&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在xml文件层次</li>
</ul>
<blockquote>
<p>${}:表示字符串拼接，不会做任何处理，会产生sql注入问题</p>
<p>#{}：如果参数是String，会自动加 ‘ ‘</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryByUserName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">        select *from user where username like &#x27;%$&#123;username&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ResultType"><a href="#ResultType" class="headerlink" title="ResultType"></a>ResultType</h2><blockquote>
<p>resultType属性可以指定结果集的类型，它支持基本类型和实体类类型</p>
<p>未注册过类型别名，必须使用类的全限名</p>
<p>实体类中的属性名称必须与查询语句的列对齐，实现对结果集的封装</p>
</blockquote>
<p>pojo的字段要与结果集字段名一致</p>
<h2 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h2><blockquote>
<p>可以建立查询的列名和实体类的属性名称不一致时建立对应关系。从而实现封装</p>
</blockquote>
<p>column：用于指定数据库别名 </p>
<p>property: 用于指定实体类属性名称</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 	type 属性：指定实体类的全限定类名</span></span><br><span class="line"><span class="comment">		id 属性：给定一个唯一标识，是给查询 select 标签引用用的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userSex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userAddress&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userBirthday&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersLazyLoad&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">    select *from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="连接池技术"><a href="#连接池技术" class="headerlink" title="连接池技术"></a>连接池技术</h1><p>而在 Mybatis 中也有连接池技术，但是它采用的是自己的连接池技术。在 Mybatis 的 mybatisconfig.xml 配置文件中，通过来实现 Mybatis 中连接池的配置。</p>
<p>分为三类：</p>
<ul>
<li>unpooled  不使用连接池的数据源</li>
<li>pooled       使用连接池的数据源</li>
<li>jndi             使用JNDI实现的数据源</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--            配置连接数据库的信息，用的是数据源(连接池)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;86795462m&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Mybatis通过工厂模式来创建数据源DataSource对象。<code>DataSourceFactory</code>的<code>getDataSource</code></li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201222095657371.png" alt="image-20201222095657371"></p>
<ul>
<li>创建DataSource实例后，会将其放到Configuration对象内的Environment对象中</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201222095532182.png" alt="image-20201222095532182"></p>
<ul>
<li><p>当需要创建SqlSession对象并需要执行SQL语句时，MyBatis才会去调用dataSource对象来创建Connection对象。</p>
<p><img src="https://csn.damyoung.cn/image-20201222095707480.png" alt="image-20201222095707480"></p>
</li>
</ul>
<h1 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h1><blockquote>
<p>在JDBC中可以通过手动方式将事务提交改为手动方式，setAutoCommit()方法，true为自动提交</p>
<p>MyBatis框架是对JDBC封装，MyBatis的事务控制方式，本身通过其设置事务提交方式</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201222101652608.png" alt="image-20201222101652608"></p>
<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>MyBatis动态sql可以在xml映射文件，以标签的形式编写，执行原理是根据表达式完成逻辑判断并动态拼接sql的功能，MyBatis提供9种动态标签</p>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><blockquote>
<p>if-test</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null and username != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">	and username like #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h2><blockquote>
<p>choose-when-otherwise</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 此时接收的参数为一个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectActiveBlogByTitleOrOther&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;blogResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from blogs where featured=false</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title =#&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;authorId != null&quot;</span>&gt;</span></span><br><span class="line">            and author_id = #&#123;authorId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and id&gt;0</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><blockquote>
<p>希望where条件语句也在需要的时候才加入，可以使用<code>where</code>来进行判断</p>
</blockquote>
<p>where元素只会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入“WHERE”子句。而且，<strong>若语句的开头为“AND”或“OR”，where元素也会将它们去除</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectActiveBlogByTitle2&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;blogResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from blogs</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;featured != null&quot;</span>&gt;</span></span><br><span class="line">            featured = #&#123;featured&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title like #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>可以使用set元素实现按需更新，指定具体需要更新的字段,set元素会动态前置 SET 关键字，同时也会删掉无关的逗号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;updateById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> username!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            username=#&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password!=null <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span> password!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">       		 password=#&#123;password&#125;,</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">	where id= #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>foreach是对一个集合进行遍历，通常是在构建 IN 条件语句的时候。</p>
<ul>
<li><code>item</code>：集合的值</li>
<li><code>index</code>：集合的索引</li>
<li><code>collection</code>:指定传入单数的类型， List、Set、Map 对象或者数组对象等都可以传递给<em>foreach</em>作为集合参数</li>
<li><code>open</code>：指定开头</li>
<li><code>sepatator</code>：指定分隔符</li>
<li><code>close</code>：指定结尾</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByIdList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> 		            <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select *from user where id</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p>trim可以用于指定加入的前缀和指定自动去除的前面或后面的内容，它有下面四个属性</p>
<ul>
<li>prefix ：加入的前置名</li>
<li>suffix：加入的后缀名</li>
<li>prefixOverrides：自动去除前面的内容</li>
<li>suffiexOverrides：自动去除后面的内容</li>
</ul>
<p>where属性相当于：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>set属性相当于:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Sql-amp-include"><a href="#Sql-amp-include" class="headerlink" title="Sql &amp; include"></a>Sql &amp; include</h2><p>这个元素可以被用来定义可重用的 SQL 代码段，这些 SQL 代码可以被包含在其他语句中。它可以（在加载的时候）被静态地设置参数。 在不同的包含语句中可以设置不同的值到参数占位符上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;columnBase&quot;</span>&gt;</span></span><br><span class="line">    id,title,author_id as authorId,featured,style</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;columnBase&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from Blogs where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="selectKey"><a href="#selectKey" class="headerlink" title="selectKey"></a>selectKey</h2><blockquote>
<p><code>&lt;selectKey&gt;</code> 为不支持自增的主键生成策略标签。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUUIDUser&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;dm.demo.project.pojo.UUIDUser&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">keyProperty</span>=<span class="string">&quot;uuid_id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        select uuid()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into uuid_user (uuid_id, uuid_detail) VALUES (#&#123;uuid_id&#125;,#&#123;uuid_detail&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一对一association"><a href="#一对一association" class="headerlink" title="一对一association"></a>一对一association</h2><p>在需要进行关联查询的 mapper 中配置 <code>association</code> 节点，其有以下几个属性：</p>
<ul>
<li><code>property</code>：对应该实体类关联另一个实体类的变量名</li>
<li><code>column</code>：对应表的字段名</li>
<li><code>javaType</code>：对应关联的实体类</li>
<li><code>select</code>：指定子查询（注意要加入名称空间）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--association 一对一关联查询 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClass&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassesResultMap&quot;</span>&gt;</span></span><br><span class="line">      select * from class c,teacher t where c.teacher_id=t.t_id and c.c_id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lcb.user.Classes&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ClassesResultMap&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 实体类的字段名和数据表的字段名映射 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.lcb.user.Teacher&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一对多collection"><a href="#一对多collection" class="headerlink" title="一对多collection"></a>一对多collection</h2><p>在 mapper 文件中使用 <code>collection</code> 节点，其有以下几个属性：</p>
<ul>
<li><code>property</code>：对应表中的 commentsList</li>
<li><code>column</code>：当前表与外表关联的键（一般是id）</li>
<li><code>javaType</code>：对应 property 的类型</li>
<li><code>ofType</code>：对应外表的实体类</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--collection 一对多关联查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClass2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ClassesResultMap2&quot;</span>&gt;</span></span><br><span class="line">        select * from class c,teacher t,student s where c.teacher_id=t.t_id </span><br><span class="line">        and c.c_id=s.class_id and c.c_id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.lcb.user.Classes&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ClassesResultMap2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;c_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.lcb.user.Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;student&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.lcb.user.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><blockquote>
<p>懒加载在子查询被查询到时才会加载</p>
<ul>
<li>积极延迟加载：只要获取任意属性内容，无论属性是否是关联表的内容，都会执行关联的表查询</li>
<li>非积极延迟加载：使用非延迟加载，只有当访问关联表数据时，才会执行关联表的查询。</li>
</ul>
</blockquote>
<p>Mybatis 仅支持 <code>association</code> 关联对象和 <code>collection</code> 关联集合对象的延迟加载,<code>association</code> 指的就是一对一，<code>collection</code> 指的就是一对多查询。在 Mybatis 配置文件中，可以配置是否启用延迟加载 <code>lazyLoadingEnabled=true|false</code>。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>使用 CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 <code>a.getB().getName()</code>，拦截器 <code>invoke()</code> 方法发现 <code>a.getB()</code> 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 <code>a.setB(b)</code>，于是 a 的对象 b 属性就有值了，接着完成 <code>a.getB().getName()</code> 方法的调用。这就是延迟加载的基本原理</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li>在setting中开启懒加载</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201222112045311.png" alt="image-20201222112045311"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersByLazyLoadResultMap&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">extends</span>=<span class="string">&quot;baseResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">ofType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">select</span>=<span class="string">&quot;dm.demo.project.mapper.OrdersMapper.queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            select对应的子查询</span></span><br><span class="line"><span class="comment">                id: 外键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersLazyLoad&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultMap</span>=<span class="string">&quot;queryUserAndOrdersByLazyLoadResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span>&gt;</span></span><br><span class="line">        select *from orders where user_id=#&#123;userid&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserAndOrdersLazyLoad</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserAndOrdersLazyLoad();</span><br><span class="line">        users.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(user.getUsername());</span><br><span class="line">            List&lt;Orders&gt; orders = user.getOrders();</span><br><span class="line">            orders.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            if (user.getId()==1)&#123;</span></span><br><span class="line"><span class="comment">//                List&lt;Orders&gt; orders1 = user.getOrders();</span></span><br><span class="line"><span class="comment">//                orders1.forEach(System.out::println);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>



<p><strong>测试用例</strong></p>
<p>测试用例不通过</p>
<ul>
<li>1.方法本身异常</li>
<li>2.与预期不符合</li>
<li>3.预期跑异常，但是没跑</li>
<li>4.超时</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test(expected = ArithmeticException.class,timeout = 2000)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAllUserSuccess</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        UUIDUser uuidUser = new UUIDUser(UUID.randomUUID().toString(), new Date().toString());</span></span><br><span class="line"><span class="comment">//        sqlSession.insert(&quot;insertUUIDUser&quot;,uuidUser);</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userMapper.queryAllUser();</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否符合预期值</span></span><br><span class="line">        assertEquals(<span class="number">5</span>,users.size());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有测试用例执行之前有且执行一次</span></span><br><span class="line"><span class="comment">     * 一般用来初始化测试环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUpBeforeClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">         sessionFactory =</span><br><span class="line">                <span class="keyword">new</span> SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  所有测试用例执行之前都会执行一次</span></span><br><span class="line"><span class="comment">     *  用来消除每个测试用例之间的影响</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        sqlSession = sessionFactory.openSession();</span><br><span class="line">        userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>Mybatis 中缓存分为一级缓存，二级缓存。通过缓存策略来减少数据库的查询次数，从而提 高性能。</p>
<h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>基于 <code>PerpetualCache</code>(永久缓存) 的 <code>HashMap</code> 本地缓存，其存储作用域为 <strong>SqlSession</strong>，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空。另外，如果在两次查询中间有增删改的操作，那么 MyBatis 就会重新刷新清空缓存区，那么下一次查询会重新执行 sql 语句<strong>默认打开一级缓存</strong>。</p>
<p>一级缓存是 SqlSession 范围的缓存，当调用 SqlSession 的修改，添加，删除，commit()，close()等方法时，就会清空一级缓存。</p>
<h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存与一级缓存其机制相同，默认也是采用 <code>PerpetualCache</code>，HashMap 存储，不同在于其存储作用域为 <code>Mapper(Namespace)</code>，并且可自定义存储源，如 <code>Ehcache</code>。</p>
<p>默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 <code>Serializable</code> <strong>序列化接口</strong>(可用来保存对象的状态),在它的映射文件中配置 <code>&lt;cache/&gt;</code></p>
<p>二级缓存是 mapper 映射级别的缓存，多个 SqlSession 去操作<strong>同一个 Mapper 映射的 sql 语句</strong>，多个 SqlSession 可以共用二级缓存，二级缓存是跨 SqlSession 的。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置相关的Mapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    开启该Mapper映射文件对二级缓存的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>开启statement的二级缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersLazyLoad&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">&quot;queryUserAndOrdersByLazyLoadResultMap&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    # useCache为代表这个statement使用二级缓存</span><br><span class="line">    select *from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>或在mapper接口使用注解</p>
<p><img src="https://csn.damyoung.cn/image-20201222152106510.png" alt="image-20201222152106510"></p>
<h1 id="Spring整合Mybatis"><a href="#Spring整合Mybatis" class="headerlink" title="Spring整合Mybatis"></a>Spring整合Mybatis</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--整合mybatis配置文件到spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        整合dataSource数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            整合setting对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        扫描classpath下mapper文件夹中所有xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        整合mappers映射器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mappers/**/*.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        可以加载mybatis配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;mybatis-spring:scan base-package=&quot;dm.demo.**.mapper&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dm.demo.**.mapper&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h1><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p>定义基类查询，可通过<code>extend</code>方式使代码复用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersByLazyLoadResultMap&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">extends</span>=<span class="string">&quot;baseResultMap&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="一对一-一对多查询"><a href="#一对一-一对多查询" class="headerlink" title="一对一/一对多查询"></a>一对一/一对多查询</h2><h4 id="一对一association-1"><a href="#一对一association-1" class="headerlink" title="一对一association"></a>一对一association</h4><ul>
<li>property:该实体类对应另一个实体类的变量名</li>
<li>javaType:对应实体类的java类型</li>
<li>select:子查询</li>
<li>column:对应数据库字段</li>
</ul>
<h3 id="一对多collection-1"><a href="#一对多collection-1" class="headerlink" title="一对多collection"></a>一对多collection</h3><ul>
<li>property:commentList的变量名</li>
<li>column:该表对应外表的键(外键)</li>
<li>javaType:property对应的java类型</li>
<li>ofType:外表对应实体类</li>
</ul>
<h2 id="嵌套查询和联合查询"><a href="#嵌套查询和联合查询" class="headerlink" title="嵌套查询和联合查询"></a>嵌套查询和联合查询</h2><p>联合查询：将几个表联合查询，只查询一次，通过<code>resultMap</code>里面配置<code>association</code>节点配置一对一的类</p>
<p>嵌套查询：先查一个表，通过该表与外表关联的主键id，再去另外一个表查询数据，也是通过<code>association</code>配置，但另外表的查询通过<code>select</code>配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;queryUserAndOrdersByLazyLoadResultMap&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">extends</span>=<span class="string">&quot;baseResultMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orders&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">ofType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;dm.demo.project.mapper.OrdersMapper.queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            select对应的子查询</span></span><br><span class="line"><span class="comment">                id: 外键</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dm.demo.project.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span>&gt;</span></span><br><span class="line">                select *from orders where user_id=#&#123;userid&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h1><blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession = sessionFactory.openSession(ExecutorType.BATCH);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>首先,创建一个简单的 insert 语句:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertname&quot;</span>&gt;</span></span><br><span class="line">    insert into names (name) values (#&#123;value&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 java 代码中像下面这样执行批处理插入:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List &lt; string &gt; names = <span class="keyword">new</span> arraylist();</span><br><span class="line">names.add(“fred”);</span><br><span class="line">names.add(“barney”);</span><br><span class="line">names.add(“betty”);</span><br><span class="line">names.add(“wilma”);</span><br><span class="line"><span class="comment">// 注意这里 executortype.batch</span></span><br><span class="line">sqlsession sqlsession = sqlsessionfactory.opensession(ExecutorType.BATCH);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    namemapper mapper = sqlsession.getmapper(namemapper.class);</span><br><span class="line">    <span class="keyword">for</span> (string name: names) &#123;</span><br><span class="line">        mapper.insertname(name);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlsession.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    sqlSession.rollback();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    sqlsession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="传递多个参数"><a href="#传递多个参数" class="headerlink" title="传递多个参数"></a>传递多个参数</h1><h2 id="参数排序"><a href="#参数排序" class="headerlink" title="参数排序"></a>参数排序</h2><p>按照参数排序，arg从0开始，param从1开始</p>
<p>dao层函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserselectUser</span><span class="params">(String name,String area)</span></span>;</span><br></pre></td></tr></table></figure>

<p>映射xml文件，<code>#&#123;0&#125;</code>表示接收的dao层第一个参数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUser&quot;</span><span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * fromuser_user_t whereuser_name = #&#123;0&#125; and user_area=#&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用-Param注解"><a href="#使用-Param注解" class="headerlink" title="使用@Param注解"></a>使用@Param注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">selectBlogByPage2</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Param(value = &quot;offset&quot;)</span> <span class="keyword">int</span> offset,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@Param(value = &quot;pagesize&quot;)</span> <span class="keyword">int</span> pagesize)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogByPage2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;blogResultMap&quot;</span>&gt;</span></span><br><span class="line">    select * from blogs limit #&#123;offset&#125;,#&#123;pagesize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多个参数封装成Map"><a href="#多个参数封装成Map" class="headerlink" title="多个参数封装成Map"></a>多个参数封装成Map</h2><p>如果多个参数表示业务逻辑的数据模型，没有对应的pojo，我们可以传入一个map,此时<code>#&#123;key&#125;</code>就是取出map的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBlogByPage3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.sqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    <span class="comment">//自己构建一个map</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">//注意key要和参数名对应</span></span><br><span class="line">    map.put(<span class="string">&quot;offset&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pagesize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.selectBlogByPage3(map);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象</title>
    <url>/2020/11/11/05%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>类加载器：将class文件解析成jvm能够看懂的结构体—&gt;方法区</p>
<p>方法区，虚拟机栈，本地方法栈，堆，程序计数器</p>
<h3 id="一、关键字"><a href="#一、关键字" class="headerlink" title="一、关键字"></a>一、关键字</h3><h4 id="1、final"><a href="#1、final" class="headerlink" title="1、final"></a>1、final</h4><ul>
<li>修饰变量表示<strong>常量</strong> ，常量不能被二次赋值</li>
<li>修饰方法，表示方法不能<strong>被子类重写(</strong> override )</li>
<li>修饰类，表示类<strong>不能被继承</strong>extends</li>
</ul>
<p>fianl修饰的引用数据类型，可以对其对象属性进行更改，但不能对引用数据类型的变量进行修改，也就是不能让其指向另一个对象</p>
<p><strong>final只保证这个引用类型变量所引用的地址不会发生改变</strong></p>
<h4 id="2、static"><a href="#2、static" class="headerlink" title="2、static"></a>2、static</h4><blockquote>
<p>从属于类，随着类的加载而加载，优先于对象存在</p>
</blockquote>
<ul>
<li>静态变量，<strong>被该类所有对象共享</strong>(用于线程的共用变量时)</li>
<li>静态方法，类名.方法名()，调用时可不用实例化对象</li>
</ul>
<p>​                            <strong>静态方法中，只能调用静态方法和静态变量</strong></p>
<ul>
<li>不能使用this关键字，this随着对象的创建而创建，而static是优先于对象存在的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> age;  <span class="comment">//静态变量</span></span><br><span class="line">p1.age=<span class="number">12</span>;</span><br></pre></td></tr></table></figure>



<h4 id="3、this"><a href="#3、this" class="headerlink" title="3、this"></a>3、this</h4><ul>
<li>构造方法，对<strong>本类对象</strong>的引用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    <span class="comment">//this关键字表示对当前对象的引用</span></span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>普通方法，指向要引用的对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;使用&quot;</span>+<span class="keyword">this</span>.brand+<span class="keyword">this</span>.type+<span class="string">&quot;的手机玩游戏&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用this() 调用本类的构造方法，<strong>必须位于第一句</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animals</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用构造方法</span></span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>不能使用于静态方法中</li>
</ul>
<h4 id="4、super"><a href="#4、super" class="headerlink" title="4、super"></a>4、super</h4><blockquote>
<p>直接父类的引用，位于方法的第一句</p>
</blockquote>
<ul>
<li>调用本该隐藏的  父类方法  或者  父类成员变量</li>
<li>super() 可调用父类的构造方法 ，<strong>默认调用父类的无参构造方法（调用带参构造则不会默认调用）</strong></li>
<li>多重继承，优先调用<strong>最高父类的</strong>构造方法</li>
</ul>
<h3 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h3><h4 id="1、静态代码块"><a href="#1、静态代码块" class="headerlink" title="1、静态代码块"></a>1、静态代码块</h4><ul>
<li><p>优先于构造代码块，随着类的加载而加载，但<strong>只运行一次</strong></p>
</li>
<li><p>多个静态代码块，顺序执行</p>
</li>
<li><p><strong>只能初始化静态变量</strong></p>
</li>
</ul>
<h4 id="2、构造代码块"><a href="#2、构造代码块" class="headerlink" title="2、构造代码块"></a>2、构造代码块</h4><p>优先于构造方法，可将多个构造方法的相同属性结合在一起</p>
<h4 id="3、局部代码块"><a href="#3、局部代码块" class="headerlink" title="3、局部代码块"></a>3、局部代码块</h4><p>在方法内，限制变量作用域，提高内存的使用率</p>
<h3 id="三、值传递和引用传递"><a href="#三、值传递和引用传递" class="headerlink" title="三、值传递和引用传递"></a>三、值传递和引用传递</h3><h4 id="1-形参和实参"><a href="#1-形参和实参" class="headerlink" title="1.形参和实参"></a>1.形参和实参</h4><p>实际上是俩个不同的存储单元，形式参数用实际参数的值来初始化自己的存储单元内容</p>
<h4 id="2-值传递"><a href="#2-值传递" class="headerlink" title="2.值传递"></a>2.值传递</h4><p>形参是基本数据类型，传递的是值，而传递后实参的值并不会改变</p>
<h4 id="3-引用传递"><a href="#3-引用传递" class="headerlink" title="3.引用传递"></a>3.引用传递</h4><p>形参是引用数据类型，传递的是对象引用（地址），形参和实参指向同一个地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    age=age+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">    person.age=person.age+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> age=<span class="number">19</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;传递前&quot;</span>+age);</span><br><span class="line">method1(age);</span><br><span class="line">System.out.println(<span class="string">&quot;传递后&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">Person p=<span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p.age);</span><br><span class="line">method2(p);     <span class="comment">//传递的是地址</span></span><br><span class="line">System.out.println(p.age);</span><br></pre></td></tr></table></figure>

<h3 id="四、面向对象"><a href="#四、面向对象" class="headerlink" title="四、面向对象"></a>四、面向对象</h3><blockquote>
<p>面向过程：1、踩离合 2、挂挡 3、开车  （C语言）</p>
<p>面向对象：将多种行为封装，调用使用， 例：class 汽车   class 驾驶员 –&gt;驾驶员开汽车</p>
</blockquote>
<ul>
<li>对象：是具体的事物，对象是类的实例 </li>
<li>类：是对 对象的抽象，对一系列方法的封装</li>
</ul>
<p><strong>变量</strong></p>
<ul>
<li><p>全局变量（成员变量）：可不用初始化有默认值，包括基本数据类型和引用数据类型（数组变量、对象变量，对象数组）</p>
</li>
<li><p>局部变量：方法里面声明</p>
</li>
<li><p>实例变量：指的是类的一个实例，是一个对象。<strong>必须在非静态代码块，声明时或在构造器中指定初始化值</strong></p>
</li>
<li><p><strong>类变量</strong>：静态变量，<strong>必须在静态代码块或声明该类变量指定初始化值</strong></p>
<p>成员变量随着对象的消失而消失，堆空间，在创建对象时有初始值， 局部变量随着方法的调用，栈空间，无初始值必须被赋值</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ss;  <span class="comment">//静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用数据类型</span></span><br><span class="line">String[] a;      <span class="comment">//数组，引用数据类型</span></span><br><span class="line">Student student;  <span class="comment">//对象变量</span></span><br></pre></td></tr></table></figure>

<h4 id="1、成员方法"><a href="#1、成员方法" class="headerlink" title="1、成员方法"></a>1、成员方法</h4><blockquote>
<p>有参方法、无参方法</p>
<p>格式</p>
<p>修饰符  final static 返回值类型 方法名（参数类型）{</p>
<p>​        方法体；            </p>
<p>​        return;</p>
<p>}</p>
<ul>
<li>修饰符：权限的大小范围</li>
<li>返回值：a. void 无返回值  b.基本数据类型 c.引用数据类型 （对象、Integer）</li>
<li>方法名：第二个单词首字母开始大写</li>
<li>参数类型：无参方法隐含this、super关键字</li>
<li>return:<strong>返回值是方法功能的最终结果</strong>，后面不再有代码</li>
</ul>
</blockquote>
<ul>
<li>有参方法,需要传入参数 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String sname)</span></span>&#123;</span><br><span class="line">      System.out.println(sname+<span class="string">&quot;在跑步&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>无参方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(name+<span class="string">&quot;在吃早饭&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li><p><strong>方法不可以嵌套，但可以互相调用</strong></p>
</li>
<li><p>调用形式：直接调用、输出调用、赋值调用、运算调用</p>
</li>
<li><p>重载overload：参数列表不同（<strong>个数、类型、顺序</strong>）</p>
</li>
<li><p>递归：一个方法在方法体内<strong>调用自身</strong>称为递归—&gt;阶乘</p>
</li>
</ul>
<h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><blockquote>
<p><strong>常用来初始化对象值，构造该类的实例instance</strong></p>
<p>在创建对象时，默认成员变量为默认值，实际上是无参构造方法起作用</p>
<p>格式</p>
<p>修饰符  类名（）{  </p>
<p>}</p>
</blockquote>
<ul>
<li><p>通过new关键字实例化，后将变量置为默认值null</p>
</li>
<li><p>构造方法名与类名一致，不能有返回值</p>
</li>
<li><p>系统默认定义一个无参构造，若已有有参构造，则没默认调用</p>
</li>
<li><p>可以被重载</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1=<span class="keyword">new</span> Student();</span><br><span class="line">s1.name=<span class="string">&quot;小明&quot;</span>;</span><br><span class="line">s1.eat();  <span class="comment">//调用无参方法</span></span><br><span class="line">s1.run(<span class="string">&quot;小红&quot;</span>);  <span class="comment">//调用带参方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法,可以被重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    <span class="comment">//this关键字表示对当前对象的引用</span></span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h4><blockquote>
<p>对某一批类的抽象，提高代码的复用性</p>
</blockquote>
<ul>
<li><p>继承父类的所有属性，但不包括父类的构造方法和私有属性（可通过super关键字来调用）</p>
</li>
<li><p>只能实现单继承，不可多继承</p>
</li>
<li><p>继承的子类的修饰符权限应该大于或等于父类的权限修饰符</p>
</li>
</ul>
<h4 id="4、重写"><a href="#4、重写" class="headerlink" title="4、重写"></a>4、重写</h4><p>override子类和父类的方法名相同，但实现的功能不同</p>
<ul>
<li><p>子类的权限修饰符大于或等于父类</p>
</li>
<li><p>重写之后父类方法被隐藏，默认调用子类重写方法</p>
</li>
</ul>
<h4 id="5、封装"><a href="#5、封装" class="headerlink" title="5、封装"></a>5、封装</h4><ul>
<li>用私有封装成员，外界只能通过get、set方法来访问</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String stuName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getStuName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stuName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStuName</span><span class="params">(String stuName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stuName = stuName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>也可通过构造方法来初始化对象属性</li>
</ul>
<h4 id="6、多态"><a href="#6、多态" class="headerlink" title="6、多态"></a>6、多态</h4><blockquote>
<p>polymorphism多态：继承、重写、父类引用指向子类对象</p>
<p>好处是<strong>编译时模糊，运行时确定对象</strong></p>
<ul>
<li>一个引用类型的变量可以引用多种实例以及方法可以被重写</li>
</ul>
</blockquote>
<p><strong>形式</strong></p>
<ul>
<li>父类对象作为形式参数</li>
<li>返回值为父类对象</li>
</ul>
<h5 id="6-1-继承实现多态"><a href="#6-1-继承实现多态" class="headerlink" title="6.1 继承实现多态"></a>6.1 继承实现多态</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vechile</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span></span>;  <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vechile</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小轿车运输&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小轿车的速度&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-2-接口实现多态"><a href="#6-2-接口实现多态" class="headerlink" title="6.2 接口实现多态"></a>6.2 接口实现多态</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getCapacity</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cuboid</span> <span class="keyword">implements</span> <span class="title">Container</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> length;</span><br><span class="line">    <span class="keyword">double</span> width;</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cuboid</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width, <span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">        <span class="keyword">this</span>.width = width;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长方形容积&quot;</span>+length*width*height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-3-向上转型"><a href="#6-3-向上转型" class="headerlink" title="6.3 向上转型"></a>6.3 向上转型</h5><blockquote>
<p>父类引用子类对象，调用子类重写方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">(Vechile vechile)</span></span>&#123;</span><br><span class="line">    System.out.println(name+<span class="string">&quot;在开&quot;</span>);</span><br><span class="line">    vechile.transport();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line">Driver driver=<span class="keyword">new</span> Driver(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">vechile =<span class="keyword">new</span> Car(); <span class="comment">//父类引用指向子类对象</span></span><br><span class="line">driver.drive(vechile); </span><br></pre></td></tr></table></figure>



<h5 id="6-4-向下转型"><a href="#6-4-向下转型" class="headerlink" title="6.4 向下转型"></a>6.4 向下转型</h5><blockquote>
<p>强制转换，父类调用子类特有方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span> <span class="params">(Vechile vechile)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vechile <span class="keyword">instanceof</span> Car)&#123;</span><br><span class="line">        Car car=(Car)vechile;</span><br><span class="line">        car.speed();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(vechile <span class="keyword">instanceof</span> Truck)&#123;</span><br><span class="line">        Truck truck =(Truck)vechile;</span><br><span class="line">        truck.speed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7、抽象类和接口"><a href="#7、抽象类和接口" class="headerlink" title="7、抽象类和接口"></a>7、抽象类和接口</h4><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><ul>
<li>抽象类不能被实例化，只能被继承</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抽象方法只存在于抽象类中，抽象类中的抽象方法只能声明，不能有方法体</li>
</ul>
<p>​        可以定义成员方法（有方法体）</p>
<ul>
<li><p>不能被final修饰</p>
</li>
<li><p>继承抽象类的子类必须实现抽象方法</p>
</li>
</ul>
<h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p><strong>实现接口的抽象方法必须要有实现类继承重写接口的抽象方法，匿名实现接口本质上重写了接口的方法</strong></p>
<p>格式：public interface 接口名{   接口体   }</p>
<ul>
<li><p>包含抽象方法、常量：public static final int a=11;</p>
</li>
<li><p>可实现多接口  extends–implements, 接口继承接口 (extends)</p>
</li>
<li><p>实现类必须实现接口的抽象方法</p>
</li>
<li><p>子类也是抽象类时，子类可不用全部实现父类抽象方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="8、匿名对象"><a href="#8、匿名对象" class="headerlink" title="8、匿名对象"></a>8、匿名对象</h4><blockquote>
<p>就是没有名字的对象，只能使用一次</p>
</blockquote>
<p><strong>用途</strong></p>
<ul>
<li>对象只有一次调用时，可以使用匿名对象进行简化</li>
<li>作为形参传入</li>
</ul>
<h4 id="9、修饰符"><a href="#9、修饰符" class="headerlink" title="9、修饰符"></a>9、修饰符</h4><ul>
<li><p>private：私有权限，只能在本类使用</p>
</li>
<li><p>default：默认修饰符</p>
</li>
<li><p>protected:    protected可以被子类内部直接访问，而不是new一个父类对象来访问</p>
</li>
<li><p>public :可以被同一个项目其他包其他类使用</p>
</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200727162138190.png" alt="image-20200727162138190"></p>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200727162224634.png" alt="image-20200727162224634"></p>
<p><img src="https://csn.damyoung.cn/image-20200727162232107.png" alt="image-20200727162232107"></p>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200727162239189.png" alt="image-20200727162239189"></p>
<p><img src="https://csn.damyoung.cn/image-20200727162244904.png" alt="image-20200727162244904"></p>
<h4 id="10、对象的比较"><a href="#10、对象的比较" class="headerlink" title="10、对象的比较"></a>10、对象的比较</h4><ul>
<li>运算符==： 比较基本数据类型，比较的是值</li>
</ul>
<p>​                               引用数据类型，比较的是地址</p>
<ul>
<li>equals：比较字符串类型，比较的是值是否相等</li>
</ul>
<p>​                         比较引用数据类型，比较的是地址是否相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s2=<span class="keyword">new</span> Student();</span><br><span class="line">Student s3=s2;</span><br><span class="line">System.out.println(s1.equals(s3)); </span><br><span class="line"><span class="comment">//引用类型，equals比较的是地址 false</span></span><br></pre></td></tr></table></figure>



<h3 id="五、对象数组"><a href="#五、对象数组" class="headerlink" title="五、对象数组"></a>五、对象数组</h3><blockquote>
<p>当一个对象需要有多个属性，但属性类型不同，即可用对象数组接收</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Mobile</span><span class="params">(String brand, String type, <span class="keyword">int</span> price, String size, <span class="keyword">int</span> pixel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.pixel = pixel;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//创建一个一维对象数组</span></span><br><span class="line">Mobile[] mobiles=<span class="keyword">new</span> Mobile[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用构造方法 对 对象数组进行初始化</span></span><br><span class="line">mobiles[<span class="number">0</span>]=<span class="keyword">new</span> Mobile(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;is9&quot;</span>,<span class="number">8000</span>,<span class="string">&quot;150*60&quot;</span>,<span class="number">1200</span>);</span><br><span class="line">mobiles[<span class="number">1</span>]=<span class="keyword">new</span> Mobile(<span class="string">&quot;华为&quot;</span>,<span class="string">&quot;note20&quot;</span>,<span class="number">6000</span>,<span class="string">&quot;140*40&quot;</span>,<span class="number">1100</span>);</span><br><span class="line">mobiles[<span class="number">2</span>]=<span class="keyword">new</span> Mobile(<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;note30&quot;</span>,<span class="number">6000</span>,<span class="string">&quot;140*60&quot;</span>,<span class="number">1500</span>);</span><br><span class="line"><span class="comment">//对象数组调用普通方法</span></span><br><span class="line">mobiles[<span class="number">2</span>].playGame();</span><br></pre></td></tr></table></figure>



<h3 id="六、自动垃圾回收"><a href="#六、自动垃圾回收" class="headerlink" title="六、自动垃圾回收"></a>六、自动垃圾回收</h3><p>自动垃圾回收：有效防止内存泄露</p>
<p>​            没有任何引用变量引用一个对象，这个对象就成了垃圾。</p>
<p>​            1、发现无用信息对象 2、回收被无用信息占用的内存空间</p>
<p>​            手动：System.gc();  需要重写Object类的finalize方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A a=<span class="keyword">new</span> A();</span><br><span class="line">a=<span class="keyword">null</span>; <span class="comment">//清空地址，使的对象 无引用变量</span></span><br><span class="line">System.gc();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写Object类的finalize方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;该对象被回收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot</title>
    <url>/2020/11/17/04springboot/</url>
    <content><![CDATA[<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><blockquote>
<p>@RestController  restful风格的API，请求和响应都是json</p>
<p><strong>约定大于配置，自动装配</strong></p>
</blockquote>
<p>简化Spring应用开发的一个框架，J2EE开发一站式解决方案</p>
<p>springboot大部分jar包的版本号已经被父模板定义好。</p>
<h2 id="SpringBoot主程序类"><a href="#SpringBoot主程序类" class="headerlink" title="SpringBoot主程序类"></a><strong>SpringBoot主程序类</strong></h2><blockquote>
<p>Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201220224527897.png" alt="image-20201220224527897"></p>
<h2 id="Spring-Boot-Maven-plugin"><a href="#Spring-Boot-Maven-plugin" class="headerlink" title="Spring Boot Maven plugin"></a><strong>Spring Boot Maven plugin</strong></h2><blockquote>
<p>能够将Spring Boot应用打包为可执行的jar或war文件，然后以通常的方式运行Spring Boot应用</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201220224755225.png" alt="image-20201220224755225" style="zoom:80%;" />

<h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a><strong>启动器</strong></h2><blockquote>
<p>spring-boot-starter：spring-boot<strong>场景启动器</strong>；</p>
</blockquote>
<p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>@SpringBootApplication</strong>：Spring Boot的配置类，标注在某个类上，表示这个一个SpringBoot配置类</p>
<p><strong>@Configuration</strong>：配置类上标注这个注解，配置类也是容器上的一个组件</p>
<p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；以前我们需要配置的东西，Spring Boot帮我们自动配置；</p>
<p>post增加 get查询 delete删除 put 修改</p>
<img src="https://csn.damyoung.cn/image-20201118113224374.png" alt="image-20201118113224374" style="zoom:80%;" />

<a id="more"></a>

<h1 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h1><blockquote>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好</p>
</blockquote>
<p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<h2 id="YAML语法"><a href="#YAML语法" class="headerlink" title="YAML语法"></a>YAML语法</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/spring1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">86795462m</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p>k:(空格)v：表示一对键值对（空格必须有）；</p>
<p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>字符串默认不用加上单引号或者双引号</p>
<ul>
<li>“”：双引号；<strong>不会转义</strong>字符串里面的特殊字符；特殊字符会作为本身想表示的意思</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span>   <span class="string">&quot;zhangsan \n lisi&quot;</span></span><br><span class="line">	<span class="string">//输出；zhangsan</span> <span class="string">换行</span>  <span class="string">lisi</span></span><br></pre></td></tr></table></figure>

<ul>
<li>‘’：单引号；<strong>会转义</strong>特殊字符，特殊字符最终只是一个普通的字符串数据</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span>   <span class="string">‘zhangsan</span> <span class="string">\n</span> <span class="string">lisi’</span></span><br><span class="line">	<span class="string">//输出；zhangsan</span> <span class="string">\n</span>  <span class="string">lisi</span></span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>k: v：在下一行来写对象的属性和值的关系；注意缩进，对象还是k: v的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">	<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> &#123;<span class="attr">lastName:</span> <span class="string">zhangsan</span>,<span class="attr">age:</span> <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>用- 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>

<h3 id="属性文件配置"><a href="#属性文件配置" class="headerlink" title="属性文件配置"></a>属性文件配置</h3><p>导入配置文件处理器，编写配置就有提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">seehope:</span></span><br><span class="line">    <span class="attr">qq:</span></span><br><span class="line">      <span class="attr">appid:</span> <span class="string">hello</span></span><br><span class="line">      <span class="attr">appsecret:</span> <span class="string">seehope;</span></span><br></pre></td></tr></table></figure>

<p>JavaBean</p>
<blockquote>
<ul>
<li>将配置文件中配置的每一个属性的值，映射到这个组件中</li>
<li>@ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</li>
<li>prefix = “person”：配置文件中哪个下面的所有属性进行一一映射</li>
<li>@Compoment只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能；</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;net.seehope&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> QQProperties qq=<span class="keyword">new</span> QQProperties();</span><br><span class="line">	<span class="comment">//get,set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line">    <span class="keyword">private</span> String appsecret;</span><br><span class="line">	<span class="comment">//get,set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>@Value获取值和@ConfigurationProperties获取值比较</p>
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值；</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p>
<p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;net.seehope.qq.appid&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String appid;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;net.seehope.qq.appsecret&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String appsecret;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201118113304037.png" alt="image-20201118113304037"></p>
<h1 id="3、整合"><a href="#3、整合" class="headerlink" title="3、整合"></a>3、整合</h1><h2 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h2><h3 id="简单整合"><a href="#简单整合" class="headerlink" title="简单整合"></a>简单整合</h3><p>1、导入myBatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//mybatis依赖</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//mysql-connector</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//druid连接池</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置数据库</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/spring1</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">86795462m</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis</span>:<span class="string"></span></span><br><span class="line">  <span class="meta">mapper-locations</span>: <span class="string">classpath*:mappers/**/*.xml</span></span><br></pre></td></tr></table></figure>

<p>3、Mapper层</p>
<ul>
<li>在主配置类注解(包扫描)</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201221121351142.png" alt="image-20201221121351142"></p>
<ul>
<li>在mapper层接口</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201221121330308.png" alt="image-20201221121330308"></p>
<p>4、接口权限名的配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mapper.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.demo.dm.mapper.AccountMapper&quot;</span>&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>5、在配置文件配置mapper.xml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mappers/**/*.xml</span></span><br></pre></td></tr></table></figure>

<p>  6、Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Controller层    </span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a><strong>逆向工程</strong></h3><p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//通用mapper</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//mybatis.mapper</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/tk.mybatis/mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//mybatis jar包</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//数据库连接jar</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将工程置于同一工作空间，更改配置</li>
<li>运行MybatisGenerator.java</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201111172158874.png" alt="image-20201111172158874" style="zoom:67%;" />

<img src="https://csn.damyoung.cn/image-20201111172213995.png" alt="image-20201111172213995" style="zoom:67%;" />

<img src="https://csn.damyoung.cn/image-20201111172307139.png" alt="image-20201111172307139" style="zoom:67%;" />

<img src="https://csn.damyoung.cn/image-20201111172316572.png" alt="image-20201111172316572" style="zoom: 67%;" />

<ul>
<li>主工程依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//提供扫描</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201111172619028.png" alt="image-20201111172619028" style="zoom:67%;" />

<h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><blockquote>
<p>当需要进行分页的MyBatis方法前调用PageHelper.startPage静态方法，在方法后的第一个Mybatis查询方法会被进行分页</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//分页组件</span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>PageHelper.startPage(index,count)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">hello5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//分页，获取第二页，内容数为5</span></span><br><span class="line">    PageHelper.startPage(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> userMapper.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h2><blockquote>
<p><strong>Redis的对象需要进行序列化</strong></p>
</blockquote>
<p>说明：在SpringBoot2.x后，原来使用的jedis被替换成lettuce</p>
<p>jedis: 采用的直连，多个线程操作的话，是不安全，避免不安全，使用jedis pool ,更像是BIO模式</p>
<p>lettuce: 采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况，可以减少线程数据，更像是NIO模式</p>
<blockquote>
<p>Springboot自动在容器内帮我们生成了一个RedisTemplate和一个StringRedisTemplate,我们在项目内直接可以引入使用。</p>
<p>这个RedisTemplate的泛型是&lt;Object,Object&gt;我们用起来不是很方便，要各种转换类型，我们需要新建一个泛型&lt;String,Object&gt;的RedisTemplate</p>
</blockquote>
<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RedisAutoConfiguration类</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span> <span class="comment">//可以自定义一个redisTemplate来覆盖原来的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="comment">//默认RedisTemplate没有过多的配置，redis对象都是需要序列化</span></span><br><span class="line">    RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//String是redis最常使用的类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">    template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">    <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    redis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      对象池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis配置</span></span><br><span class="line"><span class="string">spring.redis.host=42.192.130.130</span></span><br><span class="line"><span class="string">spring.redis.password=123456</span></span><br><span class="line"><span class="string">spring.redis.port=6379</span></span><br><span class="line"><span class="comment">#spring.redis.password=root #根据需要</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="string">spring.redis.timeout=10000</span></span><br><span class="line"><span class="comment"># Redis默认情况下有16个分片，这里配置具体使用的分片，默认是0</span></span><br><span class="line"><span class="string">spring.redis.database=0</span></span><br><span class="line"><span class="comment"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-active=8</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-wait=-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接 默认 8</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.max-idle=8</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接 默认 0</span></span><br><span class="line"><span class="string">spring.redis.lettuce.pool.min-idle=0</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//固定模板</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置RedisTemplate&lt;String,Object&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//序列化配置</span></span><br><span class="line">        <span class="comment">//json对象序列化</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt;redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;myKey&quot;</span>,<span class="string">&quot;myValue&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;myKey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="整合SpringData-JPA"><a href="#整合SpringData-JPA" class="headerlink" title="整合SpringData JPA"></a>整合SpringData JPA</h2><blockquote>
<p>Java persistence API</p>
<p>为了简化构建基于 Spring 框架应用的<strong>数据访问技术</strong>，包括非关系数据库、 Map-Reduce 框架、云数据服务等等；</p>
<p>另外也包含对关系型数据库的访问支持</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20180306105412.png" alt="搜狗截图20180306105412"></p>
<p>编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类(和数据表映射的类)</span></span><br><span class="line"><span class="meta">@Table(name = &quot;tb1_teacher&quot;)</span> <span class="comment">//@Table来指定和那个数据表对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;last_name&quot;,length = 50)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基本的配置JpaProperties</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>  </span><br><span class="line"> <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h1><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a><strong>自定义注解</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.METHOD, ElementType.FIELD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = UsernameIsExistsProcessor.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UsernameIsExistsAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;</span>&#123;com.example.validator.annotation.UsernameIsExistsAnnotation.message&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernameIsExistsProcessor</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">UsernameIsExistsAnnotation</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(UsernameIsExistsAnnotation usernameIsExistsAnnotation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object o, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername((String) o);</span><br><span class="line">        System.out.println(constraintValidatorContext.getDefaultConstraintMessageTemplate());</span><br><span class="line">        <span class="keyword">return</span> userMapper.select(user).size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/&#123;id:\\d+&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">updateById</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserBo userBo,<span class="meta">@PathVariable</span> String id)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    BeanUtils.copyProperties(user,userBo);</span><br><span class="line">    <span class="keyword">return</span> JsonResult.isOk(userServiceImp.updateUserById(user));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(&quot;用户名不能为空,&quot;)</span></span><br><span class="line"><span class="meta">@Length(min = 2,max = 20,message = &quot;不能为空&quot;)</span></span><br><span class="line"><span class="meta">@UsernameIsExistsAnnotation(message = &quot;用户名不能重复&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br></pre></td></tr></table></figure>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><strong>异常处理</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonResult <span class="title">handleRequestMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        List&lt;ObjectError&gt; allErrors = e.getBindingResult().getAllErrors();</span><br><span class="line">        allErrors.forEach(error-&gt;&#123;</span><br><span class="line">            FieldError fieldError = (FieldError) error;</span><br><span class="line">            map.put(fieldError.getField(),fieldError.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResult.isErrReqParm(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="切面"><a href="#切面" class="headerlink" title="切面"></a><strong>切面</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(TimeAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePointCut</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;timePointCut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;TimeAspect start&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        Object proceed = pjp.proceed();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">&quot;TimeAspect end&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;TimeAspect cost &#123;&#125; millSec&quot;</span>,end-start);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a><strong>拦截器</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log= LoggerFactory.getLogger(TimeInterceptor.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;TimeInterceptor start&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">&quot;start&quot;</span>,start);</span><br><span class="line">        <span class="comment">//true后面才会执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start= (<span class="keyword">long</span>) httpServletRequest.getAttribute(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">&quot;TimeInterceptor end&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;TimeInterceptor cost&#123;&#125; millSec&quot;</span>,end-start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> TimeInterceptor());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a><strong>过滤器</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log=LoggerFactory.getLogger(TimeFilter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;time filter start &quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        <span class="keyword">long</span> end=System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">&quot;time filter end&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;time filter cost &#123;&#125; millSec &quot;</span>,end-start);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line"></span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> TimeFilter());</span><br><span class="line">    ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    arrayList.add(<span class="string">&quot;/user&quot;</span>);</span><br><span class="line">    filterRegistrationBean.setUrlPatterns(arrayList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5、任务"><a href="#5、任务" class="headerlink" title="5、任务"></a>5、任务</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><ul>
<li>在Service 中注解异步方法 <code>@Async</code></li>
<li>主配置类中开启 <code>@EnableAsync</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JsonResult <span class="title">asyncTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">   log.info(<span class="string">&quot;------ main start ------&quot;</span>);</span><br><span class="line">   </span><br><span class="line">   Future&lt;Boolean&gt; result1 = asyncService.task1();</span><br><span class="line">   Future&lt;Boolean&gt; result2 = asyncService.task2();</span><br><span class="line">   Future&lt;Boolean&gt; result3 = asyncService.task3();</span><br><span class="line">   <span class="keyword">while</span> (!result1.isDone() || !result2.isDone() || !result3.isDone()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (result1.isDone() &amp;&amp; result2.isDone() &amp;&amp; result3.isDone()) &#123;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">   log.info(<span class="string">&quot;------ main end cost &#123;&#125; millSec ------&quot;</span>, end - start);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> JsonResult.isOk(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Async</span> <span class="comment">//告诉Spring这是个异步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;Boolean&gt; <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">   log.info(<span class="string">&quot;------ task 1 start ------&quot;</span>);</span><br><span class="line">   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">   <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">   log.info(<span class="string">&quot;------ task 1 end cost &#123;&#125; millSec ------&quot;</span>, end - start);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;Boolean&gt;(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        邮件发送--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201221172120335.png" alt="image-20201221172120335"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">spring.mail.username=1711938964@qq.com</span></span><br><span class="line"><span class="string">spring.mail.password=ghiecrusomoacjdb</span></span><br><span class="line"><span class="string">spring.mail.host=smtp.qq.com</span></span><br><span class="line"><span class="comment">#开启加密授权验证</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.auth=true</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.starttls.enable=true</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.starttls.required=true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot2ApplicationTests.class)</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot2ApplicationTests</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> JavaMailSenderImpl sender;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		SimpleMailMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">		simpleMailMessage.setSubject(<span class="string">&quot;标题&quot;</span>);</span><br><span class="line">		simpleMailMessage.setText(<span class="string">&quot;谢谢你&quot;</span>);</span><br><span class="line">		simpleMailMessage.setFrom(<span class="string">&quot;1711938964@qq.com&quot;</span>);</span><br><span class="line">		simpleMailMessage.setTo(<span class="string">&quot;1711938964@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">		sender.send(simpleMailMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//开启定时任务功能 </span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cron表达式，秒 分 时  日 月 week</span></span><br><span class="line"><span class="comment">//代表每分钟 4-40执行</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;4-40 * * * * ？&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 每隔俩秒</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Scheduled(fixedRate = 1000)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;--- hello ----&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6、SpringBoot-Actuator"><a href="#6、SpringBoot-Actuator" class="headerlink" title="6、SpringBoot Actuator"></a>6、SpringBoot Actuator</h1><blockquote>
<p>程序监控器</p>
<p>Springboot Actuator可以监控和管理springboot应用，比如健康检查、审计、统计、Http追踪</p>
</blockquote>
<p>Actuator同时还可以与<strong>外部应用监控系统</strong>整合，比如 <code>Prometheus</code>,<code>Graphite</code>,<code>DataDog</code>,<code>Influx</code>，这些系统提供了非常好的仪表盘、图标、分析和告警等功能，使得可以通过统一的接口轻松监控和管理应用</p>
<p>Actuator使用<code>Micrometer</code>来整合外部应用监控系统</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>创建Springboot项目</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line"><span class="comment"># 默认只暴露health,info端点 用 &quot;*&quot; 可以包含暴露全部endpoint</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment"># 其他endpoints都是打开的,除了 shutdown 端点</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line"><span class="comment"># 获得健康检查中所有指标的详细信息</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<h3 id="启动项目访问web"><a href="#启动项目访问web" class="headerlink" title="启动项目访问web"></a>启动项目访问web</h3><blockquote>
<p><a href="http://localhost:8001/actuator/">http://localhost:8001/actuator/</a></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210126192620148.png" alt="image-20210126192620148"></p>
<h2 id="监控创建"><a href="#监控创建" class="headerlink" title="监控创建"></a>监控创建</h2><p>Actuator用了 <code>endpoint</code>来暴露HTTP或者JWT来监控和管理应用，这些 <code>endpoints</code>也需要通过HTTP或者JMX暴露出来，使得它们能被远程进入</p>
<p>打开 <a href="http://localhost:8081/actuator/health">http://localhost:8081/actuator/health</a> 来访问</p>
<p>状态将是<code>up</code> 应用是健康，应用不健康会显示 <code>down</code></p>
<h3 id="endpoints"><a href="#endpoints" class="headerlink" title="endpoints"></a>endpoints</h3><table>
<thead>
<tr>
<th align="left">ID</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>auditevents</code></td>
<td align="left">公开当前应用程序的审核事件信息。需要一个<code>AuditEventRepository</code>豆。</td>
</tr>
<tr>
<td align="left"><code>beans</code></td>
<td align="left">显示应用程序中所有Spring Bean的完整列表。</td>
</tr>
<tr>
<td align="left"><code>caches</code></td>
<td align="left">公开可用的缓存。</td>
</tr>
<tr>
<td align="left"><code>conditions</code></td>
<td align="left">显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。</td>
</tr>
<tr>
<td align="left"><code>configprops</code></td>
<td align="left">显示所有的整理列表<code>@ConfigurationProperties</code>。</td>
</tr>
<tr>
<td align="left"><code>env</code></td>
<td align="left">公开Spring的属性<code>ConfigurableEnvironment</code>。</td>
</tr>
<tr>
<td align="left"><code>flyway</code></td>
<td align="left">显示所有已应用的Flyway数据库迁移。需要一个或多个<code>Flyway</code>豆。</td>
</tr>
<tr>
<td align="left"><code>health</code></td>
<td align="left">显示应用程序运行状况信息。</td>
</tr>
<tr>
<td align="left"><code>httptrace</code></td>
<td align="left">显示HTTP跟踪信息（默认情况下，最近100个HTTP请求-响应交换）。需要一个<code>HttpTraceRepository</code>豆。</td>
</tr>
<tr>
<td align="left"><code>info</code></td>
<td align="left">显示任意应用程序信息。</td>
</tr>
<tr>
<td align="left"><code>integrationgraph</code></td>
<td align="left">显示Spring Integration图。需要对的依赖<code>spring-integration-core</code>。</td>
</tr>
<tr>
<td align="left"><code>loggers</code></td>
<td align="left">显示和修改应用程序中记录器的配置。</td>
</tr>
<tr>
<td align="left"><code>liquibase</code></td>
<td align="left">显示已应用的所有Liquibase数据库迁移。需要一个或多个<code>Liquibase</code>豆。</td>
</tr>
<tr>
<td align="left"><code>metrics</code></td>
<td align="left">显示当前应用程序的“指标”信息。</td>
</tr>
<tr>
<td align="left"><code>mappings</code></td>
<td align="left">显示所有<code>@RequestMapping</code>路径的整理列表。</td>
</tr>
<tr>
<td align="left"><code>scheduledtasks</code></td>
<td align="left">显示应用程序中的计划任务。</td>
</tr>
<tr>
<td align="left"><code>sessions</code></td>
<td align="left">允许从Spring Session支持的会话存储中检索和删除用户会话。需要使用Spring Session的基于Servlet的Web应用程序。</td>
</tr>
<tr>
<td align="left"><code>shutdown</code></td>
<td align="left">使应用程序正常关闭。默认禁用。</td>
</tr>
<tr>
<td align="left"><code>startup</code></td>
<td align="left">显示由收集的启动步骤数据<code>ApplicationStartup</code>。需要使用<code>SpringApplication</code>进行配置<code>BufferingApplicationStartup</code>。</td>
</tr>
<tr>
<td align="left"><code>threaddump</code></td>
<td align="left">执行线程转储。</td>
</tr>
</tbody></table>
<h3 id="打开和关闭Actuator-Endpoints"><a href="#打开和关闭Actuator-Endpoints" class="headerlink" title="打开和关闭Actuator Endpoints"></a>打开和关闭Actuator Endpoints</h3><p>默认上述所有的endpoints都是打开的，除了<code>shutdown</code> endpoint</p>
<p>通过设置<code>management.endpoint.&lt;id&gt;.enabled to true or false</code>(<code>id</code>是endpoint的id)来决定打开还是关闭一个actuator endpoint。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h3 id="暴露Actuator-Endpoints"><a href="#暴露Actuator-Endpoints" class="headerlink" title="暴露Actuator Endpoints"></a>暴露Actuator Endpoints</h3><p>通过HTTP暴露的只有<code>health</code>和<code>info</code>。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>= <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#management.endpoints.web.exposure.include= health,info</span></span><br></pre></td></tr></table></figure>

<h3 id="显示详细的健康信息"><a href="#显示详细的健康信息" class="headerlink" title="显示详细的健康信息"></a>显示详细的健康信息</h3><p><code>health</code> endpoint只展示了简单的<code>UP</code>和<code>DOWN</code>状态。为了获得健康检查中所有指标的详细信息，</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">management.endpoint.health.show-details</span>=<span class="string">always</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类</title>
    <url>/2020/11/11/06%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="一、String-类"><a href="#一、String-类" class="headerlink" title="一、String 类"></a>一、String 类</h3><blockquote>
<p>字符串连接”ad”+ab–&gt;adab(<strong>字符串拼接会在堆中new出一个对象</strong>)    </p>
</blockquote>
<h4 id="1、创建方法"><a href="#1、创建方法" class="headerlink" title="1、创建方法"></a>1、创建方法</h4><h5 id="直接赋值法"><a href="#直接赋值法" class="headerlink" title="直接赋值法"></a>直接赋值法</h5><blockquote>
<p>通过这种方式创建的String对象s，指向了一个常量池中的字符串“sss”</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s&#x3D;new String(&quot;ss&quot;); &#x2F;&#x2F;创建俩个对象</span><br></pre></td></tr></table></figure>

<h5 id="new"><a href="#new" class="headerlink" title="new"></a>new</h5><blockquote>
<p>是经过 <strong>new</strong>创建出来的对象，都会在堆内存中分配新的空间，创建新的对象，所以s是String类新创建的对象。但是也并发开辟空间</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s&#x3D;&quot;sss&quot;;            &#x2F;&#x2F;创建一个对象</span><br></pre></td></tr></table></figure>



<blockquote>
<p>String s1=””; 字符串内容为空</p>
<p>String s2=null; 字符串对象为空</p>
</blockquote>
<h4 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h4><blockquote>
<p>new String(String str);将字符串转化为字符对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="keyword">new</span> String();</span><br><span class="line">String s2=<span class="keyword">new</span> String(<span class="string">&quot;s&quot;</span>);  <span class="comment">//将字符串常量转化为字符串对象</span></span><br></pre></td></tr></table></figure>



<h4 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4><h5 id="1、字符串判断"><a href="#1、字符串判断" class="headerlink" title="1、字符串判断"></a>1、字符串判断</h5><p>equals()</p>
<p>equalsIgnoreCase() 忽略字符串大小写</p>
<p>contains(String str)对象是否出现在字符串中</p>
<p>isEmpty(String str) 判断是否为空</p>
<p>startsWith(String str)</p>
<p>endWith(String str)</p>
<p>str.compareTo(str1)  返回字符比较 “abc”与”bbc”–&gt;-1</p>
<h5 id="2、-字符串功能"><a href="#2、-字符串功能" class="headerlink" title="2、 字符串功能"></a>2、 字符串功能</h5><p>length() 字符串长度</p>
<p>charAt(int index)  获取指定位置的字符</p>
<p><strong>toCharArray() 将字符串转化为字符数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String  str=<span class="string">&quot;哈哈122abc&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">    <span class="keyword">char</span> c=str.charAt(i);</span><br><span class="line">    <span class="keyword">if</span>(c&gt;<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​       indexOf(char c):第一次出现的索引，否则返回-1</p>
<p>​       lastIndexOf(char c):最后一次出现的索引</p>
<p>​       <strong>spilt(“，”) :字符串拆分为字符串数组</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String poem=<span class="string">&quot;长亭外，古道边，芳草碧连天，晚风拂晓笛声残，夕阳山外山&quot;</span>;</span><br><span class="line">String[] poems=poem.split(<span class="string">&quot;，&quot;</span>);</span><br><span class="line">System.out.println(poems.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;poems.length;i++)&#123;</span><br><span class="line">    System.out.println(poems[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、字符串截取代替"><a href="#3、字符串截取代替" class="headerlink" title="3、字符串截取代替"></a>3、字符串截取代替</h5><p>​        substring(int beginIndex ,int lastIndex): 字符串截取</p>
<p>​        replace():代替</p>
<p>​        trim():消除空格</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字符串截取</span></span><br><span class="line">String ss1=<span class="string">&quot;HelloWorld&quot;</span>;</span><br><span class="line">System.out.println(ss1.substring(<span class="number">4</span>));</span><br><span class="line">System.out.println(ss1.substring(<span class="number">5</span>,<span class="number">9</span>));</span><br><span class="line"><span class="comment">//字符串替代</span></span><br><span class="line">System.out.println(ss1.replace(<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;s&#x27;</span>));</span><br><span class="line">System.out.println(ss1.replaceAll(<span class="string">&quot;He&quot;</span>,<span class="string">&quot;ss&quot;</span>));</span><br><span class="line"><span class="comment">//trim() 消除空格</span></span><br><span class="line">String ss2=<span class="string">&quot;   hello   &quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;/&quot;</span>+ss2+<span class="string">&quot;/&quot;</span>);</span><br><span class="line">System.out.println(ss2.trim());</span><br></pre></td></tr></table></figure>

<p>valueOf:将其他类型数值转化为字符串类型</p>
<p><strong>getBytes():将字符串编码为byte序列，存储在byte数组中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将其他类型的数值x转换为String类型</span></span><br><span class="line">String a1=String.valueOf(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">System.out.println(a1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串编码为byte序列，存储在byte数组中</span></span><br><span class="line">String sss1=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">byt0000000000000000000000000000000000000000000000e[] b1=sss1.getBytes();</span><br><span class="line">System.out.println(b1[<span class="number">0</span>]);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)b1[<span class="number">0</span>]);</span><br><span class="line">String sss2=<span class="string">&quot;你好世界&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b2=sss1.getBytes();</span><br><span class="line">System.out.println(b2[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//转化为不同的字符集</span></span><br><span class="line"><span class="keyword">byte</span>[] b3=sss2.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(b3[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h3 id="二、StringBuffe"><a href="#二、StringBuffe" class="headerlink" title="二、StringBuffe"></a>二、StringBuffe</h3><blockquote>
<p>​        StringBuffer: 线程安全、效率低的<strong>可变字符序列</strong></p>
<p>​        StringBuilder:线程不安全，效率高的可变字符序列</p>
<p>​        String 长度固定，多次使用产生多个副本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(str.length() + <span class="number">16</span>);</span><br><span class="line">    append(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//StringBuffer无参构造序列</span></span><br><span class="line">StringBuffer sb=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">System.out.println(sb.capacity());  <span class="comment">//初始容量16</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb1=<span class="keyword">new</span> StringBuffer(<span class="number">50</span>);  <span class="comment">//创建字符串缓冲区50</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2=<span class="keyword">new</span> StringBuffer(<span class="string">&quot;hELLP&quot;</span>);</span><br><span class="line">System.out.println(sb2.capacity()); <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//append()追加 可一次性链式编程</span></span><br><span class="line">System.out.println(sb2.append(<span class="string">&quot;gg&quot;</span>));</span><br><span class="line"><span class="comment">//insert()插入</span></span><br><span class="line">System.out.println(sb2.insert(<span class="number">1</span>,<span class="string">&quot;光&quot;</span>));</span><br><span class="line"><span class="comment">//reverse()反转</span></span><br><span class="line">System.out.println(sb2.reverse());</span><br><span class="line"><span class="comment">//replace()替换</span></span><br><span class="line">System.out.println(sb2.replace(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;k&quot;</span>));</span><br><span class="line"><span class="comment">//delete()删除</span></span><br><span class="line">System.out.println(sb2.delete(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="comment">//toString默认调用，将StringBuffer转化为String</span></span><br><span class="line">System.out.println(sb2.toString());</span><br></pre></td></tr></table></figure>



<h3 id="三、正则表达式"><a href="#三、正则表达式" class="headerlink" title="三、正则表达式"></a>三、正则表达式</h3><blockquote>
<p><strong>用来检索、替换那些符合某个模式(规则)的文本。</strong></p>
</blockquote>
<blockquote>
<p>格式：[0-9]{0,9}出现 0-9的数字 0-9次</p>
</blockquote>
<ul>
<li><p>[ab]   a和b选择      [a-zA-Z]==[a-Z]  </p>
</li>
<li><p> [ ^abc ] 除了abc以外</p>
</li>
<li><p>元字符</p>
<ul>
<li>\d包含0-9，</li>
<li>\w包含a-Z,_,0-9</li>
<li>\s表示任何空白字符（\r,\f,\t）</li>
<li>   . 任何字符</li>
<li>\D 除了\d以外的所有</li>
</ul>
</li>
<li><p>+*？</p>
<ul>
<li>\d+:至少一个 </li>
<li>\d*：任意一个 </li>
<li> \d？：0或1个</li>
</ul>
</li>
<li><p>逻辑</p>
<ul>
<li>|：表示或者，01|001|1 </li>
<li>&amp;:表示且</li>
</ul>
</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200729201334450.png" alt="image-20200729201334450"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> \\d+:至少一个 ，\\d*：任意一个 ， \\d？：<span class="number">0</span>或<span class="number">1</span>个  </span><br><span class="line">     </span><br><span class="line">String regex=<span class="string">&quot;[0-9][0-9][0-9][0-9][0-9][0-9]&quot;</span>;</span><br><span class="line">String regex=<span class="string">&quot;\\d\\d\\d\\d\\d\\d&quot;</span>;</span><br><span class="line">String regex=<span class="string">&quot;\\d&#123;6&#125;&quot;</span>; </span><br><span class="line"></span><br><span class="line">String regex=<span class="string">&quot;\\d&#123;3,6&#125;&quot;</span>;  </span><br><span class="line">String regex=<span class="string">&quot;\\d&#123;3,&#125;&quot;</span>;   </span><br><span class="line"> </span><br><span class="line">String str3=<span class="string">&quot;www.baidu6.com&quot;</span>;</span><br><span class="line">String regex4=<span class="string">&quot;www\\.\\w&#123;6&#125;\\.com&quot;</span>;</span><br><span class="line">System.out.println(str3.matches(regex4));</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b=postcode.matches(regex);</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200729201941398.png" alt="image-20200729201941398"></p>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200729201949365.png" alt="image-20200729201949365"></p>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200729201956335.png" alt="image-20200729201956335"></p>
<p>1、验证:通过字符串matches(regex)方法进行验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b=postcode.matches(regex);</span><br></pre></td></tr></table></figure>

<p>2、分割：通过字符串split(regex)方法进行分隔</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] poems=poem.split(<span class="string">&quot;\\w+&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>3、替换 String类的replaceAll(regex,”A”)方法这</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">s2.replaceAll(regex6,<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>

<p>4、分组：（.）\1+(..)\2（重复3次及以上要加上+）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String regex7=<span class="string">&quot;(\\d+)([a-z]&#123;3&#125;)\\1&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>​    去同:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ss1=s.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>,<span class="string">&quot;$1&quot;</span>);</span><br><span class="line">String regex10=<span class="string">&quot;(..)\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;恭喜恭喜&quot;</span>.matches(regex10));</span><br><span class="line">String regex11=<span class="string">&quot;(.)\\1+(.)\\2(.)\\3(..)\\4+&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;开开开心心年年开心开心开心&quot;</span>.matches(regex11));</span><br></pre></td></tr></table></figure>

<p>5、获取 Pattern p=pattern.compile(regex)获取正则表达式</p>
<p>​               Mather m=p.matcher(s) 获取匹配器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern p=Pattern.compile(regex12); <span class="comment">//获取正则表达式</span></span><br><span class="line">Matcher m=p.matcher(str1);  <span class="comment">//获取匹配器</span></span><br><span class="line"><span class="keyword">while</span> (m.find())&#123;</span><br><span class="line">    System.out.println(m.group());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> b=m.matches();</span><br></pre></td></tr></table></figure>



<h3 id="四、包装类"><a href="#四、包装类" class="headerlink" title="四、包装类"></a>四、包装类</h3><p>包装类：Integer Character Double 引用类型              </p>
<p>装箱：基本类型–&gt;引用类型</p>
<p>拆箱：引用类型–&gt;基本类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">Integer i=<span class="keyword">new</span> Integer(<span class="number">5</span>);</span><br><span class="line">Integer i1=<span class="keyword">new</span> Integer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">Integer i1=Integer.valueOf(<span class="number">5</span>);        <span class="comment">//装箱</span></span><br><span class="line"><span class="keyword">int</span> i3=i1.intValue()                  <span class="comment">//拆箱</span></span><br><span class="line">    </span><br><span class="line">nteger i=<span class="number">5</span>; <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> i1=i;	<span class="comment">//自动拆箱</span></span><br><span class="line"><span class="keyword">int</span> i2=i+<span class="number">100</span>;</span><br><span class="line">System.out.println(i2);     <span class="comment">//105</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int--&gt;String</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+num);<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line">String s=String.valueOf(num);</span><br><span class="line">System.out.println(s);      <span class="comment">//调用string类的valueOf()</span></span><br><span class="line"></span><br><span class="line">Integer i2=<span class="keyword">new</span> Integer(num);              <span class="comment">// Integer构造器</span></span><br><span class="line">System.out.println(i2.toString());      <span class="comment">//int--&gt;integer--&gt;String</span></span><br><span class="line"></span><br><span class="line">System.out.println(Integer.toString(num)); <span class="comment">//Integer的toString()方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String--&gt;int</span></span><br><span class="line">String str=<span class="string">&quot;100&quot;</span>;</span><br><span class="line">System.out.println(Integer.parseInt(str));  <span class="comment">//调用Integer的parseInt()方法</span></span><br><span class="line"></span><br><span class="line">Integer i3=<span class="keyword">new</span> Integer(str);</span><br><span class="line">System.out.println(i3.intValue()); <span class="comment">//String--&gt;integer--&gt;int</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20200729202311075.png" alt="image-20200729202311075"></p>
<p><img src="https://csn.damyoung.cn/image-20200729202326200.png" alt="image-20200729202326200"></p>
<h3 id="五、内部类"><a href="#五、内部类" class="headerlink" title="五、内部类"></a>五、内部类</h3><blockquote>
<p><strong>任何内部类都可以编译成独立的class文件</strong></p>
</blockquote>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200729202345324.png" alt="image-20200729202345324"></p>
<p><img src="https://csn.damyoung.cn/image-20200729202405293.png" alt="image-20200729202405293"></p>
<p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20200729202414378.png" alt="image-20200729202414378"></p>
<p><img src="https://csn.damyoung.cn/image-20200729202419358.png" alt="image-20200729202419358"></p>
<h4 id="1、成员内部类"><a href="#1、成员内部类" class="headerlink" title="1、成员内部类"></a>1、成员内部类</h4><p>（1）内部类，可以访问外部类所有私有属性和私有方法</p>
<p>（2）外部类方法使用时，需要创建内部类对象</p>
<p>（3）其他类访问：Outer.Inner inner=new Outer().new Inner();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">30</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">40</span>;</span><br><span class="line">        System.out.println(num);    <span class="comment">//局部变量 40</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.num);   <span class="comment">//内部类属性30</span></span><br><span class="line">        System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">//外部类属性,有重名变量时需要这样写</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;内部类第二个方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用成员内部类</span></span><br><span class="line">Outer.Inner inner=<span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">inner.method2();</span><br></pre></td></tr></table></figure>

<h4 id="2、局部内部类"><a href="#2、局部内部类" class="headerlink" title="2、局部内部类"></a>2、局部内部类</h4><p>​    （在方法里面）:方法里面==局部变量，<strong>不能在方法外使用</strong></p>
<p>​    可以共享局部变量，但局部变量必须是final修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner2</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">print1</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;局部内部类&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Inner2 inner2=<span class="keyword">new</span> Inner2();</span><br><span class="line">    inner2.print1();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、静态内部类"><a href="#3、静态内部类" class="headerlink" title="3、静态内部类"></a>3、静态内部类</h4><p> 1、静态内部类可以调用外部类静态方法</p>
<p>  2、其他类调用内部类静态方法:外部类.内部类.静态方法()</p>
<p>​        Outer.Inner inner=new Outer.Inner();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner1</span></span>&#123;</span><br><span class="line">    <span class="comment">//只能调用外部类的静态成员</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、匿名内部类"><a href="#4、匿名内部类" class="headerlink" title="4、匿名内部类"></a>4、匿名内部类</h4><p>​        匿名内部类:使用于 抽象方法和接口</p>
<p>​        接口有多个抽象方法就用有名内部类  Interface interface=new Interface(){}; interface.print();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Niming</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer3</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        Niming aa=<span class="keyword">new</span> Niming()&#123;   <span class="comment">//匿名对象</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">print1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名方法1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">print2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名方法2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        aa.print1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、Random类"><a href="#六、Random类" class="headerlink" title="六、Random类"></a>六、Random类</h3><img src="https://csn.damyoung.cn/image-20200729202441171.png" alt="image-20200729202441171"  />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带参构造</span></span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> a=r.nextInt(<span class="number">10</span>);<span class="comment">//0-10随机数整数，不包含10</span></span><br><span class="line">System.out.println(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">//带参构造</span></span><br><span class="line">Random r1=<span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">Random r2=<span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> a1=r1.nextInt(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> a2=r2.nextInt(<span class="number">10</span>);</span><br><span class="line">System.out.println(a1+<span class="string">&quot;    &quot;</span>+a2);</span><br></pre></td></tr></table></figure>

<h3 id="七、Math类"><a href="#七、Math类" class="headerlink" title="七、Math类"></a>七、Math类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开根</span></span><br><span class="line">Math.sqrt(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//绝对值</span></span><br><span class="line">Math.abs(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//向上取整，向下取整</span></span><br><span class="line">Math.ceil(<span class="number">5.5</span>);</span><br><span class="line">Math.floor(<span class="number">6.5</span>);</span><br><span class="line"><span class="comment">//PI</span></span><br><span class="line">System.out.println(Math.PI);</span><br><span class="line"><span class="comment">//幂次</span></span><br><span class="line">System.out.println(Math.pow(<span class="number">5</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//获取俩数最大值</span></span><br><span class="line">Math.max(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//四舍五入</span></span><br><span class="line">Math.round(<span class="number">5.5</span>);</span><br><span class="line"><span class="comment">//包括0，不包括1.0</span></span><br><span class="line">System.out.println(Math.floor((Math.random()*<span class="number">100</span>)));</span><br></pre></td></tr></table></figure>

<h3 id="八、日期类"><a href="#八、日期类" class="headerlink" title="八、日期类"></a>八、日期类</h3><h4 id="1、Date"><a href="#1、Date" class="headerlink" title="1、Date"></a>1、Date</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><p>（1）无参：获取当前时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date d=<span class="keyword">new</span> Date();</span><br><span class="line">System.out.println(d);	</span><br><span class="line"><span class="comment">//date类重写了toString方法，Thu Jul 30 10:22:54 CST 2020</span></span><br></pre></td></tr></table></figure>

<p>（2）有参：new Date(毫秒数)    //传入毫秒数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date d1=<span class="keyword">new</span> Date(num1);</span><br></pre></td></tr></table></figure>

<h5 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h5><p>toString() 转化为时间格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(d.toString());<span class="comment">//Thu Jul 30 10:22:54 CST 2020</span></span><br><span class="line">System.out.println(d.toLocaleString());  <span class="comment">//2020-7-30 10:22:54</span></span><br></pre></td></tr></table></figure>

<p>getTime() 1970至今的毫秒数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> num=d.getTime();</span><br></pre></td></tr></table></figure>

<p>getYear() 1900年—&gt;+1970    </p>
<p>getMonth()–&gt;+1</p>
<p>setTime() 传入毫秒数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">d2.setTime(num1);</span><br></pre></td></tr></table></figure>

<h4 id="2、DateFormat"><a href="#2、DateFormat" class="headerlink" title="2、DateFormat"></a>2、DateFormat</h4><p>​        <strong>字符串和时间互相转化</strong></p>
<h5 id="2-1-format"><a href="#2-1-format" class="headerlink" title="2.1 format()"></a>2.1 format()</h5><p>​            将date对象转化为String对象（具有规定格式）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat d=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy/MM/dd hh:mm:ss&quot;</span>);</span><br><span class="line"><span class="comment">//时间对象转化规定格式的字符串</span></span><br><span class="line">String s=d.format(date);</span><br></pre></td></tr></table></figure>

<h5 id="2-2-parse"><a href="#2-2-parse" class="headerlink" title="2.2 parse()"></a>2.2 parse()</h5><p>​            将字符串转化为date</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat d1=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">Date date1=d1.parse(s1);</span><br></pre></td></tr></table></figure>

<h4 id="3、Calendar"><a href="#3、Calendar" class="headerlink" title="3、Calendar"></a>3、Calendar</h4><p>​        <strong>抽象类,不能被实例化</strong></p>
<p>​        获取实例对象: Calendar ca=Calendar.getInstance(); </p>
<p>​        get(Calendar.***);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ca.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">ca.get(Calendar.YEAR);</span><br></pre></td></tr></table></figure>

<p>​        add(Calendar.***,-1);</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ca.add(Calendar.YEAR,-<span class="number">1</span>); <span class="comment">//去年的年份</span></span><br></pre></td></tr></table></figure>

<p>​        set( );</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ca.set(<span class="number">2018</span>,<span class="number">7</span>,<span class="number">14</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4、date与calendar互相转化"><a href="#4、date与calendar互相转化" class="headerlink" title="4、date与calendar互相转化"></a>4、date与calendar互相转化</h4><blockquote>
<p>调用calendar的get/set方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> Date();</span><br><span class="line">Calendar ca=Calendar.getInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//date--&gt;calendar</span></span><br><span class="line">ca.setTime(date);</span><br><span class="line">System.out.println(ca.get(Calendar.YEAR));</span><br><span class="line"></span><br><span class="line"><span class="comment">//calendar--&gt;date</span></span><br><span class="line">Date date1=ca.getTime();</span><br><span class="line">System.out.println(date1.toLocaleString());</span><br></pre></td></tr></table></figure>

<h3 id="九、Object"><a href="#九、Object" class="headerlink" title="九、Object"></a>九、Object</h3><p>所有类的父类，故Object类可以接收全部类的对象（数组和接口也行），因为可以向上转型</p>
<p>hashCode()地址、getClass()返回类名（class类中getName方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getClass方法</span></span><br><span class="line">String s=s1.getClass().getName();</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>

<p>toString():类名+@+hashcode十六进制码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//toString方法</span></span><br><span class="line">System.out.println(s1.toString());</span><br><span class="line">System.out.println(s1);     <span class="comment">//默认调用toString方法</span></span><br><span class="line">System.out.println(Integer.toHexString(s1.hashCode())); <span class="comment">//将hashcode地址值转化为十六进制</span></span><br></pre></td></tr></table></figure>

<p>equals()比较地址</p>
<p>//<strong>重写了hashcode、equals方法</strong>，使返回值和属性挂钩</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//equals() 比较引用类型是地址，字符串是值</span></span><br><span class="line"><span class="comment">//String类重写了equals方法，equals比较的是内容</span></span><br><span class="line">MyObject m1=<span class="keyword">new</span> MyObject();</span><br><span class="line">MyObject m2=<span class="keyword">new</span> MyObject();</span><br><span class="line">MyObject m3=m1;</span><br><span class="line">System.out.println(m1.equals(m2));  <span class="comment">//false</span></span><br><span class="line">System.out.println(m1.equals(m3));  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="十、System"><a href="#十、System" class="headerlink" title="十、System"></a>十、System</h3><p>包含一些有用的类字段和方法，不能被实例化</p>
<p>System.gc():运行垃圾回收(通知作用)</p>
<p>System.exit():终止当前正在运行的jvm。写0表示自动退出，写其他意外退出</p>
<p>System.currentTimeMills():获取当前时间的毫秒值</p>
<p>arraycopy():    数组拷贝(覆盖目标数组的值)</p>
<p>​                        src:原数组 srcPos:拷贝开始位置</p>
<p>​                        dest：目标数组 destPos:从什么位置开始赋值</p>
<p>​                        length:一次拷贝多少个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.arraycopy(a,<span class="number">0</span>,a1,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(Arrays.toString(a1));</span><br></pre></td></tr></table></figure>

<h3 id="十一、Arrays"><a href="#十一、Arrays" class="headerlink" title="十一、Arrays"></a>十一、Arrays</h3><p>​     1、Arrays.toString 将数组转化为字符串形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> []arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">22</span>,<span class="number">66</span>,<span class="number">66</span>,<span class="number">85</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>

<p>​     2、Arrays.equals（a，b） 判断俩个数组是否相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较数组相等</span></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">boolean</span> is=Arrays.equals(a,b);</span><br><span class="line">System.out.println(is);</span><br></pre></td></tr></table></figure>

<p>​     3、Arrays.sort(a)  数组排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>

<p>​     4、Arrays.fill(arr,3)  将数组所有元素覆盖成3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//覆盖数组</span></span><br><span class="line">Arrays.fill(arr,<span class="number">2</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>

<p>​      5、Arrays.copyOf(arr,4)  拷贝数组，长度为4</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拷贝</span></span><br><span class="line"><span class="keyword">int</span> []a1=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">56</span>,<span class="number">66</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> []b1=Arrays.copyOf(a1,<span class="number">2</span>);</span><br><span class="line">System.out.println(Arrays.toString(b1));</span><br></pre></td></tr></table></figure>

<p>​      6、Arrays.binarySearch(a,3)  查找数组是否有3这个元素</p>
<p>​            使用二分搜索法查询元素值val在数组array中的索引，返回要搜索元素的索引值，如果没找到，如果目标值不在数组内的，返回 -（第一个大于目标值的元素的下标+1），类似的，如果数组内的值都比目标值小，则是返回-（数组长度+1）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(Arrays.binarySearch(arr,<span class="number">99</span>));</span><br></pre></td></tr></table></figure>

<h3 id="十二、枚举类"><a href="#十二、枚举类" class="headerlink" title="十二、枚举类"></a>十二、枚举类</h3><p>特殊的类（春夏秋冬（有限的对象））</p>
<p>​          构造方法为private，只能在构造枚举对象时使用</p>
<p>​          默认（public static final）,枚举只能在第一行显示列出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span></span>&#123;</span><br><span class="line">    MALE,FEMALE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Gender gender=Gender.MALE;</span><br><span class="line">System.out.println(<span class="string">&quot;性别&quot;</span>+Gender.MALE);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK8新特性</title>
    <url>/2020/11/11/10JDK8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="一、Lambda"><a href="#一、Lambda" class="headerlink" title="一、Lambda"></a>一、Lambda</h3><blockquote>
<p>函数式表示式，-&gt; 为Lambda运算符，读作（goes to）</p>
<p><strong>Lambda 表达式免去了使用匿名方法的麻烦，并且给予Java简单但是强大的函数化的编程能力。</strong></p>
<p>Lambda等价匿名实例化实现接口方法</p>
</blockquote>
<h4 id="1、格式"><a href="#1、格式" class="headerlink" title="1、格式"></a>1、格式</h4><blockquote>
<p>（形式参数）-&gt;{代码块}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用实现类</span></span><br><span class="line">        MyInterface myInterface1=<span class="keyword">new</span> MyInterfaceDemo1();</span><br><span class="line">        myInterface1.show(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式</span></span><br><span class="line">        MyInterface myInterface=s-&gt; System.out.println(<span class="string">&quot;函数式接口&quot;</span>+s);</span><br><span class="line">        myInterface.show(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceDemo1</span> <span class="keyword">implements</span> <span class="title">MyInterface</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;函数式接口&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、使用特点"><a href="#2、使用特点" class="headerlink" title="2、使用特点"></a>2、使用特点</h4><ul>
<li>不需要声明参数类型，编译器可以统一识别参数值  x-&gt;2*x</li>
<li>一个参数无需定义圆括号，但多个参数需要定义圆括号 </li>
<li>主体<strong>只有一个表达式返回值则编译器会自动返回值</strong>，大括号需要指定表达式返回一个数值<ul>
<li>(String s) -&gt;System.out.print(s)</li>
</ul>
</li>
</ul>
<h4 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h4><ul>
<li><strong>使用Lambda必须要有接口，接口中只能有一个抽象方法</strong></li>
<li>必须要有<strong>上下文环境</strong>，调用接口抽象方法，使用Lambda表达式可以不用写 接口实现类</li>
<li>Lambda表达式中参数和接口抽象方法的形参保持一致</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Addable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     useAdd((<span class="keyword">int</span> x,<span class="keyword">int</span> y)-&gt;&#123;</span><br><span class="line">         <span class="keyword">return</span> x+y;</span><br><span class="line"><span class="comment">//       return x-y;</span></span><br><span class="line">     &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略，去掉花括号有return会报错</span></span><br><span class="line">    useAdd((x,y)-&gt;x+y);</span><br><span class="line">    <span class="comment">//Lambda</span></span><br><span class="line">    useFlyable((String s)-&gt;&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;飞机&quot;</span>+s);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略,只有一个参数时，括号和花括号可以被省略</span></span><br><span class="line">    useFlyable(s -&gt; System.out.println(s));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useAdd</span><span class="params">(Addable addable)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> add=addable.add(<span class="number">10</span>,<span class="number">5</span>);</span><br><span class="line">     System.out.println(add);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useFlyable</span><span class="params">(Flyable flyable)</span></span>&#123;</span><br><span class="line">        flyable.fly(<span class="string">&quot;飞飞飞&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、Lambda表达式和匿名内部类"><a href="#4、Lambda表达式和匿名内部类" class="headerlink" title="4、Lambda表达式和匿名内部类"></a>4、Lambda表达式和匿名内部类</h4><ul>
<li>使用限制：Lambda表达式适用于仅有一个抽象类的接口，匿名内部类可用于多个抽象类的接口</li>
<li>所需类型：Lambda表达式只能是接口，匿名内部类可以是接口、抽象类、普通类</li>
<li>实现原理：匿名内部类编译产生一个单独.class文件，而Lambda对应的<strong>字节码动态生成</strong></li>
</ul>
<h3 id="二、接口组成更新"><a href="#二、接口组成更新" class="headerlink" title="二、接口组成更新"></a>二、接口组成更新</h3><ul>
<li>常量 public final static</li>
<li>抽象方法 public abstract</li>
<li>默认方法 default  (JDK8)</li>
<li>静态方法 static  (JDK8)</li>
<li>私有方法 private （JDK9）</li>
</ul>
<h4 id="2-1-接口默认方法"><a href="#2-1-接口默认方法" class="headerlink" title="2.1 接口默认方法"></a>2.1 接口默认方法</h4><blockquote>
<p>public default void demo1(){</p>
<p>​    System.out.print(“show1”);</p>
<p>}</p>
</blockquote>
<ul>
<li>默认方法不是抽象方法，<strong>不强制被重写</strong>，<strong>但是可以被重写</strong></li>
<li>default不能被省略</li>
</ul>
<h4 id="2-2-接口静态方法"><a href="#2-2-接口静态方法" class="headerlink" title="2.2 接口静态方法"></a>2.2 接口静态方法</h4><blockquote>
<p>public static void show(){</p>
<p>​    System.out.print(“show2”);</p>
<p>}</p>
</blockquote>
<ul>
<li>接口静态方法只能通过<strong>接口名</strong>调用，不能通过实现类或者对象名调用</li>
<li>若<code>通过实现类或者对象名调用</code>，当实现类继承多个接口时，就不知道调用哪一个接口静态方法</li>
</ul>
<h4 id="2-3-接口私有方法"><a href="#2-3-接口私有方法" class="headerlink" title="2.3 接口私有方法"></a>2.3 接口私有方法</h4><p>jdk9</p>
<blockquote>
<p>格式一</p>
<p>private void show(){</p>
<p>​    System.out.print(“show2”);</p>
<p>}</p>
</blockquote>
<blockquote>
<p>格式二</p>
<p>private static void show(){</p>
<p>​    System.out.print(“show2”);</p>
<p>}</p>
</blockquote>
<ul>
<li>接口中，默认方法可以调用私有的静态方法和非静态方法</li>
<li>静态方法只能调用私有的静态方法</li>
</ul>
<h3 id="三、方法引用"><a href="#三、方法引用" class="headerlink" title="三、方法引用"></a>三、方法引用</h3><p>引用已经存在的方法</p>
<h4 id="1、方法引用符"><a href="#1、方法引用符" class="headerlink" title="1、方法引用符"></a>1、方法引用符</h4><blockquote>
<p>：：引用运算符，所在的表达式被称为方法引用</p>
</blockquote>
<ul>
<li><p>Lambda，根据”可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载形式，它们被自动推导</p>
</li>
<li><p>方法引用是Lambda表达式的孪生兄弟</p>
</li>
</ul>
<h4 id="2、引用类方法"><a href="#2、引用类方法" class="headerlink" title="2、引用类方法"></a>2、引用类方法</h4><blockquote>
<p><strong>引用类的静态方法</strong></p>
<p>格式：类名：：静态方法</p>
<p>Lambda表达式被类方法替代的时候，它的形式参数<strong>全部传递</strong>给静态方法作为参数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式省略</span></span><br><span class="line">useConverter(s -&gt;Integer.parseInt(s));</span><br><span class="line"><span class="comment">//引用类方法</span></span><br><span class="line">useConverter(Integer::parseInt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useConverter</span><span class="params">(Converter converter)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = converter.converter(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、-引用对象的实例方法"><a href="#3、-引用对象的实例方法" class="headerlink" title="3、**引用对象的实例方法"></a>3、**引用对象的实例方法</h4><blockquote>
<p>格式：引用对象：：实例方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        usePrinter(s -&gt; System.out.println(s.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子类实现接口</span></span><br><span class="line">        PrinterDemo1 printDemo=<span class="keyword">new</span> PrinterDemo1();</span><br><span class="line">        printDemo.printUpperCase(<span class="string">&quot;hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        usePrinter(s-&gt;<span class="keyword">new</span> PrintString().printUpper(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用对象的实例方法</span></span><br><span class="line">        PrintString printString=<span class="keyword">new</span> PrintString();</span><br><span class="line">        usePrinter(printString::printUpper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usePrinter</span><span class="params">(Printer printer)</span></span>&#123;</span><br><span class="line">        printer.printUpperCase(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrinterDemo1</span> <span class="keyword">implements</span> <span class="title">Printer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> PrintString().printUpper(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintString</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpper</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String s1=s.toUpperCase();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、引用类的实例方法"><a href="#4、引用类的实例方法" class="headerlink" title="4、引用类的实例方法"></a>4、引用类的实例方法</h4><blockquote>
<p>引用类中的成员方法</p>
<p>格式： 类名：：成员方法</p>
</blockquote>
<ul>
<li>Lambda表达式被类的实例方法替代的时候</li>
<li><strong>第一个参数作为调用者</strong>，后面的参数全部传递给该方法作为参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    useMyString((s,x,y)-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substring(x,y);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    useMyString(String::substring);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useMyString</span><span class="params">(MyString myString)</span></span>&#123;</span><br><span class="line">    String s=myString.mySubString(<span class="string">&quot;HelloWord&quot;</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5、引用构造器"><a href="#5、引用构造器" class="headerlink" title="5、引用构造器"></a>5、引用构造器</h4><blockquote>
<p>引用构造方法</p>
<p>格式 ： 类名：：new</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        add((name,age)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Teacher(name,age);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        add(Teacher::<span class="keyword">new</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Teachere teachere)</span></span>&#123;</span><br><span class="line">        Teacher teacher = teachere.show(<span class="string">&quot;小明&quot;</span>, <span class="number">11</span>);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Teachere</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">show</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、函数式接口"><a href="#四、函数式接口" class="headerlink" title="四、函数式接口"></a>四、函数式接口</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><blockquote>
<p>函数式接口：有且仅有一个抽象方法的接口</p>
<p><code>@FunctiongalInterface</code></p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20200927123553414.png" alt="image-20200927123553414" style="zoom:80%;" />

<h4 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h4><h5 id="2-1-函数式接口作为方法的参数"><a href="#2-1-函数式接口作为方法的参数" class="headerlink" title="2.1 函数式接口作为方法的参数"></a>2.1 函数式接口作为方法的参数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类形式</span></span><br><span class="line">    startThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Lambda表达式</span></span><br><span class="line">    startThread(()-&gt; System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable runnable)</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-函数式接口作为方法的返回值"><a href="#2-2-函数式接口作为方法的返回值" class="headerlink" title="2.2 函数式接口作为方法的返回值"></a>2.2 函数式接口作为方法的返回值</h5><blockquote>
<p>如果方法的返回值是一个函数式接口，可以使用Lambda表达式作为结果返回</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;aaaa&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Collections.sort(arrayList);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前&quot;</span>+arrayList);</span><br><span class="line"></span><br><span class="line">        Collections.sort(arrayList,getComparator());</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后&quot;</span>+arrayList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">getComparator</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length()-s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (s1,s2)-&gt;s1.length()-s2.length();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、函数式接口"><a href="#3、函数式接口" class="headerlink" title="3、函数式接口"></a>3、函数式接口</h4><h5 id="3-1-Supplier"><a href="#3-1-Supplier" class="headerlink" title="3.1 Supplier"></a>3.1 Supplier</h5><ul>
<li>T get() 获得结果</li>
<li>该方法不需要参数，会按照某种实现逻辑(由Lambda表达式实现) 返回一个数据</li>
<li>Supplier&lt; T&gt; 接口被称为<strong>生产型接口</strong>，指定接口的泛型是什么类型，接口中get就会生产出什么类型供我们使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxValue=getMax(()-&gt;&#123;</span><br><span class="line">       <span class="keyword">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">12</span>,<span class="number">44</span>&#125;;</span><br><span class="line">       <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (arr[i] &gt;= arr[max])&#123;</span><br><span class="line">                max=i;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> arr[max];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(maxValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">getMax</span><span class="params">(Supplier&lt;Integer&gt; supplier)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> supplier.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-2-Consumer"><a href="#3-2-Consumer" class="headerlink" title="3.2 Consumer"></a>3.2 Consumer</h5><ul>
<li><strong>消费型接口</strong>，它消费的数据的数据类型由泛型指定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>,s -&gt; System.out.println(<span class="keyword">new</span> StringBuffer(s).reverse().toString())</span><br><span class="line">        ,System.out::println);</span><br><span class="line">     operatorString(<span class="string">&quot;凌青霞&quot;</span>,<span class="number">34</span>,System.out::print,i-&gt; System.out.print(String.valueOf(i+<span class="number">200</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *定义一个方法，用不同方式消费同一个字符串数据俩次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operatorString</span><span class="params">(String name,Consumer&lt;String&gt; consumer,Consumer&lt;String&gt; consumer1)</span></span>&#123;</span><br><span class="line"><span class="comment">//   consumer.accept(name);</span></span><br><span class="line"><span class="comment">//   consumer1.accept(name);</span></span><br><span class="line">  consumer.andThen(consumer1).accept(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operatorString</span><span class="params">(String name,<span class="keyword">int</span> age,Consumer&lt;String&gt; consumer,Consumer&lt;Integer&gt; consumer1)</span></span>&#123;</span><br><span class="line">        consumer.accept(name);</span><br><span class="line">        consumer1.accept(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-3-Predicate"><a href="#3-3-Predicate" class="headerlink" title="3.3 Predicate"></a>3.3 Predicate</h5><ul>
<li>用于判断参数是否满足指定的条件</li>
<li>boolean test(T,t)：对给定参数进行判断，返回boolean值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> b=checkString(<span class="string">&quot;hello&quot;</span>,s -&gt; s.length()&gt;<span class="number">6</span>);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String str, Predicate&lt;String&gt; predicate)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> predicate.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>negate()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//negate()对结果进行逻辑非操作</span></span><br><span class="line"><span class="keyword">return</span> predicate.negate().test(str);</span><br></pre></td></tr></table></figure>

<ul>
<li>短路与and，短路或or</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> hello = checkString(<span class="string">&quot;hello&quot;</span>, s -&gt; s.length() &gt; <span class="number">7</span>, s -&gt; s.length() &lt; <span class="number">6</span>);</span><br><span class="line">    System.out.println(hello);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对同一个字符串给出俩个不同的判断条件，最后把这个俩个判断结果合成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String str, Predicate&lt;String&gt; predicate,Predicate&lt;String&gt; predicate1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> b1=predicate.test(str);</span><br><span class="line">    <span class="keyword">boolean</span> b2=predicate1.test(str);</span><br><span class="line"> <span class="comment">//        return b1 &amp;&amp; b2;</span></span><br><span class="line">    <span class="comment">//短路与</span></span><br><span class="line">    <span class="keyword">return</span> predicate.and(predicate1).test(str);</span><br><span class="line">    <span class="comment">//短路或</span></span><br><span class="line">    <span class="keyword">return</span> predicate.or(predicate1).test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *      给定姓名+年龄的字符串数组</span></span><br><span class="line"><span class="comment"> *      - 查找出同时符合: 年龄&gt;35,姓名长度&gt;2的数组集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strArray=&#123;<span class="string">&quot;林青霞,30&quot;</span>,<span class="string">&quot;凉凉,20&quot;</span>,<span class="string">&quot;张曼玉,42&quot;</span>&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; list=myFilter(strArray,s -&gt; s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].length()&gt;<span class="number">2</span>,</span><br><span class="line">                                        s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])&gt;<span class="number">34</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">myFilter</span><span class="params">(String[] strArray, Predicate&lt;String&gt;predicate</span></span></span><br><span class="line"><span class="function"><span class="params">                                         ,Predicate&lt;String&gt; predicate1)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str:strArray)&#123;</span><br><span class="line">            <span class="keyword">if</span> (predicate.and(predicate1).test(str))&#123;</span><br><span class="line">                list.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-4-function"><a href="#3-4-function" class="headerlink" title="3.4  function"></a>3.4  function</h5><blockquote>
<p>interface Function&lt; T,R&gt; </p>
<p>R apply(T,t) </p>
<p>default <V> Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after)  组合</p>
</blockquote>
<ul>
<li>用于对参数用于<strong>对参数进行处理</strong>，转换(处理逻辑由Lambda表达式实现)，然后<strong>返回一个新的值</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        convert(<span class="string">&quot;444&quot;</span>,s -&gt; Integer.parseInt(s));</span><br><span class="line">        convert1(<span class="number">444</span>,integer -&gt; String.valueOf(integer+<span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">        convert2(<span class="string">&quot;444&quot;</span>,s -&gt; Integer.parseInt(s),integer -&gt; String.valueOf(integer+<span class="number">200</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，将一个字符串转换为int类型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String str, Function&lt;String,Integer&gt; fun)</span></span>&#123;</span><br><span class="line">        Integer apply = fun.apply(str);</span><br><span class="line">        System.out.println(apply);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，将一个int类型转换为String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert1</span><span class="params">(<span class="keyword">int</span> i,Function&lt;Integer, String&gt; fun1)</span></span>&#123;</span><br><span class="line">        String app=fun1.apply(i);</span><br><span class="line">        System.out.println(app);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert2</span><span class="params">(String str,Function&lt;String, Integer&gt; fun1,Function&lt;Integer,String&gt; fun2)</span></span>&#123;</span><br><span class="line"><span class="comment">//        Integer i = fun1.apply(str);</span></span><br><span class="line"><span class="comment">//        String s = fun2.apply(i);</span></span><br><span class="line">        String s = fun1.andThen(fun2).apply(str);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str=<span class="string">&quot;林青霞,30&quot;</span>;</span><br><span class="line">    convert(str,s-&gt;s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>], Integer::parseInt, integer -&gt; String.valueOf(integer+<span class="number">70</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String s, Function&lt;String,String&gt; fun1, Function&lt;String,Integer&gt; fun2,</span></span></span><br><span class="line"><span class="function"><span class="params">                           Function&lt;Integer, String&gt; fun3)</span></span>&#123;</span><br><span class="line">		String apply = fun1.andThen(fun2).andThen(fun3).apply(s);</span><br><span class="line">        System.out.println(apply);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、Stream流"><a href="#五、Stream流" class="headerlink" title="五、Stream流"></a>五、Stream流</h3><blockquote>
<p>使用：生成流<code>list.stream()</code>–&gt;中间操作<code>filter()-</code>-&gt;终结操作<code>foreach()</code></p>
</blockquote>
<h4 id="1、演示"><a href="#1、演示" class="headerlink" title="1、演示"></a>1、演示</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; zhangList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s1:arrayList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s1.startsWith(<span class="string">&quot;张&quot;</span>))&#123;</span><br><span class="line">        zhangList.add(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; threeList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s2:zhangList)&#123;</span><br><span class="line">    <span class="keyword">if</span> (s2.length()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        threeList.add(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String s3:threeList) &#123;</span><br><span class="line">    System.out.println(s3);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Stream流形式</span></span><br><span class="line">arrayList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length()&gt;<span class="number">2</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h4 id="2、Stream生成方式"><a href="#2、Stream生成方式" class="headerlink" title="2、Stream生成方式"></a>2、Stream生成方式</h4><h5 id="2-1-Collection体系"><a href="#2-1-Collection体系" class="headerlink" title="2.1 Collection体系"></a>2.1 Collection体系</h5><blockquote>
<p>list.stream()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Collection体系</span></span><br><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; listStream = list.stream();</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set=<span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">Stream&lt;String&gt; setStream = set.stream();</span><br></pre></td></tr></table></figure>



<h5 id="2-2-Map体系"><a href="#2-2-Map体系" class="headerlink" title="2.2 Map体系"></a>2.2 Map体系</h5><blockquote>
<p>keySet()–&gt;key</p>
<p>values()–value</p>
<p>entrySet()–&gt; key-value</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map体系</span></span><br><span class="line">Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; mapStream = map.keySet().stream();</span><br><span class="line">Stream&lt;Integer&gt; values = map.values().stream();</span><br><span class="line">Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; mapEntryStream = map.entrySet().stream();</span><br></pre></td></tr></table></figure>



<h5 id="2-3-数组"><a href="#2-3-数组" class="headerlink" title="2.3 数组"></a>2.3 数组</h5><blockquote>
<p>Stream.of(array)</p>
<p>Arrays.stream(arr[] arr)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">String[] arr=&#123;<span class="string">&quot;sss&quot;</span>,<span class="string">&quot;dsfs&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; arrStream = Stream.of(arr);</span><br><span class="line">Stream&lt;String&gt; arrStream2 = Stream.of(<span class="string">&quot;sss&quot;</span>, <span class="string">&quot;dsfs&quot;</span>);</span><br><span class="line">Stream&lt;Integer&gt; integerStream = Stream.of(<span class="number">19</span>, <span class="number">23</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3、Stream中间操作"><a href="#3、Stream中间操作" class="headerlink" title="3、Stream中间操作"></a>3、Stream中间操作</h4><ul>
<li>filter(Predicate predicate) 对流中的数据进行过滤</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(System.out::print);</span><br></pre></td></tr></table></figure>

<ul>
<li>limit(long maxSize) 返回流中元素组成的流，<strong>截取前指定参数个数</strong>的数据</li>
<li>skip(long n)   跳过指定参数个数的数据，返回由该流<strong>剩余元素</strong>组成的流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayList.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">arrayList.stream().skip(<span class="number">4</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>concat(Stream a,Stream b) 合并俩个流，<strong>静态方法，由接口名调用</strong></li>
<li>distinct() 返回该流不同元素组成的流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取出前4个元素</span></span><br><span class="line">Stream&lt;String&gt;  s1= arrayList.stream().limit(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//跳过2个元素</span></span><br><span class="line">Stream&lt;String&gt; s2 = arrayList.stream().skip(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//合并俩个流</span></span><br><span class="line">Stream.concat(s1, s2).forEach(System.out::println);;</span><br><span class="line">System.out.println(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line"><span class="comment">//取出流中不同元素</span></span><br><span class="line">Stream.concat(s1, s2).distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>sorted() 返回排序的流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayList.stream().sorted().forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line"><span class="comment">//按照长度排序</span></span><br><span class="line">arrayList.stream().sorted((s1,s2)-&gt;s1.length()-s2.length()).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>map(Function mapper)   返回由给定函数应用于该流元素的结果组成的流</strong></li>
<li>IntStream <strong>mapToint</strong>(ToIntFunction mapper) 返回一个<strong>IntStream</strong>，其中包含将给定函数应用于此流的元素的<strong>结果</strong><ul>
<li>IntStream 原始的int流</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arrayList.stream().map(Integer::parseInt).forEach(System.out::println);</span><br><span class="line">System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> sum = arrayList.stream().mapToInt(Integer::parseInt).sum();</span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure>



<h4 id="4、Stream终结操作"><a href="#4、Stream终结操作" class="headerlink" title="4、Stream终结操作"></a>4、Stream终结操作</h4><ul>
<li><p>foreach(Consumer action)</p>
</li>
<li><p>long count()  返回流的元素数</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> c = arrayList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).count();</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>



<h4 id="5、练习"><a href="#5、练习" class="headerlink" title="5、练习"></a>5、练习</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">arrayList.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; arrayList2=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList2.add(<span class="string">&quot;重监控&quot;</span>);</span><br><span class="line">arrayList2.add(<span class="string">&quot;杀杀杀&quot;</span>);</span><br><span class="line">arrayList2.add(<span class="string">&quot;搜索&quot;</span>);</span><br><span class="line">arrayList2.add(<span class="string">&quot;啊啊&quot;</span>);</span><br><span class="line">arrayList2.add(<span class="string">&quot;撒法发&quot;</span>);</span><br><span class="line">arrayList2.add(<span class="string">&quot;实施方案&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream1 = arrayList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;林&quot;</span>)).skip(<span class="number">1</span>);</span><br><span class="line">Stream&lt;String&gt; stream2 = arrayList2.stream().filter(s -&gt; s.length() &gt; <span class="number">2</span>).limit(<span class="number">3</span>);</span><br><span class="line">Stream&lt;String&gt; allStream = Stream.concat(stream1, stream2);</span><br><span class="line"><span class="comment">//        allStream.map(Actor::new).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回由  给定函数应用于该流元素的结果 组成的流</span></span><br><span class="line">allStream.map(Actor::<span class="keyword">new</span>).forEach(s-&gt; System.out.println(s.getName()));</span><br></pre></td></tr></table></figure>



<h4 id="6、Stream的收集操作"><a href="#6、Stream的收集操作" class="headerlink" title="6、Stream的收集操作"></a>6、Stream的收集操作</h4><ul>
<li>R collect(Collectors collector)  收集方法的参数是一个Collector接口</li>
<li>工具类<code>Collectors</code>提供具体的收集方式<ul>
<li>toLIst()</li>
<li>toSet ()</li>
<li>toMap()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = arrayList.stream().filter(s -&gt; s.length() &gt; <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line"><span class="keyword">for</span> (String s:list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2020/11/11/11%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><blockquote>
<p><strong>一组存放多个对象的可变字符序列</strong></p>
</blockquote>
<blockquote>
<p>JDK8:底层全部采用<strong>数组+链表+红黑树</strong>进行维护</p>
<p>​         当索引位置上的链表元素的数据个数&gt;8 且数组的长度&gt;64时，索引上的数据用红黑树存储</p>
<p> 优点：提高查找效率（类似于二分查找）</p>
</blockquote>
<h3 id="一、List"><a href="#一、List" class="headerlink" title="一、List"></a>一、List</h3><h4 id="1、Arrayslist"><a href="#1、Arrayslist" class="headerlink" title="1、Arrayslist"></a>1、Arrayslist</h4><blockquote>
<p><strong>有序可重复</strong>（下标从0开始）</p>
</blockquote>
<p>默认情况为0的空数组对象，有参构造时，创建一个大小为传递大小的对象数组</p>
<p>add()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">List list1=<span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="keyword">new</span> Student());</span><br><span class="line">list.add(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">list.add(<span class="number">123</span>);  <span class="comment">//自动装箱</span></span><br><span class="line"><span class="comment">//插入，后面元素后移</span></span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">&quot;ss&quot;</span>);</span><br><span class="line">list1.add(<span class="string">&quot;故&quot;</span>);</span><br><span class="line"></span><br><span class="line">list.add(list1);        <span class="comment">//将数组2加到数组1中</span></span><br><span class="line"><span class="comment">//以ArrayList形式打印出来</span></span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>size()长度</p>
<p><code>System.out.println(list.size());</code></p>
<p>get(index) 返回Object类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=(String)list.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> i=(<span class="keyword">int</span>)list.get(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>contain();返回Boolean类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(list.contains(<span class="string">&quot;hh&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>remove()；移除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.remove(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);<span class="comment">//直接用索引删除</span></span><br><span class="line">System.out.println(list.contains(<span class="string">&quot;hh&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>clear();清空</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空</span></span><br><span class="line">list.clear();</span><br><span class="line">System.out.println(list.size());</span><br></pre></td></tr></table></figure>

<p> set():原有元素被覆盖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.set(<span class="number">0</span>,<span class="string">&quot;55&quot;</span>); <span class="comment">//原有元素被覆盖</span></span><br></pre></td></tr></table></figure>

<p>逆向遍历</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ListIterator list2&#x3D;list.listIterator();</span><br><span class="line">while(list2.hasPrevious())&#123;</span><br><span class="line">    System.out.println(list2.previous());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sublist() 截取元素返回一个新的集合</p>
<h4 id="2、LinkedList"><a href="#2、LinkedList" class="headerlink" title="2、LinkedList"></a>2、LinkedList</h4><blockquote>
<p><strong>双向链表</strong>的一个数据结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list=<span class="keyword">new</span> LinkedList();</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">&quot;66&quot;</span>);</span><br><span class="line">list.add(<span class="number">1</span>,<span class="string">&quot;55&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Object obj:list)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">list.offer(<span class="string">&quot;后面添加&quot;</span>);</span><br><span class="line">list.push(<span class="string">&quot;前面添加&quot;</span>);</span><br><span class="line">Object o=list.peek(); <span class="comment">//获取集合的第一个元素</span></span><br><span class="line">Object o1=list.peekFirst();</span><br><span class="line">System.out.println(o);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">Iterator iterator=list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">    String i= (String) iterator.next();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除</span></span><br><span class="line">list.remove(<span class="string">&quot;66&quot;</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>

<p>以队列的形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.offer(<span class="string">&quot;后面添加&quot;</span>);</span><br><span class="line">list.poll();</span><br></pre></td></tr></table></figure>

<p>以栈的形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.push(<span class="string">&quot;前面添加&quot;</span>);</span><br><span class="line">list.pop();</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></figure>



<h4 id="3、排序方法"><a href="#3、排序方法" class="headerlink" title="3、排序方法"></a>3、排序方法</h4><ul>
<li>将list放在<code>TreeSet</code>当中进行排序，根据排序顺序放置在list集合当中</li>
<li>list转化为数组，利用数组排序规则进行排序 Arrays.sort</li>
<li>使用集合工具类Collections的sort进行排序 Collections.sort        </li>
</ul>
<h3 id="二、Set"><a href="#二、Set" class="headerlink" title="二、Set"></a>二、Set</h3><blockquote>
<p><strong>无序不可重复</strong></p>
</blockquote>
<h4 id="1、HashSet"><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h4><blockquote>
<p><strong>利用Object类的<code>hashcode</code>方法来确定存储位置</strong></p>
<ul>
<li><p>若是该位置无其他元素，直接存入。</p>
</li>
<li><p>若是该位置有其他元素，调用equals()方法，比较相等则舍弃该对象；不相等则覆盖原有对象</p>
</li>
</ul>
<p>重写hash code()与equals()可解决实例对象不同（但内容相同）——&gt;重复</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set set=<span class="keyword">new</span> HashSet();</span><br><span class="line">set.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">System.out.println(set);</span><br><span class="line"><span class="keyword">for</span>(Object obj:set)&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br><span class="line">控制台：[广州, 上海, 北京]</span><br></pre></td></tr></table></figure>



<h4 id="2、LinkedSet"><a href="#2、LinkedSet" class="headerlink" title="2、LinkedSet"></a>2、LinkedSet</h4><p>其实上是<code>HashSet</code>的子类，本质也是通过<code>hashCode</code>来决定元素的位置多提供一个双向链表进行维护次序，</p>
<h4 id="3、TreeSet"><a href="#3、TreeSet" class="headerlink" title="3、TreeSet"></a>3、TreeSet</h4><blockquote>
<p>底层二叉树（红黑树）（左小右大）</p>
</blockquote>
<h5 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a><strong>排序方法</strong></h5><ul>
<li><code>comparable</code>接口实际上是出自<code>java.lang</code>包,它有一个<code>compareTo(Object obj)</code>方法用来排序</li>
<li><code>comparator</code>接口实际上是出自<code>java.util</code>包,它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</li>
</ul>
<blockquote>
<p>Comparable &amp; Comparator 都是用来实现集合中元素的比较、排序的，</p>
<p>只是 Comparable 是在<strong>集合内部</strong>定义的方法实现的排序，Comparator 是在<strong>集合外部</strong>实现的排序</p>
<p>所以，如想实现排序，就需要在集合外定义 Comparator 接口的方法或在集合内实现 Comparable 接口的方法。</p>
<p> String、Integer 自己就可以完成比较大小操作，已经实现了Comparable接口</p>
</blockquote>
<h6 id="1、自然排序"><a href="#1、自然排序" class="headerlink" title="1、自然排序"></a>1、自然排序</h6><ul>
<li>具有自然排序规则的数据(默认调用<code>comparable</code>接口</li>
<li>不具备会出现类型转换异常，需要重写<code>compareTo()</code>方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line"> <span class="comment">//多个排序规则排序</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Person p=(Person) o;</span><br><span class="line"><span class="comment">//      System.out.println(this.name+&quot;compare&quot;+p.name);</span></span><br><span class="line">        <span class="comment">//按照姓名长度来排序</span></span><br><span class="line">        <span class="keyword">int</span> num=<span class="keyword">this</span>.name.length()-p.name.length();</span><br><span class="line">        <span class="comment">//根据字典来排序</span></span><br><span class="line">        <span class="keyword">int</span> num1=(num==<span class="number">0</span>)?(<span class="keyword">this</span>.name.compareTo(p.name)):num;</span><br><span class="line">        <span class="comment">//长度一致，姓名一致</span></span><br><span class="line">        <span class="keyword">int</span> num2=num1==<span class="number">0</span>? <span class="keyword">this</span>.age-p.age:num1;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">TreeSet ts1=<span class="keyword">new</span> TreeSet();</span><br><span class="line">Person p=<span class="keyword">new</span> Person(<span class="number">15</span>,<span class="string">&quot;numm&quot;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">Person p1=<span class="keyword">new</span> Person(<span class="number">16</span>,<span class="string">&quot;aew&quot;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">Person p2=<span class="keyword">new</span> Person(<span class="number">22</span>,<span class="string">&quot;sss&quot;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line">Person p3=<span class="keyword">new</span> Person(<span class="number">12</span>,<span class="string">&quot;aew&quot;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">ts1.add(p); ts1.add(p1);</span><br><span class="line">ts1.add(p2); ts1.add(p3);</span><br></pre></td></tr></table></figure>



<h6 id="2、定制排序"><a href="#2、定制排序" class="headerlink" title="2、定制排序"></a>2、定制排序</h6><p>实现<code>comparator</code>接口，<strong>其在类不可以修改时使用</strong></p>
<p>重写<code>compare()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(<span class="number">1</span>);</span><br><span class="line">arrayList.add(<span class="number">2</span>);</span><br><span class="line">arrayList.add(-<span class="number">1</span>);</span><br><span class="line">arrayList.add(<span class="number">30</span>);</span><br><span class="line">arrayList.add(<span class="number">12</span>);</span><br><span class="line">System.out.println(arrayList);</span><br><span class="line"></span><br><span class="line">Collections.sort(arrayList, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1-o2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;定制排序后&quot;</span>+arrayList);</span><br></pre></td></tr></table></figure>



<h3 id="三、Map"><a href="#三、Map" class="headerlink" title="三、Map"></a>三、Map</h3><blockquote>
<p> <strong>无序，一个键只能对应一个值</strong></p>
<p><strong>不可通过值来获取键</strong></p>
<ul>
<li><p>key:     <code>keySet()</code>    通过Set存储，不能重复,插入和取出的顺序不一致</p>
</li>
<li><p>value：<code>values()</code>   通过Collection存储，值能重复，取出和插入的顺序一致</p>
</li>
<li><p>  Map的Entry:无序不可重复，Entry随着key走           </p>
</li>
</ul>
</blockquote>
<h4 id="1、遍历方式"><a href="#1、遍历方式" class="headerlink" title="1、遍历方式"></a>1、遍历方式</h4><h5 id="1-1-entrySet"><a href="#1-1-entrySet" class="headerlink" title="1.1 entrySet"></a>1.1 entrySet</h5><blockquote>
<p>Set&lt;Map .Entry&lt;K,V&gt;&gt;  entrySet();</p>
<p>返回的是集合<strong>键值对的集合</strong>,使用Set进行接收，不需要进行强转</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Map.Entry&gt; entries=map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry entry:entries)&#123;</span><br><span class="line">    System.out.println(entry.getKey()+<span class="string">&quot;--&quot;</span>+entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="1-2-keySet"><a href="#1-2-keySet" class="headerlink" title="1.2 keySet"></a>1.2 keySet</h5><blockquote>
<p>获取键的set集合，values() 获取值的collection集合</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set s=map.keySet();</span><br><span class="line">Collection s1=map.values();</span><br><span class="line">System.out.println(s1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Object key:map.keySet())&#123;</span><br><span class="line">    System.out.println(key+<span class="string">&quot;--&quot;</span>+map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、HashMap"><a href="#2、HashMap" class="headerlink" title="2、HashMap"></a>2、HashMap</h4><p>HashMap的键不能重复，会覆盖；不可通过值来获取键</p>
<p>​        put(Object key,Object )，，putAll():</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map map=<span class="keyword">new</span> HashMap();</span><br><span class="line">map.put(<span class="string">&quot;201&quot;</span>,<span class="string">&quot;离&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;202&quot;</span>,<span class="string">&quot;森&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;203&quot;</span>,<span class="string">&quot;青&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>contains()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b=map.containsKey(<span class="string">&quot;201&quot;</span>);</span><br><span class="line"><span class="keyword">boolean</span> b1=map.containsValue(<span class="string">&quot;离&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>get()，<strong>通过key来得到值</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(<span class="string">&quot;201&quot;</span>);</span><br><span class="line">System.out.println(map.get(<span class="string">&quot;201&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>replace(); 替代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.replace(<span class="string">&quot;201&quot;</span>,<span class="string">&quot;禁&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>remove() 移除，只是在容器中移除；clear();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;201&quot;</span>);</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure>



<h4 id="3、HashTable"><a href="#3、HashTable" class="headerlink" title="3、HashTable"></a>3、HashTable</h4><h4 id="4、TreeMap"><a href="#4、TreeMap" class="headerlink" title="4、TreeMap"></a>4、TreeMap</h4><p>​    通过key来排序（类似于TreeSet，但排序方式是红黑树）</p>
<h3 id="四、Iterator"><a href="#四、Iterator" class="headerlink" title="四、Iterator"></a>四、Iterator</h3><blockquote>
<p><strong>所有集合类都实现了iterator接口</strong></p>
</blockquote>
<p>例如：（1）ArrayList实现了iterator接口，调用iterator()方法返回值实现了多态</p>
<p>​           （2）调用ArrayList内部类（该内部类实现了iterator接口，防止内存泄露使用内部类）</p>
<p> 1、iterator():将元素封装进容器</p>
<p> 2、hasNext():boolean是否还有下一个元素</p>
<p> 3、next():返回下一个元素</p>
<p> 4、remove() : 移除，但不能指定元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> Iterator iterator=list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> i=(<span class="keyword">int</span>)iterator.next();</span><br><span class="line">            System.out.println(i);</span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<h3 id="五、for-each"><a href="#五、for-each" class="headerlink" title="五、for-each"></a>五、for-each</h3><p>增强for，必须是实现java.lang.Iterable接口，重写iterator</p>
<p>格式：for(类型 临时变量：容器变量){  循环体 }</p>
<p>​            没有增加删除方法,只能遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] s=&#123;<span class="string">&quot;哦哦&quot;</span>,<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;ss&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(String s1:s)&#123;</span><br><span class="line">    System.out.println(s1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="六、Collections"><a href="#六、Collections" class="headerlink" title="六、Collections"></a>六、Collections</h3><blockquote>
<p>Collections:是集合进行工具操作的类，例如集合排序和二分查找等</p>
<p>Collection:是单列集合的父类，有List和Set的子接口</p>
</blockquote>
<p>sort(list) 自然排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list);</span><br></pre></td></tr></table></figure>

<p>binarySearch(list,key) 二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> s=Collections.binarySearch(list,<span class="number">125</span>);</span><br></pre></td></tr></table></figure>

<p>synchronizedXXX(XXX):对线程不安全，改为线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List li=Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure>



<p>max()  :查找集合的最大值</p>
<p>reverse(list):进行反转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.reverse(list);</span><br></pre></td></tr></table></figure>

<p>shuffle(list):元素随机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.shuffle(list);</span><br></pre></td></tr></table></figure>



<img src="https://csn.damyoung.cn/image-20200731223511191.png" alt="image-20200731223511191" style="zoom:67%;" />

]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>ssm整合</title>
    <url>/2020/11/15/06SSM%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<h2 id="搭建整合的环境"><a href="#搭建整合的环境" class="headerlink" title="搭建整合的环境"></a>搭建整合的环境</h2><h3 id="创建Spring项目"><a href="#创建Spring项目" class="headerlink" title="创建Spring项目"></a>创建Spring项目</h3><p>创建pojo,mapper,service,controller模块</p>
<a id="more"></a>

<h4 id="配置pom-xml"><a href="#配置pom-xml" class="headerlink" title="配置pom.xml"></a>配置pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 切面依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        aspectj是一个AOP框架，本身是基于静态代理，对java代码进行AOP编译，本身是一门语言，拥有专门的编译器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        Spring 只是使用了与 AspectJ 5 一样的注解，但仍然没有使用 AspectJ 的编译器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        junit测试框架  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.40<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mangofactory/swagger-springmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mangofactory<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-springmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--       将JavaBean转化为json格式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> 2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--ibeetl视图解析器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.ibeetl/beetl --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.ibeetl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beetl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        cglib代理，字节码库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib-integration-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        文件上传--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置tomcat容器"><a href="#配置tomcat容器" class="headerlink" title="配置tomcat容器"></a>配置tomcat容器</h4><h3 id="Spring环境"><a href="#Spring环境" class="headerlink" title="Spring环境"></a>Spring环境</h3><p>创建applicationContext.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架</span></span><br><span class="line"><span class="comment">去管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置要忽略的注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--	druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    &amp;lt;!&amp;ndash;	用来操作数据源的操作模板 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=falseTemplate&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--	事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    1、配置事务增强 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当方法被切点选中之后，不是直接被通知，还要过一次筛选 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 要增强的方法,query*开头的方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;select*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPC&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* dm.demo..*.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--		事务引用+切面引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPC&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC环境"><a href="#SpringMVC环境" class="headerlink" title="SpringMVC环境"></a>SpringMVC环境</h3><ol>
<li>在web.xml中配置<code>DispatcherServlet</code>前端控制器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    springMVC核心类</span></span><br><span class="line"><span class="comment">        配置前端控制器</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     配置Servlet初始化参数,加载spring-mvc配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        启动服务器，创建该servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        所有请求交由springMVC的前端控制器DispatcherServlet处理</span></span><br><span class="line"><span class="comment">        / 静态动态web资源</span></span><br><span class="line"><span class="comment">        /* 动态web资源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在web.xml中配置<code>DispatcherServlet</code>过滤器解决中文乱码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置解决中文乱码的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写springmvc.xml配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描整个工程，但是只处理controller    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;dm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    开启mvc的注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启默认的对静态资源文件访问支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    默认的解析jsp的视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/web/WEB-INF/jsp/&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jackson2HttpMessageConverter&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--               添加消息转化器--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;jackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最大文件大小(单位KB) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1048576&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    配置异常处理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;dm.demo.exception.SysExceptionResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring整合SpringMVC框架"><a href="#Spring整合SpringMVC框架" class="headerlink" title="Spring整合SpringMVC框架"></a>Spring整合SpringMVC框架</h2><ol>
<li>在controller中能成功调用service对象中的方法</li>
<li>在项目启动时，就去applicationContext.xml配置文件，在web.xml中配置<code>ContextLoaderListener</code>监听器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-</span>	 <span class="attr">class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listenerclass</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置加载类路径的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring整合MyBatis框架"><a href="#Spring整合MyBatis框架" class="headerlink" title="Spring整合MyBatis框架"></a>Spring整合MyBatis框架</h2><ol>
<li>编写mybatisconfig.xml配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--改变MyBatis运行时行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        开启赖加载功能--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        关闭积极的懒加载 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        二级缓存--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    自定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        单个别名定义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;dm.demo.project.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置mybatis的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--            配置连接数据库的信息，用的是数据源(连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring1?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;86795462m&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    映射器 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;mappers&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;mapper resource=&quot;mappers/OrdersMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/mappers&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写mapper接口层，mappers.xml配置文件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrdersMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Orders <span class="title">queryOrdersByUserId</span><span class="params">(<span class="meta">@Param(value = &quot;userid&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dm.demo.project.mapper.OrdersMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryOrdersByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">resultType</span>=<span class="string">&quot;dm.demo.project.pojo.Orders&quot;</span>&gt;</span></span><br><span class="line">                select *from orders where user_id=#&#123;userid&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><p>把SqlMapConfig.xml配置文件中的内容配置到applicationContext.xml配置文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--整合mybatis配置文件到spring--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        整合dataSource数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            整合setting对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        扫描classpath下mapper文件夹中所有xml--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        整合mappers映射器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath*:mappers/**/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        可以加载mybatis配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;mybatis-spring:scan base-package=&quot;dm.demo.**.mapper&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dm.demo.**.mapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;import resource=&quot;applicationContext-bean.xml&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://csn.damyoung.cn/image-20201223125210018.png" alt="image-20201223125210018"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2020/11/11/03Servlet/</url>
    <content><![CDATA[<p><strong>URL</strong>是统一资源定位符，对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。</p>
<p>基本URL包含模式（或称协议）、服务器名称（或IP地址）、路径和文件名</p>
<p>如“协议：//授权/路径?查询”。</p>
<p><strong>URI：</strong>不包括http 和localhost</p>
<ul>
<li><strong>封装JavaBean对象，属性要与构造方法相同，不然会出NullPointException</strong></li>
</ul>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><blockquote>
<p>为保证线程安全，不要为Servlet设置成员变量，这种没有任何成员变量的类是线程安全的</p>
<p>因为成员变量保存的数据也可以成为状态信息，没有成员变量称为【无状态】</p>
</blockquote>
<p>是运行在Web服务器的小型Java程序，即<strong>服务器端小应用程序</strong></p>
<p>通过HTTP(超文本传输协议) <strong>接收和响应Web客户端</strong>的请求</p>
<h3 id="编写Servlet程序"><a href="#编写Servlet程序" class="headerlink" title="编写Servlet程序"></a>编写Servlet程序</h3><p>1、实现Servlet接口</p>
<p><img src="https://csn.damyoung.cn/image-20200911090821515.png" alt="image-20200911090821515"></p>
<p>2、修改web.xml文件</p>
<p><img src="https://csn.damyoung.cn/image-20200911091443831.png" alt="image-20200911091443831"></p>
<p>3、部署到tomcat服务器</p>
<p>4、测试 <a href="http://localhost:8080/demo1">http://localhost:8080/demo1</a></p>
<h3 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h3><p>实例化–初始化–服务–销毁</p>
<ul>
<li>init：只会调用一次，在创建servlet实例的时候才会创建</li>
<li>service：进行数据处理，只要接受一次请求，就会调用一次</li>
<li>destroy：销毁servlet对象时调用。停止服务器或重新部署web应用时</li>
</ul>
<img src="https://csn.damyoung.cn/image-20200911093556913.png" alt="image-20200911093556913" style="zoom: 80%;" />

<img src="https://csn.damyoung.cn/image-20200911093611285.png" alt="image-20200911093611285" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20200911093623975.png" alt="image-20200911093623975" style="zoom:67%;" />

<p><img src="https://csn.damyoung.cn/image-20200911093654231.png" alt="image-20200911093654231"></p>
<h3 id="2、Servlet创建方式"><a href="#2、Servlet创建方式" class="headerlink" title="2、Servlet创建方式"></a>2、Servlet创建方式</h3><p>1、实现javax.servlet.Servlet接口</p>
<p>2、继承javax.servlet.GenericServlet类（适配器模式）</p>
<p><img src="https://csn.damyoung.cn/image-20200911102435492.png" alt="image-20200911102435492"></p>
<p>3、继承javax.servlet.http.HttpServlet类（模板方法模式）</p>
<ul>
<li>Servlet–GenericServlet–HttpServlet</li>
</ul>
<img src="https://csn.damyoung.cn/image-20200911112518725.png" alt="image-20200911112518725" style="zoom:80%;" />

<h4 id="接收请求和响应"><a href="#接收请求和响应" class="headerlink" title="接收请求和响应"></a>接收请求和响应</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收数据</span></span><br><span class="line">String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String password=request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">System.out.println(request.getRemoteAddr()+username+<span class="string">&quot;..&quot;</span>+password);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应数据</span></span><br><span class="line"><span class="comment">//字节流</span></span><br><span class="line">PrintWriter out=response.getWriter();</span><br><span class="line">out.write(<span class="string">&quot;获取数据成功&quot;</span>);</span><br><span class="line"> <span class="comment">//字符流</span></span><br><span class="line">ServletOutputStream out=response.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;获取数据成功&quot;</span>.getBytes());</span><br></pre></td></tr></table></figure>

<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器默认使用ISO-8859-1</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="映射路径"><a href="#映射路径" class="headerlink" title="映射路径"></a>映射路径</h4><p>匹配顺序：精确匹配&gt;路径匹配&gt;扩展名匹配&gt;缺省匹配</p>
<p>（1）配置多个映射路径</p>
<img src="https://csn.damyoung.cn/image-20200911100234541.png" alt="image-20200911100234541" style="zoom:80%;" />

<p>（2）通配符</p>
<p><img src="https://csn.damyoung.cn/image-20200911100832172.png" alt="image-20200911100832172"></p>
<ul>
<li><p>*<strong>.</strong>    以任意路径映射到这个servlet， 如 xx.</p>
</li>
<li><p>*<em>/**</em>     任意路径映射到这个servlet，    如  /xxxx</p>
</li>
<li><p>*<em>/action/**</em>           以  /action 下的任意路径的请求都可以访问</p>
</li>
</ul>
<p>（3）优先级</p>
<p>绝对匹配&gt;/开头匹配&gt;扩展名方式匹配</p>
<h4 id="servlet自动加载"><a href="#servlet自动加载" class="headerlink" title="servlet自动加载"></a>servlet自动加载</h4><p>servlet只有在第一次被访问的时候才会加载，这肯定会造成第一个访问的人访问时间较长，因为他需要等待servlet完成加载</p>
<img src="https://csn.damyoung.cn/image-20200911110306560.png" alt="image-20200911110306560" style="zoom:80%;" />

<h3 id="3、servlet配置方式"><a href="#3、servlet配置方式" class="headerlink" title="3、servlet配置方式"></a>3、servlet配置方式</h3><h4 id="（1）在web-xml文件中配置"><a href="#（1）在web-xml文件中配置" class="headerlink" title="（1）在web.xml文件中配置"></a>（1）在web.xml文件中配置</h4><h4 id="（2）注解方式"><a href="#（2）注解方式" class="headerlink" title="（2）注解方式"></a>（2）注解方式</h4><p>@WebServlet（”/xxx”）<strong>必须加上斜杆</strong></p>
<p>value等价urlPatterns 类型 String[]   可以使用数组方式：urlPatterns={“/servlet/url1”,”/servlet/url2”}</p>
<p><img src="https://csn.damyoung.cn/image-20200911105435675.png" alt="image-20200911105435675"></p>
<p>访问/demo2的时候，服务器同样就会将处理交由Servlet1进行处理</p>
<h3 id="4、Servlet对象"><a href="#4、Servlet对象" class="headerlink" title="4、Servlet对象"></a>4、Servlet对象</h3><p>HttpServletRequest 请求对象：获取请求信息</p>
<p>HttpServletResponse 响应对象：设置响应对象</p>
<h4 id="（1）ServletConfig"><a href="#（1）ServletConfig" class="headerlink" title="**（1）ServletConfig  **"></a>**（1）ServletConfig  **</h4><h5 id="获取servlet配置对象"><a href="#获取servlet配置对象" class="headerlink" title="获取servlet配置对象"></a><strong>获取servlet配置对象</strong></h5><ul>
<li>getInitParameter() 根据参数名获取参数值</li>
<li>getInitParameterNames()  获取所有参数</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200911115059752.png" alt="image-20200911115059752"></p>
<h5 id="得到ServletContext对象"><a href="#得到ServletContext对象" class="headerlink" title="得到ServletContext对象"></a>得到ServletContext对象</h5><h4 id="（2）ServletContext"><a href="#（2）ServletContext" class="headerlink" title="**（2）ServletContext **"></a>**（2）ServletContext **</h4><p><strong>application域对象，在一定范围内，使多个Servlet共享数据</strong></p>
<p>又叫Servlet上下文，代表当前整个应用程序，Web服务器启动时，会为每一个Web应用程序创建的一个共享的存储区域，在服务器启动时创建，关闭时销毁</p>
<h5 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方法：</span></span><br><span class="line">ServletContext application = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">//第二种方式：</span></span><br><span class="line">ServletContext application2 = getServletConfig().getServletContext();</span><br><span class="line"><span class="comment">//第三种方法：通过session获取,常用</span></span><br><span class="line">ServletContext application3 = request.getSession().getServletContext();</span><br><span class="line"><span class="comment">//第四种方式：通过Request，最常用</span></span><br><span class="line">ServletContext application4 = request.getServletContext();</span><br></pre></td></tr></table></figure>

<h5 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取路径信息(上下文路径）</span></span><br><span class="line">String path3 = application.getContextPath();<span class="comment">//项目根路径</span></span><br><span class="line"><span class="comment">//在上下文存储信息</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;welcome&quot;</span>,<span class="string">&quot;在其他页面获取上下文也可以读到&quot;</span>);</span><br><span class="line"><span class="comment">//读取上下文信息</span></span><br><span class="line">Object attribute = application.getAttribute(<span class="string">&quot;welcome&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已知相对路径，求绝对路径</span></span><br><span class="line">ServletContext servletContext=<span class="keyword">this</span>.getServletContext();</span><br><span class="line">System.out.println(servletContext.getRealPath(<span class="string">&quot;web\\login.html&quot;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.getServletContext().setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">Object attribute = <span class="keyword">this</span>.getServletContext().getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">resp.getWriter().write(attribute.toString());</span><br></pre></td></tr></table></figure>

<h4 id="（3）Http-Servlet-response"><a href="#（3）Http-Servlet-response" class="headerlink" title="（3）Http Servlet response"></a>（3）Http Servlet response</h4><p><strong>HttpServletResponse</strong>对象代表服务器的响应，封装了向客户端<strong>发送数据、发送响应头、发送响应状态码</strong></p>
<h5 id="跳转刷新"><a href="#跳转刷新" class="headerlink" title="跳转刷新"></a>跳转刷新</h5><p><strong>response.setHeader(“refresh”,” ?; url=   “)</strong></p>
<p><strong>url为绝对路径</strong></p>
<ul>
<li><strong>发送http头</strong>，控制浏览器定时刷新网页</li>
<li>输出一个随机数，控制浏览器每2s刷新一次</li>
<li>利用Refresh刷新到其他组件</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200913151857738.png" alt="image-20200913151857738"></p>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h5><p><strong>response.sendRedirect()</strong></p>
<p><strong>实现原理：</strong>302/307状态码和location即可实现重定向</p>
<p><strong>当一个web资源收到客服端请求后，通知客户端去访问另外一个web资源，称为请求重定向</strong></p>
<ul>
<li>客服端发出2次请求，服务端的俩个程序有各自的请求和响应对象，地址栏是变换的</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200913161050799.png" alt="image-20200913161050799"></p>
<p><img src="https://csn.damyoung.cn/image-20200913161103773.png" alt="image-20200913161103773"></p>
<h4 id="（4）HttpServletRequest"><a href="#（4）HttpServletRequest" class="headerlink" title="（4）HttpServletRequest"></a>（4）HttpServletRequest</h4><p><strong>request作为web资源，只能是转发，重定向无效</strong></p>
<p><strong>域对象</strong></p>
<p>代表客户端的请求，当客户端通过Http协议访问服务器时，Http请求头中的所有信息都封装在这个对象中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(request.getMethod());</span><br><span class="line">System.out.println(request.getRequestURL());</span><br><span class="line">System.out.println(request.getRequestURI());</span><br><span class="line">System.out.println(request.getContextPath());</span><br><span class="line">System.out.println(request.getQueryString());</span><br><span class="line"><span class="comment">//返回发出请求的客户机的IP地址</span></span><br><span class="line">System.out.println(request.getRemoteAddr());</span><br><span class="line"><span class="comment">//返回发出请求的客户机的 完整主机名</span></span><br><span class="line">System.out.println(request.getRemoteHost());</span><br><span class="line"><span class="comment">//返回发出请求的客户机的 网络端口号</span></span><br><span class="line">System.out.println(request.getRemotePort());</span><br><span class="line"></span><br><span class="line"><span class="comment">//web服务器的ip地址</span></span><br><span class="line">System.out.println(request.getLocalAddr());</span><br><span class="line"><span class="comment">//web服务器的主机名</span></span><br><span class="line">System.out.println(request.getLocalName());</span><br></pre></td></tr></table></figure>

<h5 id="接收请求"><a href="#接收请求" class="headerlink" title="接收请求"></a>接收请求</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">String name=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String pwd=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">resp.getWriter().write(name);</span><br><span class="line">resp.getWriter().write(pwd);</span><br><span class="line">System.out.println(<span class="string">&quot;用户名&quot;</span>+name+<span class="string">&quot;密码&quot;</span>+pwd);</span><br></pre></td></tr></table></figure>

<h5 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h5><p>路径必须为相对路径，加上/  </p>
<p><strong>getRequestDispatcher(String path)</strong> 参数表示传到哪里去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> resp.getWriter().write(<span class="string">&quot;工商局收到老汉提交的资料&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="comment">//转发</span></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;RequestSendDemo2&quot;</span>).forward(req, resp);</span><br><span class="line">resp.getWriter().write(<span class="string">&quot;工商局收到审批文件，工商再办证给老汉&lt;/br&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h6 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h6><p>会先清空用于存放响应正文数据的缓冲区，源组件生成的响应结果不会被发送到客户端，只有目标组件生成的响应结果才会发送到客户端</p>
<h6 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h6><p><img src="https://csn.damyoung.cn/image-20200914164513879.png" alt="image-20200914164513879"></p>
<h4 id="（5）转发与重定向"><a href="#（5）转发与重定向" class="headerlink" title="（5）转发与重定向"></a>（5）转发与重定向</h4><p><strong>转发</strong></p>
<ul>
<li>A要跳转到C网页，A需要先请求到B，B带领着A去请求C，相当于是A<strong>只请求了一次</strong>。</li>
<li>请求的网址不改变，请求的次数一次，可后退，刷新重新提交表单</li>
<li>服务器行为，只做一次访问请求，<strong>浏览器地址不变</strong></li>
</ul>
<p><strong>重定向</strong></p>
<ul>
<li>A要请求C，A先请求B，B把C的网址给到A，A再去请求C，则A<strong>请求了2次</strong></li>
<li>请求的网址改变，请求次数两次，不可后退，刷新不变</li>
<li>客户端行为(浏览器重新访问)、至少做两次访问请求、<strong>浏览器地址改变</strong></li>
</ul>
<h3 id="5、线程安全"><a href="#5、线程安全" class="headerlink" title="5、线程安全"></a>5、线程安全</h3><p><strong>每次请求都会创建一个线程</strong>。如果多人同时请求，就会存在多个线程操作一个Servlet对象，如果在对应的方法中操作了成员变量，就会产生线程安全问题</p>
<ul>
<li>将存在线程安全问题的代码放在同步代码块中synchronized</li>
<li>尽可能使用基本不变量，防止使用成员变量</li>
</ul>
<h3 id="6、过滤器"><a href="#6、过滤器" class="headerlink" title="6、过滤器"></a>6、过滤器</h3><blockquote>
<p>实现权限访问控制、过滤敏感词汇、压缩响应信息</p>
<p><strong>实现过滤拦截，放行后，若不是重定向，则request转发到 受拦截的URI地址上</strong></p>
</blockquote>
<h4 id="6-1-API"><a href="#6-1-API" class="headerlink" title="6.1 API"></a>6.1 API</h4><ul>
<li>destroy()  销毁</li>
<li>doFilter()  每次访问执行一次</li>
<li>init()  初始化</li>
</ul>
<h4 id="6-2-配置过滤器"><a href="#6-2-配置过滤器" class="headerlink" title="6.2 配置过滤器"></a>6.2 配置过滤器</h4><p><strong>注解：</strong>@WebFilter(“/yourFilter”)</p>
<p><strong>xml文件：</strong></p>
<p><img src="https://csn.damyoung.cn/image-20200913205457410.png" alt="image-20200913205457410"></p>
<h4 id="6-3-多个过滤器执行顺序"><a href="#6-3-多个过滤器执行顺序" class="headerlink" title="6.3 多个过滤器执行顺序"></a>6.3 多个过滤器执行顺序</h4><p>注解优先级别设定</p>
<p>在xml中，排前面的<code>filter-mapping</code>优先执行</p>
<p>在注解中按照类名的<strong>字符串排序</strong>进行作用</p>
<h4 id="6-4-登录过滤"><a href="#6-4-登录过滤" class="headerlink" title="6.4 登录过滤"></a>6.4 登录过滤</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    HttpServletRequest req=(HttpServletRequest)servletRequest;</span><br><span class="line">    HttpServletResponse resp= (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得请求的URI</span></span><br><span class="line">    String uri = req.getRequestURI();</span><br><span class="line">    System.out.println(uri);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果请求是以下uri时,则请求直接放行,其他请求一律要进行登录验证，防止为授权访问</span></span><br><span class="line">    <span class="comment">//1、User非空说明登录验证成功,是正确的登录用户(登录验证已经在LoginServlet进行),直接放行即可</span></span><br><span class="line">    <span class="comment">//2、为空说明非法登录或是登录错误用户</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">&quot;/shop/login&quot;</span>.equals(uri) || <span class="string">&quot;/shop/login.jsp&quot;</span>.equals(uri)))&#123;</span><br><span class="line">        User user = (User) req.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//已经登录都放行</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没有session，说明是非法</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;请先登录!&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//资源放行，只有这句话执行才能继续访问</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-4-2-登录记住账号密码-转发"><a href="#6-4-2-登录记住账号密码-转发" class="headerlink" title="6.4.2 登录记住账号密码 转发"></a>6.4.2 登录记住账号密码 转发</h5><ul>
<li>LoginServlet设置Cookie</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cookie记住用户名</span></span><br><span class="line">Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">String remember = req.getParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (remember!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    cookie1.setMaxAge(<span class="number">60</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    cookie1.setMaxAge(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">resp.addCookie(cookie1);</span><br></pre></td></tr></table></figure>

<p><strong>过滤器拦截放行，通过request转发传递Cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie:cookies)&#123;</span><br><span class="line">        <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">            String username = cookie.getValue();</span><br><span class="line">            request.setAttribute(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line"></span><br><span class="line">            String checkState = <span class="string">&quot;checked=&#x27;checked&#x27;&quot;</span>;</span><br><span class="line">            <span class="comment">//设置request域</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;checkState&quot;</span>, checkState);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//放行 相当于转发，表示重定向，request的值都能传递过去</span></span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure>

<h5 id="6-4-3-自动登录"><a href="#6-4-3-自动登录" class="headerlink" title="6.4.3 自动登录"></a>6.4.3 自动登录</h5><ul>
<li>loginServlet 设置Cookie</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Cookie自动登录</span></span><br><span class="line"><span class="comment">//admin&amp;123</span></span><br><span class="line">Cookie cookie2=<span class="keyword">new</span> Cookie(<span class="string">&quot;user&quot;</span>, user.getUsername()+<span class="string">&quot;&amp;&quot;</span>+user.getPassword());</span><br><span class="line">String autologin=req.getParameter(<span class="string">&quot;autologin&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (autologin!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    cookie2.setMaxAge(<span class="number">60</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    cookie2.setMaxAge(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">resp.addCookie(cookie2);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie:cookies)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;user&quot;</span>.equals(cookie.getName())) &#123;</span><br><span class="line">                    String username=cookie.getValue().split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">                    String password = cookie.getValue().split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">                    User user=<span class="keyword">new</span> LoginService().login(username,password);</span><br><span class="line">                    <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        HttpSession session = req.getSession();</span><br><span class="line">                        session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">                        req.getRequestDispatcher(<span class="string">&quot;bookStoreShow1&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure>

<h4 id="6-5-过滤器处理浏览器缓存"><a href="#6-5-过滤器处理浏览器缓存" class="headerlink" title="6.5 过滤器处理浏览器缓存"></a>6.5 过滤器处理浏览器缓存</h4><p>当向服务器请求html界面时，第一次服务器会创建一个缓存区，将资源放入缓存区，当客户端第二次进行访问时，服务器根据时间判断如果是同一个资源且没有更新，就直接返回缓存区资源并且返回<strong>304状态码</strong>，同时浏览器也会在本地缓存资源，当关闭浏览器重新打开或打开新页面时进行访问时，浏览器会从<strong>本地缓存查找</strong>，如果有就返回<code>200(from disk cache)</code>,再次刷新返回304</p>
<p><strong>避免浏览器缓存的方法</strong>：浏览器还是会缓存，只是控制每次都是第一次访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始执行过滤&quot;</span>);</span><br><span class="line">    HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">    HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line">    response.setDateHeader(<span class="string">&quot;Expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">    chain.doFilter(req, resp);<span class="comment">//资源放行，只有这句话执行才能继续访问</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;过滤完成&quot;</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<h3 id="7、封装表单元素"><a href="#7、封装表单元素" class="headerlink" title="7、封装表单元素"></a>7、封装表单元素</h3><h4 id="（1）getParameter"><a href="#（1）getParameter" class="headerlink" title="（1）getParameter"></a>（1）getParameter</h4><p><img src="https://csn.damyoung.cn/image-20200914001911034.png" alt="image-20200914001911034"></p>
<h4 id="（2）getParameterMap"><a href="#（2）getParameterMap" class="headerlink" title="（2）getParameterMap"></a>（2）getParameterMap</h4><p><img src="https://csn.damyoung.cn/image-20200914001945037.png" alt="image-20200914001945037"></p>
<h4 id="（3）导入BeanUtils"><a href="#（3）导入BeanUtils" class="headerlink" title="（3）导入BeanUtils"></a>（3）导入BeanUtils</h4><p><strong>实体类变量应该与表单一致</strong></p>
<p>导入三个包（将包放在tomcat/bin目录下）</p>
<p>commons-beautils</p>
<p>commons-collections</p>
<p>commons-logging</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Emp emp=<span class="keyword">new</span> Emp();</span><br><span class="line">System.out.println(<span class="string">&quot;封装数据前&quot;</span>+emp);</span><br><span class="line">BeanUtils.populate(emp,req.getParameterMap());</span><br><span class="line">System.out.println(<span class="string">&quot;封装数据后&quot;</span>+emp);</span><br></pre></td></tr></table></figure>

<h4 id="（4）getParameter用法"><a href="#（4）getParameter用法" class="headerlink" title="（4）getParameter用法"></a>（4）getParameter用法</h4><ul>
<li>获取表单name属性</li>
<li>获取超链接属性</li>
</ul>
<blockquote>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;delBook?id=$&#123;li.id&#125;&quot; onclick=&quot;return confirm(&#x27;确认删除$&#123;li.name&#125;?&#x27;)&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="8、域对象"><a href="#8、域对象" class="headerlink" title="8、域对象"></a>8、域对象</h3><p>之所以他们是域对象，原因就是他们都内置了<strong>map集合</strong>，都有<code>setAttribute getAttribute</code>方法。 他们都有自己固定的生命周期和作用域。    </p>
<h4 id="（1）ServletContext"><a href="#（1）ServletContext" class="headerlink" title="（1）ServletContext"></a>（1）ServletContext</h4><p>Application</p>
<p>生命周期：<strong>随着服务器或Web应用</strong></p>
<p>作用范围：整个Web应用</p>
<p>作用：在不同Servlet之间转发</p>
<ul>
<li>通过重定向和转发传递数据</li>
</ul>
<h4 id="（2）Session域"><a href="#（2）Session域" class="headerlink" title="（2）Session域"></a>（2）Session域</h4><p>生命周期：调用equest.getSession() 方法时，服务器会检查是否已经有对应的session,如果没有就在内存 中创建一个session并返回。<strong>浏览器关闭也会被销毁，被浏览器独享</strong>。</p>
<p>作用范围：一次会话（可为多个Servlet共享）</p>
<h4 id="（3）request域"><a href="#（3）request域" class="headerlink" title="（3）request域"></a>（3）request域</h4><p>生命周期:<strong>请求结束</strong>，request生命结束</p>
<p>作用范围：<strong>整个请求链</strong>，只能是在<strong>一次转发有效</strong></p>
<p><img src="https://csn.damyoung.cn/image-20200914164605601.png" alt="image-20200914164605601"></p>
<p><img src="https://csn.damyoung.cn/image-20200914164615783.png" alt="image-20200914164615783"></p>
<h4 id="（4）pageContext域"><a href="#（4）pageContext域" class="headerlink" title="（4）pageContext域"></a>（4）pageContext域</h4><p>生命周期：对JSP请求时开始，<strong>当响应结束时销毁</strong></p>
<p>作用范围：整个JSP页面，是四大作用域中最小的一个，即超过这个页面就不能够使用了，</p>
<p><strong>但可以操作其他三个域对象</strong></p>
<ul>
<li>俩种方式来操作Request对象</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20200916143001663.png" alt="image-20200916143001663"></p>
<h3 id="9、文件的上传和下载"><a href="#9、文件的上传和下载" class="headerlink" title="9、文件的上传和下载"></a>9、文件的上传和下载</h3><p>导入jar包 commons-fileupload、commons-io-2.2</p>
<p><strong>上传和下载文件均需要绝对路径</strong></p>
<h4 id="9-1-上传"><a href="#9-1-上传" class="headerlink" title="9.1 上传"></a>9.1 上传</h4><p><strong>由于设置为文件可上传，故传统方式无法获得！！！！！！！！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">String age=req.getParameter(<span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><blockquote>
<ul>
<li><p>设置表单可上传&lt;  form enctype=”multipart/form-data” action=”upload” method=”post”&gt;</p>
</li>
<li><p>UploadServlet</p>
<ul>
<li><p>判断表单是否支持文件上传 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断表单是否支持文件上传,即enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line"><span class="keyword">boolean</span> isMutipart=ServletFileUpload.isMultipartContent(req);</span><br><span class="line"><span class="keyword">if</span> (!isMutipart)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;表单必须设置为multipart/form-data&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建ServletFileUpload对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建工厂类，用于创建ServletFileUpload对象</span></span><br><span class="line">DiskFileItemFactory factory=<span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload servletFileUpload=<span class="keyword">new</span> ServletFileUpload(factory);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历获得表单文件(req.getParameter() 不可行，获得不到数据)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;FileItem&gt; files=servletFileUpload.parseRequest(req);</span><br><span class="line"> <span class="keyword">for</span> (FileItem fileItem:files)&#123;</span><br><span class="line">     <span class="comment">//处理普通表单项</span></span><br><span class="line">     <span class="keyword">if</span> (fileItem.isFormField())&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>普通表单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得字段名username</span></span><br><span class="line">String filedName=fileItem.getFieldName();</span><br><span class="line"><span class="comment">//获得字段值:张三</span></span><br><span class="line">String fieldValue=fileItem.getString(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equals(filedName))&#123;</span><br><span class="line">    req.setAttribute(<span class="string">&quot;username&quot;</span>,fieldValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件表单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理文件表单项</span></span><br><span class="line"><span class="comment">//获取存储上传文件目录的绝对路径(服务器中的绝对路径)</span></span><br><span class="line">String uploadPath=getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="comment">//获取上传文件的名称</span></span><br><span class="line"><span class="comment">//文件名称可能带有客户端的路径 如:f:/pictures/xx.jpg</span></span><br><span class="line">String fileName=fileItem.getName();</span><br><span class="line"><span class="comment">//文件名称不带路径xx.jpg</span></span><br><span class="line">fileName= FilenameUtils.getName(fileName);</span><br><span class="line">      </span><br><span class="line"><span class="comment">//上传文件</span></span><br><span class="line">File uploadFile=<span class="keyword">new</span> File(uploadPath,fileName);</span><br><span class="line">fileItem.write(uploadFile);</span><br><span class="line">req.setAttribute(<span class="string">&quot;filename&quot;</span>,fileName);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">    PrintWriter out=resp.getWriter();</span><br><span class="line">    <span class="comment">//判断表单是否支持文件上传,即enctype=&quot;multipart/form-data&quot;</span></span><br><span class="line">    <span class="keyword">boolean</span> isMutipart=ServletFileUpload.isMultipartContent(req);</span><br><span class="line">    <span class="keyword">if</span> (!isMutipart)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;表单必须设置为multipart/form-data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建工厂类，用于创建ServletFileUpload对象</span></span><br><span class="line">    DiskFileItemFactory factory=<span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">    ServletFileUpload servletFileUpload=<span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">    <span class="comment">//解决上传表单中文乱码问题</span></span><br><span class="line">    servletFileUpload.setHeaderEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//限制上传文件的大小</span></span><br><span class="line">    <span class="comment">//表示单个文件最大不能超过500K</span></span><br><span class="line">    servletFileUpload.setFileSizeMax(<span class="number">500</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="comment">//表示多个上传文件合计最大不能超过1M</span></span><br><span class="line">    servletFileUpload.setSizeMax(<span class="number">1024</span>*<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;FileItem&gt; files=servletFileUpload.parseRequest(req);</span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem:files)&#123;</span><br><span class="line">            <span class="comment">//处理普通表单项</span></span><br><span class="line">            <span class="keyword">if</span> (fileItem.isFormField())&#123;</span><br><span class="line">                <span class="comment">//因为表单设置为文件可上传, 传统方法，无法获取数据</span></span><br><span class="line">                String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;11&quot;</span>+username);</span><br><span class="line">                String age=req.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获得字段名username</span></span><br><span class="line">                String filedName=fileItem.getFieldName();</span><br><span class="line">                <span class="comment">//获得字段值:张三</span></span><br><span class="line">                String fieldValue=fileItem.getString(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equals(filedName))&#123;</span><br><span class="line">                    req.setAttribute(<span class="string">&quot;username&quot;</span>,fieldValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;age&quot;</span>.equals(filedName))&#123;</span><br><span class="line">                    req.setAttribute(<span class="string">&quot;age&quot;</span>,fieldValue);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//处理文件表单项</span></span><br><span class="line">                <span class="comment">//获取存储上传文件目录的绝对路径(服务器中的绝对路径)</span></span><br><span class="line">                String uploadPath=getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">                System.out.println(uploadPath);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//获取上传文件的名称</span></span><br><span class="line">                <span class="comment">//文件名称可能带有客户端的路径 如:f:/pictures/xx.jpg</span></span><br><span class="line">                String fileName=fileItem.getName();</span><br><span class="line">                <span class="comment">//文件名称不带路径xx.jpg</span></span><br><span class="line">                fileName= FilenameUtils.getName(fileName);</span><br><span class="line"></span><br><span class="line">                File uploadFile=<span class="keyword">new</span> File(uploadPath,fileName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//上传文件</span></span><br><span class="line">                fileItem.write(uploadFile);</span><br><span class="line">                req.setAttribute(<span class="string">&quot;filename&quot;</span>,fileName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;success.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileUploadBase.FileSizeLimitExceededException e) &#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;errMsg&quot;</span>,<span class="string">&quot;文件过大，不能超过500K&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;upload.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (FileUploadBase.SizeLimitExceededException e)&#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;errMsg&quot;</span>,<span class="string">&quot;总文件过大，不能超过2M&quot;</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;upload.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-2-下载"><a href="#9-2-下载" class="headerlink" title="9.2 下载"></a>9.2 下载</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">头像:&lt;img src=<span class="string">&quot;upload/$&#123;filename&#125;&quot;</span> align=<span class="string">&quot;top&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;a href=&quot;download?filename=$&#123;filename&#125;&quot;&gt;下载&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>创建输入流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String fileName=req.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line"><span class="comment">//获取要下载的文件所在的目录</span></span><br><span class="line">String dir=getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line"><span class="comment">//创建输入流</span></span><br><span class="line">File file=<span class="keyword">new</span> File(dir,fileName);</span><br><span class="line">FileInputStream fileInputStream=<span class="keyword">new</span> FileInputStream(file);</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置浏览器–响应头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fileName= URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//设置响应头,控制浏览器下载该文件</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename&quot;</span>+fileName);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建输出流</span></span><br><span class="line">ServletOutputStream os=resp.getOutputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len=fileInputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line">fileOutputStream.close();</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="10、会话"><a href="#10、会话" class="headerlink" title="10、会话"></a>10、会话</h3><p>被浏览器独享的域对象，常用个人用户存储传递数据</p>
<h4 id="（1）Cookie"><a href="#（1）Cookie" class="headerlink" title="（1）Cookie"></a>（1）Cookie</h4><ul>
<li>客户端技术，程序把每个用户的数据以cookie的形式写给用户各自的浏览器。</li>
<li>当用户使用浏览器去访问服务器中的Web资源时，就会带着各自的数据去</li>
</ul>
<p><strong>Cookie是实则是Map存储，获取键<code>cookie.getName()</code> 获取值<code>cookie.getValue()</code>;</strong></p>
<p><strong>创建Cookie对象</strong> <strong>键值对</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;pwd&quot;</span>, pwd);</span><br></pre></td></tr></table></figure>

<p><strong>生命周期</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">cookie1.setMaxAge(<span class="number">60</span>);</span><br></pre></td></tr></table></figure>

<p><strong>添加cookie到浏览器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.addCookie(cookie);</span><br><span class="line">resp.addCookie(cookie1);</span><br></pre></td></tr></table></figure>

<p><strong>获取浏览器cookie</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies=req.getCookies();</span><br><span class="line"><span class="keyword">for</span> (Cookie cookie:cookies) &#123;</span><br><span class="line">    <span class="comment">//Cookie cookie = new Cookie(&quot;name&quot;, name);</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;name&quot;</span>.equals(cookie.getName()))&#123;</span><br><span class="line">        userName=cookie.getValue();</span><br><span class="line">        num=<span class="string">&quot;checked=&#x27;checked&#x27;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;pwd&quot;</span>.equals(cookie.getName()))&#123;</span><br><span class="line">        password=cookie.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="（2）HttpSession"><a href="#（2）HttpSession" class="headerlink" title="（2）HttpSession"></a>（2）HttpSession</h4><ul>
<li>服务器技术，为每一个用户的浏览器创建其独享的HttpSession对象</li>
<li>访问web资源时，由于session为用户浏览器独享，访问web资源时，将数据存放在各自的session中</li>
<li>访问其他Web资源时，取出在用户各自的session 为用户服务</li>
</ul>
<p><strong>Session中的数据可供当前会话中所有Servlet共享</strong>,常用于登录验证</p>
<p><img src="https://csn.damyoung.cn/image-20200915144801366.png" alt="image-20200915144801366"></p>
<p><img src="https://csn.damyoung.cn/image-20200915144814022.png" alt="image-20200915144814022"></p>
<h3 id="11、监听器"><a href="#11、监听器" class="headerlink" title="11、监听器"></a>11、监听器</h3><h2 id="Servlet技术"><a href="#Servlet技术" class="headerlink" title="Servlet技术"></a>Servlet技术</h2><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">searchBooks</span><span class="params">(String name,String category,String author,String minPrice,String maxPrice,</span></span></span><br><span class="line"><span class="function"><span class="params">                              String sales)</span></span>&#123;</span><br><span class="line">    StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    stringBuilder.append(<span class="string">&quot;select *from book where 1=1 &quot;</span>);</span><br><span class="line">    ArrayList list=<span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(name))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and name like ?&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;%&quot;</span>+name+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(category))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and category = ?&quot;</span>);</span><br><span class="line">        list.add(category);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(author))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and author like ?&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;%&quot;</span>+author+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(minPrice))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and price &gt;=?&quot;</span>);</span><br><span class="line">        list.add(minPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(maxPrice))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and price &lt;= ?&quot;</span>);</span><br><span class="line">        list.add(maxPrice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(sales))&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">&quot; and sales &gt;= ?&quot;</span>);</span><br><span class="line">        list.add(sales);</span><br><span class="line">    &#125;</span><br><span class="line">    String sql = stringBuilder.toString();</span><br><span class="line">    sql=sql+ <span class="string">&quot; order by id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    QueryRunner queryRunner=<span class="keyword">new</span> QueryRunner(DruidUtils.getDataSource());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queryRunner.query(sql,<span class="keyword">new</span> BeanListHandler&lt;&gt;(Book.class),list.toArray());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1、图片验证"><a href="#1、图片验证" class="headerlink" title="1、图片验证"></a>1、图片验证</h4><p>myweb3/login</p>
<ul>
<li>登录验证输入</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String code=req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HttpSession session=req.getSession();</span><br><span class="line">        String vcode=(String)session.getAttribute(<span class="string">&quot;vcode&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (code.equals(vcode))&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(username) &amp;&amp; <span class="string">&quot;123&quot;</span>.equals(password))&#123;</span><br><span class="line"><span class="comment">//                session.setAttribute(&quot;username&quot;,username);</span></span><br><span class="line"><span class="comment">//                resp.sendRedirect(&quot;home&quot;);</span></span><br><span class="line">                session.setAttribute(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;home.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                resp.setContentType(&quot;text/html; charset=UTF-8&quot;);</span></span><br><span class="line"><span class="comment">//                resp.getWriter().write(&quot;用户名或密码错误!3秒钟跳转到登录界面&quot;);</span></span><br><span class="line"><span class="comment">//                resp.setHeader(&quot;refresh&quot;,&quot;3;url=login.html&quot;);</span></span><br><span class="line">                String msg=<span class="string">&quot;账号密码输入错误&quot;</span>;</span><br><span class="line">                req.setAttribute(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//            resp.setContentType(&quot;text/html; charset=UTF-8&quot;);</span></span><br><span class="line"><span class="comment">//            resp.getWriter().write(&quot;验证码错误！3秒跳转到登录界面&quot;);</span></span><br><span class="line"><span class="comment">//            resp.setHeader(&quot;refresh&quot;,&quot;3;url=login2.html&quot;);</span></span><br><span class="line">            String msg=<span class="string">&quot;验证码错误&quot;</span>;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;msg&quot;</span>,msg);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成验证码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ValidCodeServlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/validCode&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValidCodeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 在内存中创建图象</span></span><br><span class="line">      <span class="keyword">int</span> width = <span class="number">120</span>, height = <span class="number">30</span>;</span><br><span class="line">      BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height,</span><br><span class="line">            BufferedImage.TYPE_INT_RGB);</span><br><span class="line">      <span class="comment">// 获取图形上下文</span></span><br><span class="line">      Graphics g = image.getGraphics();</span><br><span class="line">      <span class="comment">// 生成随机类</span></span><br><span class="line">      Random random = <span class="keyword">new</span> Random();</span><br><span class="line">      <span class="comment">// 设定背景色</span></span><br><span class="line">      g.setColor(<span class="keyword">new</span> Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">      g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">      <span class="comment">// 设定字体</span></span><br><span class="line">      g.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;Times New Roman&quot;</span>, Font.PLAIN, <span class="number">23</span>));</span><br><span class="line">      <span class="comment">// 画边框</span></span><br><span class="line">      g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line">      g.drawRect(<span class="number">0</span>, <span class="number">0</span>, width - <span class="number">1</span>, height - <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></span><br><span class="line">      g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> x = random.nextInt(width);</span><br><span class="line">         <span class="keyword">int</span> y = random.nextInt(height);</span><br><span class="line">         <span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">         <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">         g.drawLine(x, y, x + xl, y + yl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 取随机产生的认证码(4位数字)</span></span><br><span class="line">      StringBuilder sRand = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">         <span class="keyword">int</span> type = random.nextInt(<span class="number">3</span>);</span><br><span class="line">         <span class="comment">//产生一位随机的数字，大写或小与字母</span></span><br><span class="line">         String rand = getCaptchaPath(type);</span><br><span class="line">         sRand.append(rand);</span><br><span class="line">         <span class="comment">// 将认证码显示到图象中</span></span><br><span class="line">         g.setColor(<span class="keyword">new</span> Color(<span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random</span><br><span class="line">               .nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>)));</span><br><span class="line">         <span class="comment">// 调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></span><br><span class="line">         g.drawString(rand, <span class="number">26</span> * i + <span class="number">14</span>, <span class="number">23</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      HttpSession session=request.getSession();</span><br><span class="line">      <span class="comment">//将验证码存入session中</span></span><br><span class="line">      session.setAttribute(<span class="string">&quot;vcode&quot;</span>,sRand.toString());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 图象生效</span></span><br><span class="line">      g.dispose();</span><br><span class="line">      <span class="comment">// 输出图象到页面</span></span><br><span class="line">      ImageIO.write(image, <span class="string">&quot;JPEG&quot;</span>, response.getOutputStream());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getCaptchaPath</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">      String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      Random random = <span class="keyword">new</span> Random();</span><br><span class="line">      <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">         result = String.valueOf(random.nextInt(<span class="number">10</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="keyword">int</span> itmp = <span class="keyword">new</span> Random().nextInt(<span class="number">26</span>) + <span class="number">65</span>;</span><br><span class="line">         result = String.valueOf((<span class="keyword">char</span>) itmp);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> itmp = <span class="keyword">new</span> Random().nextInt(<span class="number">26</span>) + <span class="number">97</span>;</span><br><span class="line">         result = String.valueOf((<span class="keyword">char</span>) itmp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;<span class="comment">// 给定范围获得随机颜色</span></span><br><span class="line">      Random random = <span class="keyword">new</span> Random();</span><br><span class="line">      <span class="keyword">if</span> (fc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">         fc = <span class="number">255</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (bc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">         bc = <span class="number">255</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">      doGet(request, response);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、添加购物车"><a href="#2、添加购物车" class="headerlink" title="2、添加购物车"></a>2、添加购物车</h4><p>myweb3/bookshop</p>
<h4 id="3、分页查询"><a href="#3、分页查询" class="headerlink" title="3、分页查询"></a>3、分页查询</h4><ul>
<li>创建<code>PageBean</code>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNo;<span class="comment">// 当前第多少页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;<span class="comment">// 每页大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalItemCount;<span class="comment">// 总记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPageCount;<span class="comment">//总页数</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据载体,即当前页要显示的数据</span></span><br><span class="line"><span class="comment">     * 封装当前页的所有Book对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; data;</span><br></pre></td></tr></table></figure>

<ul>
<li>pagelist.jsp(数据来源，pageBean)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;序号&lt;ath&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;目录&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;库存&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;图片&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;类型&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;作者&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;sales&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;删除&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;修改&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;pageBean.data&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;li&quot;</span> varStatus=<span class="string">&quot;vs&quot;</span>&gt;</span><br><span class="line">        &lt;tr $&#123;vs.count%<span class="number">2</span>==<span class="number">1</span>? <span class="string">&quot;style=&#x27;background-color:yellow&#x27;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;detail&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;detail?id=$&#123;li.id&#125;&quot;</span>&gt;</span>$&#123;li.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.price&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.category&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.pnum&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/$&#123;li.imgurl&#125;&quot;</span>/&gt;</span></span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.description&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.author&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;li.sales&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;page?pageNo=$&#123;pageBean.pageNo==1?1:pageBean.pageNo-1&#125;&quot;</span>&gt;&amp;lt;&amp;lt;上一页&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    第$&#123;pageBean.pageNo&#125;页/共$&#123;pageBean.totalPageCount&#125;页&amp;nbsp;&amp;nbsp;总$&#123;pageBean.totalItemCount&#125;条记录&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;a href=<span class="string">&quot;page?pageNo=$&#123;pageBean.pageNo==pageBean.totalPageCount?pageBean.totalPageCount:pageBean.pageNo+1&#125;&quot;</span>&gt;下一页&amp;gt;&amp;gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>pageServlet</code>根据pageNo,pageSize得到<code>pageBean</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认第一页</span></span><br><span class="line"><span class="keyword">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">String pageIndex=req.getParameter(<span class="string">&quot;pageNo&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pageIndex !=<span class="keyword">null</span>)&#123;</span><br><span class="line">    pageNo=Integer.parseInt(pageIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置一页显示几页</span></span><br><span class="line"><span class="keyword">int</span> pageSize=<span class="number">5</span>;</span><br><span class="line">PageService pageService=<span class="keyword">new</span> PageService();</span><br><span class="line">PageBean pageBean=pageService.getPageBean(pageNo,pageSize);</span><br><span class="line">req.setAttribute(<span class="string">&quot;pageBean&quot;</span>,pageBean);</span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;pagelist.jsp&quot;</span>).forward(req, resp);</span><br></pre></td></tr></table></figure>

<ul>
<li><code>getPageBean(pageNo,pageSize)</code> dao层方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageBean <span class="title">getPageBean</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">    <span class="comment">//pageBean实体类</span></span><br><span class="line">    PageBean pageBean=<span class="keyword">new</span> PageBean();</span><br><span class="line">    pageBean.setPageNo(pageNo);</span><br><span class="line">    pageBean.setPageSize(pageSize);</span><br><span class="line">    <span class="comment">//获取记录总数</span></span><br><span class="line">    <span class="keyword">long</span> totalItemCount=bookDao.getTotalItemCount();</span><br><span class="line">    pageBean.setTotalItemCount((<span class="keyword">int</span>) totalItemCount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置页数</span></span><br><span class="line">    <span class="keyword">int</span> totalPageCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (totalItemCount&gt;<span class="number">0</span> &amp;&amp; pageSize&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        totalPageCount=(<span class="keyword">int</span>)Math.ceil(totalItemCount*<span class="number">1.0</span>/pageSize);</span><br><span class="line">        pageBean.setTotalPageCount(totalPageCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置每页记录的集合</span></span><br><span class="line">    List&lt;Book&gt; data=bookDao.showAllBook();</span><br><span class="line">    <span class="keyword">if</span> (pageNo&lt;totalPageCount)&#123;</span><br><span class="line">        pageBean.setData(data.subList((pageNo-<span class="number">1</span>)*pageSize,pageNo*pageSize));</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pageNo==totalPageCount)&#123;</span><br><span class="line">        <span class="comment">//最后一页</span></span><br><span class="line">        pageBean.setData(data.subList((pageNo-<span class="number">1</span>)*pageSize,data.size()));</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">&quot;超出页数范围&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="多条件查询-分页"><a href="#多条件查询-分页" class="headerlink" title="多条件查询+分页"></a>多条件查询+分页</h5><ul>
<li>前端得到多条件查询条件，查找符合条件的pageBean<ul>
<li>在分页条件要加上 <strong>查询条件</strong></li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;pageSearch&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    搜索图书:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图书关键字&quot;</span>/&gt;</span></span>&lt;br&gt;</span><br><span class="line">    搜索类别:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;category&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图书类别&quot;</span>/&gt;</span></span>&lt;br&gt;</span><br><span class="line">    作者:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入图书作者&quot;</span>/&gt;</span></span>&lt;br&gt;</span><br><span class="line">    价格区间:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;minPrice&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;最低价&quot;</span>/&gt;</span></span></span><br><span class="line">    到&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;maxPrice&quot;</span> placeholder=<span class="string">&quot;最高价&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">    销量大于:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sales&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;销量&quot;</span>/&gt;</span></span>&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;搜索&quot;</span>/&gt;&amp;nbsp&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;全部&quot;</span> onclick=<span class="string">&quot;location.href=&#x27;bookStoreShow1&#x27;&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty pageBean&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;table&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;序号&lt;ath&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;价格&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;目录&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;库存&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;图片&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;类型&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;作者&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;sales&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;删除&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;修改&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;pageBean.data&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;li&quot;</span> varStatus=<span class="string">&quot;vs&quot;</span>&gt;</span><br><span class="line">            &lt;tr $&#123;vs.count%<span class="number">2</span>==<span class="number">1</span>? <span class="string">&quot;style=&#x27;background-color:yellow&#x27;&quot;</span>:<span class="string">&quot;&quot;</span>&#125;&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.id&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;detail&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;detail?id=$&#123;li.id&#125;&quot;</span>&gt;</span>$&#123;li.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.price&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.category&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.pnum&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/$&#123;li.imgurl&#125;&quot;</span>/&gt;</span></span>&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.description&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.author&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;li.sales&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;page&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;pageSearch?pageNo=$&#123;pageBean.pageNo==1?1:pageBean.pageNo-1&#125; &amp;name=$&#123;name&#125; &amp;category=$&#123;category&#125;&amp;author=$&#123;author&#125;&amp;minPrice=$&#123;minPrice&#125;&amp;maxPrice=$&#123;maxPrice&#125;&amp;sales=$&#123;sales&#125;&quot;</span> &gt;&amp;lt;&amp;lt;上一页&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">    第$&#123;pageBean.pageNo&#125;页/共$&#123;pageBean.totalPageCount&#125;页&amp;nbsp;&amp;nbsp;总$&#123;pageBean.totalItemCount&#125;条记录&amp;nbsp;&amp;nbsp;</span><br><span class="line">    &lt;a href=<span class="string">&quot;pageSearch?pageNo=$&#123;pageBean.pageNo==pageBean.totalPageCount?pageBean.totalPageCount:pageBean.pageNo+1&#125;&amp;name=$&#123;name&#125;&amp;category=$&#123;category&#125;&amp;author=$&#123;author&#125;&amp;minPrice=$&#123;minPrice&#125;&amp;maxPrice=$&#123;maxPrice&#125;&amp;sales=$&#123;sales&#125;&quot;</span>&gt;下一页&amp;gt;&amp;gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>SearchPageServlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//1、第一次进入jsp查询并无pageNo属性，需要初始化</span></span><br><span class="line"><span class="comment">//2、分页时，通过获得pageNo属性，得到pageBean对象,显示数据</span></span><br><span class="line"><span class="keyword">int</span> pageNo=<span class="number">1</span>;</span><br><span class="line">String pageIndex=req.getParameter(<span class="string">&quot;pageNo&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (pageIndex!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    pageNo=Integer.parseInt(pageIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pageSize=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">String name=req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">String category=req.getParameter(<span class="string">&quot;category&quot;</span>);</span><br><span class="line">String author=req.getParameter(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">String minPrice=req.getParameter(<span class="string">&quot;minPrice&quot;</span>);</span><br><span class="line">String maxPrice=req.getParameter(<span class="string">&quot;maxPrice&quot;</span>);</span><br><span class="line">String sales=req.getParameter(<span class="string">&quot;sales&quot;</span>);</span><br><span class="line">PageService pageService=<span class="keyword">new</span> PageService();</span><br><span class="line">PageBean pageBean=pageService.getPageBean(pageNo,pageSize,name,category,author,minPrice,maxPrice,sales);</span><br><span class="line">System.out.println(pageBean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传递给jsp进行显示数据</span></span><br><span class="line">req.setAttribute(<span class="string">&quot;pageBean&quot;</span>,pageBean);</span><br><span class="line"></span><br><span class="line">req.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">req.setAttribute(<span class="string">&quot;category&quot;</span>,category);</span><br><span class="line">req.setAttribute(<span class="string">&quot;author&quot;</span>,author);</span><br><span class="line">req.setAttribute(<span class="string">&quot;minPrice&quot;</span>,minPrice);</span><br><span class="line">req.setAttribute(<span class="string">&quot;maxPrice&quot;</span>,maxPrice);</span><br><span class="line">req.setAttribute(<span class="string">&quot;sales&quot;</span>,sales);</span><br><span class="line"></span><br><span class="line">req.getRequestDispatcher(<span class="string">&quot;pageSearch.jsp&quot;</span>).forward(req, resp);</span><br></pre></td></tr></table></figure>

<ul>
<li>多条件查询</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageBean <span class="title">getPageBean</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize,String name,String category,String author,</span></span></span><br><span class="line"><span class="function"><span class="params">                            String minPrice,String maxPrice,String sales)</span></span>&#123;</span><br><span class="line">    <span class="comment">//pageBean实体类</span></span><br><span class="line">    PageBean pageBean=<span class="keyword">new</span> PageBean();</span><br><span class="line">    pageBean.setPageNo(pageNo);</span><br><span class="line">    pageBean.setPageSize(pageSize);</span><br><span class="line">    BookDao bookDao=<span class="keyword">new</span> BookDao();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取记录总数</span></span><br><span class="line">    <span class="keyword">long</span> totalItemCount=bookDao.getTotalItemCount(name,category,author,minPrice,maxPrice,sales);</span><br><span class="line">    pageBean.setTotalItemCount(totalItemCount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置页数</span></span><br><span class="line">    <span class="keyword">int</span> totalPageCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (totalItemCount&gt;<span class="number">0</span> &amp;&amp; pageSize&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        totalPageCount=(<span class="keyword">int</span>)Math.ceil(totalItemCount*<span class="number">1.0</span>/pageSize);</span><br><span class="line">        pageBean.setTotalPageCount(totalPageCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Book&gt; data=bookDao.searchBooks(name, category, author, minPrice, maxPrice, sales);</span><br><span class="line">    <span class="comment">//设置每页记录的集合</span></span><br><span class="line">    <span class="keyword">if</span> (pageNo&lt;totalPageCount)&#123;</span><br><span class="line">        pageBean.setData(data.subList((pageNo-<span class="number">1</span>)*pageSize,pageNo*pageSize));</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (pageNo==totalPageCount)&#123;</span><br><span class="line">        <span class="comment">//最后一页</span></span><br><span class="line">        pageBean.setData(data.subList((pageNo-<span class="number">1</span>)*pageSize,data.size()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、过滤器登录验证"><a href="#4、过滤器登录验证" class="headerlink" title="4、过滤器登录验证"></a>4、过滤器登录验证</h4><p>见过滤器</p>
<h4 id="5、多条件查询"><a href="#5、多条件查询" class="headerlink" title="5、多条件查询"></a>5、多条件查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    String name=req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    String category=req.getParameter(<span class="string">&quot;category&quot;</span>);</span><br><span class="line">    String author=req.getParameter(<span class="string">&quot;author&quot;</span>);</span><br><span class="line">    String minPrice=req.getParameter(<span class="string">&quot;minPrice&quot;</span>);</span><br><span class="line">    String maxPrice=req.getParameter(<span class="string">&quot;maxPrice&quot;</span>);</span><br><span class="line">    String sales=req.getParameter(<span class="string">&quot;sales&quot;</span>);</span><br><span class="line"></span><br><span class="line">    BookService bookService=<span class="keyword">new</span> BookService();</span><br><span class="line">    List&lt;Book&gt; list=bookService.searchBooks(name,category,author,minPrice,maxPrice,sales);</span><br><span class="line"></span><br><span class="line">    req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;showbook.jsp&quot;</span>).forward(req, resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;search&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    书名:<span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;searchName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span>&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;searchName&quot; autocomplete=&quot;off&quot; placeholder=&quot;请输入图书关键字&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;div id=&quot;context1&quot; style=&quot;display: none;width: 175px;background-color: #b3a4a4;position: absolute; left: 55px;z-index: 100;border: 1px #ac3a3a solid&quot;&gt;&lt;/div&gt;</span><br><span class="line">    搜索图书:&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;请输入图书关键字&quot;/&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    搜索类别:&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;category&quot; placeholder=&quot;请输入图书类别&quot;/&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    作者:&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;author&quot; placeholder=&quot;请输入图书作者&quot;/&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    价格区间:&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;minPrice&quot; placeholder=&quot;最低价&quot;/&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">    到&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;maxPrice&quot; placeholder=&quot;最高价&quot;/&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line">    销量大于:&lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;sales&quot; placeholder=&quot;销量&quot;/&gt;</span><br><span class="line">&lt;/label&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;&amp;nbsp;&amp;nbsp;&lt;input type=&quot;button&quot;</span><br><span class="line">    value=&quot;全部&quot; onclick=&quot;location.href=&#x27;bookStoreShow1&#x27;&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="6、ajax异步删除"><a href="#6、ajax异步删除" class="headerlink" title="6、ajax异步删除"></a>6、ajax异步删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id=Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    BookService bookService=<span class="keyword">new</span> BookService();</span><br><span class="line">    <span class="keyword">int</span> count=bookService.deleteBook(id);</span><br><span class="line">    resp.getWriter().print(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现异步删除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delBook</span>(<span class="params">dom,id</span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">       url:<span class="string">&quot;delBook2&quot;</span>,</span><br><span class="line">       type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">       data:<span class="string">&#x27;id=&#x27;</span>+id,</span><br><span class="line">       success:<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                $(dom).parent().parent().remove();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;执行失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步批量删除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delChecks</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;.checks&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i,e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(e).is(<span class="string">&quot;:checked&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">const</span> id = $(e).val();</span><br><span class="line">            delBook(e,id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7、上传和下载"><a href="#7、上传和下载" class="headerlink" title="7、上传和下载"></a>7、上传和下载</h4><h4 id="8、搜索框自动补全"><a href="#8、搜索框自动补全" class="headerlink" title="8、搜索框自动补全"></a>8、搜索框自动补全</h4><ul>
<li><strong>ajax异步通信</strong></li>
<li>得到Json字符串（即符合条件的Book集合）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    List&lt;Book&gt; bookList = <span class="keyword">new</span> BookService().findBookByName(name);</span><br><span class="line"></span><br><span class="line">    Gson gson=<span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="comment">//创建Json字符串</span></span><br><span class="line">    String json = gson.toJson(bookList);</span><br><span class="line">    System.out.println(json);</span><br><span class="line">    resp.getWriter().write(json);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>前端接收Json字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">//将点击的内容放到搜素框</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setSearch_onclick</span>(<span class="params">div</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#searchName&quot;</span>).val(div.innerText);</span><br><span class="line">        $(<span class="string">&quot;#context1&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;#searchName&quot;</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> content = $(<span class="built_in">this</span>).val();</span><br><span class="line">        <span class="keyword">if</span> (content === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            $(<span class="string">&quot;#context1&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于浏览器的缓存机制所以我们每次传入一个时间</span></span><br><span class="line">        <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">            <span class="comment">//新建一个名为SearchNameAjaxServlet的servlet,URL如下</span></span><br><span class="line">            url: <span class="string">&quot;searchNameAjax&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: content,</span><br><span class="line">                <span class="string">&quot;time&quot;</span>: time</span><br><span class="line">            &#125;,<span class="comment">//&quot;info=&quot;+content+&quot;&amp;time=&quot;+time</span></span><br><span class="line">            dataType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//拼接html</span></span><br><span class="line">                <span class="comment">//var res = data.split(&quot;,&quot;);</span></span><br><span class="line">                <span class="keyword">var</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">                    <span class="comment">//每一个div还有鼠标移出、移入点击事件</span></span><br><span class="line">                    html += <span class="string">&quot;&lt;div onmousedown=&#x27;setSearch_onclick(this)&#x27; onmouseout=&#x27;changeBackColor_out(this)&#x27; onmouseover=&#x27;changeBackColor_over(this)&#x27;&gt;&quot;</span></span><br><span class="line">                        + data[i].name + <span class="string">&quot;&lt;/div&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;#context1&quot;</span>).html(html);</span><br><span class="line">                <span class="comment">//显示为块级元素</span></span><br><span class="line">                $(<span class="string">&quot;#context1&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标移到到内容上</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBackColor_over</span>(<span class="params">div</span>) </span>&#123;</span><br><span class="line">        $(div).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#CCCCCC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标离开内容</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeBackColor_out</span>(<span class="params">div</span>) </span>&#123;</span><br><span class="line">        $(div).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $(<span class="string">&quot;#searchName&quot;</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#context1&quot;</span>).css(<span class="string">&quot;display&quot;</span>,<span class="string">&quot;none&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2020/11/25/05springSecurity/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用安全框架，我们可以通过配置的方式实现对资源的访问限制</p>
<h2 id="常用安全框架"><a href="#常用安全框架" class="headerlink" title="常用安全框架"></a>常用安全框架</h2><ul>
<li>Spring Security：Spring家族一员。是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了 Spring IoC ， DI（控制反转Inversion of Control,DI:Dependency Injection 依赖注入） 和 AOP（面向切面编程） 功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安 全控制编写大量重复代码的工作。 </li>
<li>Apache Shiro：一个功能强大且易于使用的Java安全框架,提供了认证,授权,加密,和会话管理</li>
</ul>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul>
<li>“<strong>认证</strong>”，是建立一个他声明的主体的过程（一个“主体”一般是指用户， 设备或一些可以在你的应用程序中执行动作的其他系统），通俗点说就是系统认为用户是否能登录。 </li>
<li>“<strong>授权</strong>”指确定一个主体是否允许在你的应用程序执行一个动作的过程。通俗点讲就是系统判断用户是否 有权限去做某些事情。</li>
</ul>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       security组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      web组件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="UserDetailService"><a href="#UserDetailService" class="headerlink" title="UserDetailService"></a>UserDetailService</h3><p>当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。</p>
<p>而在实际项目中账号和密 码都是从数据库中查询出来的。所以我们要通过自定义逻辑控制认证逻辑。如果需要自定义逻辑时，只需要实现 UserDetailsService 接口即可</p>
<p><img src="https://csn.damyoung.cn/image-20201207205504951.png" alt="image-20201207205504951"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">   <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//获得所有权限，不能返回null</span></span><br><span class="line">   Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">    </span><br><span class="line">   <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//账户是否未过期，过期false</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//账户是否未锁定</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//凭证(密码)是否过期</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//账户是否启用</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User</p>
<p>UserDetails 实现类 User 类的实例。而三个参数的构造方法实际上也是调用 7 个参数的构造方法。 username :用户名 password :密码 <strong>authorities</strong> ：用户具有的权限。此处不允许为 null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserDetails的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span>, <span class="title">CredentialsContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonExpired;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accountNonLocked;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> credentialsNonExpired;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> enabled;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, String password, <span class="keyword">boolean</span> enabled, <span class="keyword">boolean</span> accountNonExpired, <span class="keyword">boolean</span> credentialsNonExpired, <span class="keyword">boolean</span> accountNonLocked, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//.....</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的用户名应该是客户端传递过来的用户名。而密码应该是从数据库中查询出来的密码。Spring Security 会根据 User 中的 password 和客户端传递过来的 password 进行比较。如果相同则表示认证 通过，如果不相同表示认证失败</p>
<p>里面的权限对于后面学习授权是很有必要的，包含的所有内容为此用户具有的权限， 如有里面没有包含某个权限，而在做某个事情时必须包含某个权限则会出现 403。通常都是通过 AuthorityUtils.commaSeparatedStringToAuthorityList(“”) 来创建 authorities 集合对象 的。参数是一个字符串，多个权限使用逗号分隔。</p>
<h3 id="密码比较器"><a href="#密码比较器" class="headerlink" title="密码比较器"></a>密码比较器</h3><p>Spring Security 要求容器中必须有 PasswordEncoder 实例。所以当自定义登录逻辑时要求必须给容 器注入 PaswordEncoder 的bean对象。</p>
<p>BCryptPasswordEncoder 是 Spring Security 官方推荐的密码解析器，平时多使用这个解析器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"><span class="comment">//对password加密</span></span><br><span class="line">   <span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line"><span class="comment">//匹配rewPassword:客户端传回的明文密码 encodePassword:密文</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//密码比较器PasswordEncoder接口的实现</span></span><br><span class="line">    <span class="comment">// 加密以salt的形式进行加密，以求每次对同一密码都得到不同密文</span></span><br><span class="line">    BCryptPasswordEncoder bCryptPasswordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    <span class="comment">//生成加密的密码</span></span><br><span class="line">    String encode = bCryptPasswordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    System.out.println(encode);</span><br><span class="line">    System.out.println(bCryptPasswordEncoder.encode(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">    <span class="comment">//匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> matches = bCryptPasswordEncoder.matches(<span class="string">&quot;123&quot;</span>, encode);</span><br><span class="line">    System.out.println(matches);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><blockquote>
<p>鉴权对象接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Authentication</span> <span class="keyword">extends</span> <span class="title">Principal</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取权限</span></span><br><span class="line">   Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"><span class="comment">//获取凭证(密码)</span></span><br><span class="line">   <span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获得详情</span></span><br><span class="line">   <span class="function">Object <span class="title">getDetails</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取对象，UserDetails</span></span><br><span class="line">   <span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//是否被认证</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">isAuthenticated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//设置认证</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br></pre></td></tr></table></figure>

<h3 id="AuthenticationException"><a href="#AuthenticationException" class="headerlink" title="AuthenticationException"></a>AuthenticationException</h3><blockquote>
<p>鉴权异常抽象类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AuthenticationException</span><span class="params">(String msg, Throwable cause)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(msg, cause);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AuthenticationException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(msg);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定义登录逻辑"><a href="#自定义登录逻辑" class="headerlink" title="自定义登录逻辑"></a>自定义登录逻辑</h2><ul>
<li>将<code>PasswordEncoder</code>注册到Spring容器中</li>
<li>继承覆写<code>UserDetailsService</code>接口中的<code>loadUserByUsername</code>方法</li>
<li>返回<code>org.springframework.security.core.userdetails.User</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将PasswordEncoder注册到spring容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实现类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">getPw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  自定义登录逻辑</span></span><br><span class="line"><span class="comment"> *      1、实现UserDetailsService接口</span></span><br><span class="line"><span class="comment"> *      2、比较用户名</span></span><br><span class="line"><span class="comment"> *      3、比较密码(注册时已经进行加密，匹配成功返回UserDetail)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;admin&quot;</span>.equals(username))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String encode = passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">//authorityList,权限集合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,encode,</span><br><span class="line">                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin,normal&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义登录页面"><a href="#自定义登录页面" class="headerlink" title="自定义登录页面"></a>自定义登录页面</h2><p>修改配置类 修改配置类中主要是设置哪个页面是登录页面。配置类需要继承WebSecurityConfigurerAdapte,并重 写 configure 方法。</p>
<ul>
<li><p>successForwardUrl() ：登录成功后跳转地址 </p>
</li>
<li><p>loginPage() ：登录页面 </p>
</li>
<li><p>loginProcessingUrl ：登录页面表单提交地址，此地址可以不真实存在。 </p>
</li>
<li><p>antMatchers() ：匹配内容 </p>
</li>
<li><p>permitAll() ：允许</p>
</li>
<li><p>failureForwardUrl(“  “):登录失败后页面,POST请求</p>
</li>
</ul>
<p>在控制器类中添加控制器方法，方法映射路径/error。此处要注意：由于是 POST 请求访问/error。 所以如果返回值直接转发到 error.html 中，即使有效果，控制台也会报警告，提示 error.html 不支持 POST 访问方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义登录页面配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin() <span class="comment">//表单提交方式</span></span><br><span class="line">                <span class="comment">//自定义登录页面</span></span><br><span class="line">                .loginPage(<span class="string">&quot;/Login.html&quot;</span>)</span><br><span class="line">                <span class="comment">//必须和表单提交的接口一样,执行自定义登录逻辑</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                <span class="comment">//登录成功后页面,POST请求</span></span><br><span class="line">                .successForwardUrl(<span class="string">&quot;/toMain&quot;</span>)</span><br><span class="line">                <span class="comment">//登录失败后页面,POST请求</span></span><br><span class="line">                .failureForwardUrl(<span class="string">&quot;/toError&quot;</span>);</span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//放行/login.html</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/Login.html&quot;</span>,<span class="string">&quot;/error.html&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">//所有请求都必须认证才能访问，必须登录</span></span><br><span class="line">                <span class="comment">//已登录后不会被拦截</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跨站请求伪造</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录账号密码参数"><a href="#登录账号密码参数" class="headerlink" title="登录账号密码参数"></a>登录账号密码参数</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username123&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password123&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>UsernamePasswordAuthenticationFilter</code>过滤器（post请求，username，password）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_SECURITY_FORM_USERNAME_KEY = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SPRING_SECURITY_FORM_PASSWORD_KEY = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AntPathRequestMatcher DEFAULT_ANT_PATH_REQUEST_MATCHER = <span class="keyword">new</span> AntPathRequestMatcher(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String usernameParameter = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String passwordParameter = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> postOnly = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义入参</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.formLogin() <span class="comment">//表单提交方式</span></span><br><span class="line">        <span class="comment">//自定义入参</span></span><br><span class="line">        .usernameParameter(<span class="string">&quot;username123&quot;</span>)</span><br><span class="line">        .passwordParameter(<span class="string">&quot;password123&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="登录成功处理器"><a href="#登录成功处理器" class="headerlink" title="登录成功处理器"></a>登录成功处理器</h2><ul>
<li>应用于前后端分离，而不是通过Controller层进行跳转</li>
<li>继承<code>SimpleUrlAuthenticationSuccessHandler</code>自定义成功处理器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">        response.sendRedirect(url);</span><br><span class="line">        User user= (User) authentication.getCredentials();</span><br><span class="line">        <span class="comment">//password安全考虑会设置为null</span></span><br><span class="line">        System.out.println(user.getUsername()+<span class="string">&quot;  &quot;</span>+user.getPassword());</span><br><span class="line">        <span class="comment">//获得权限</span></span><br><span class="line">        System.out.println(user.getAuthorities());</span><br><span class="line">        clearAuthenticationAttributes(request);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.successHandler(<span class="keyword">new</span> MyAuthenticationSuccessHandler(<span class="string">&quot;http://baidu.com&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="登录失败处理器"><a href="#登录失败处理器" class="headerlink" title="登录失败处理器"></a>登录失败处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    response.sendRedirect(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.failureHandler(<span class="keyword">new</span> MyAuthenticationFailuerHandler(<span class="string">&quot;/error.html&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><p>为了实现更好的效果，通常添加退出的配置。默认的退出 url 为 /logout ，退出成功后跳转到 /login? logout</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//退出登录</span></span><br><span class="line">http.logout()</span><br><span class="line">    <span class="comment">//自定义退出登录</span></span><br><span class="line"><span class="comment">//    .logoutUrl(&quot;/user/logout&quot;)</span></span><br><span class="line">    <span class="comment">//退出登录成功的url</span></span><br><span class="line">    .logoutSuccessUrl(<span class="string">&quot;/login.html&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/user/logout&quot;</span>&gt;</span>退出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p>在配置类中 http.authorizeRequests() 主要是对<code>url</code>进行控制，也就是我们所说的授权（访问控制）。</p>
<p><strong>配置顺序</strong>影响了之后授权效果，越是具体的应该放在前面，越 是笼统的应该放到后面。</p>
<ul>
<li><p><code>antMachers</code></p>
<ul>
<li><code>？</code>匹配一个字符，<code>*</code>匹配多个字符，<code>**</code>匹配多个目录</li>
<li>在实际项目中经常需要放行所有静态资源，下面演示放行 js 文件夹下所有脚本文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.antMatchers(&quot;&#x2F;js&#x2F;**&quot;,&quot;&#x2F;css&#x2F;**&quot;).permitAll() </span><br></pre></td></tr></table></figure>

<ul>
<li>还有一种配置方式是只要是.js 文件都放行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">antMatchers(&quot;&#x2F;**&#x2F;*.js&quot;).permitAll()</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>regexMachers</code>正则表达式</p>
</li>
</ul>
<p>使用正则表达式进行匹配。和 antMatchers() 主要的区别就是参数， antMatchers() 参数是 ant 表达式， regexMatchers() 参数是正则表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/Login.html&quot;</span>,<span class="string">&quot;/error.html&quot;</span>,<span class="string">&quot;/**/*.css&quot;</span>).permitAll()</span><br><span class="line">   <span class="comment">//匹配为postMapping</span></span><br><span class="line">.regexMatchers(HttpMethod.POST,<span class="string">&quot;/login&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure>

<h2 id="控制访问"><a href="#控制访问" class="headerlink" title="控制访问"></a>控制访问</h2><blockquote>
<p>自定义登录逻辑中返回的UserDetails对象</p>
<ul>
<li>权限控制,严格区分大小写,权限不够会出现403状态码</li>
</ul>
</blockquote>
<p>Spring Security 中还支持很多其他权限控制。这些方法一般都用于用 户已经被认证后，判断用户是否具有特定的要求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//authorityList,权限集合</span></span><br><span class="line"><span class="comment">//role基于角色</span></span><br><span class="line"><span class="comment">//admin,normal为权限</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username,encode,</span><br><span class="line">        AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin,normal,ROLE_abc&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="基于权限"><a href="#基于权限" class="headerlink" title="基于权限"></a>基于权限</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/Authentication.html&quot;</span>).hasAuthority(<span class="string">&quot;normal&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基于角色"><a href="#基于角色" class="headerlink" title="基于角色"></a>基于角色</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/Authentication.html&quot;</span>).hasRole(<span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="基于IP地址"><a href="#基于IP地址" class="headerlink" title="基于IP地址"></a>基于IP地址</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/Authentication.html&quot;</span>).hasIpAddress(<span class="string">&quot;127.0.0.1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="自定义403页面"><a href="#自定义403页面" class="headerlink" title="自定义403页面"></a>自定义403页面</h2><p>使用 Spring Security 时经常会看见 403（无权限）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常处理</span></span><br><span class="line">http.exceptionHandling().accessDeniedHandler(accessDeniedHandler);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//响应状态码，403</span></span><br><span class="line">        response.setStatus(HttpServletResponse.SC_FORBIDDEN);</span><br><span class="line">        <span class="comment">//以json格式</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(<span class="string">&quot;&#123;\&quot;status\&quot;:\&quot;error,\&quot;msg\&quot;:\&quot;权限不足\&quot;&#125;&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基于表达式的访问控制"><a href="#基于表达式的访问控制" class="headerlink" title="基于表达式的访问控制"></a>基于表达式的访问控制</h2><p>之前学习的登录用户权限判断实际上底层实现都是调用access(表达式)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String permitAll = <span class="string">&quot;permitAll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String denyAll = <span class="string">&quot;denyAll&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String anonymous = <span class="string">&quot;anonymous&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String authenticated = <span class="string">&quot;authenticated&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String fullyAuthenticated = <span class="string">&quot;fullyAuthenticated&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String rememberMe = <span class="string">&quot;rememberMe&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用Access"><a href="#使用Access" class="headerlink" title="使用Access"></a>使用Access</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/Authentication.html&quot;</span>).access(<span class="string">&quot;hasRole(&#x27;abc&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="自定义Access"><a href="#自定义Access" class="headerlink" title="自定义Access"></a>自定义Access</h3><blockquote>
<p>编写一个自定义权限控制</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用于自定义权限Access</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccessService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得对象主体</span></span><br><span class="line">        Object obj = authentication.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> UserDetails)&#123;</span><br><span class="line">            UserDetails userDetails= (UserDetails) obj;</span><br><span class="line">            <span class="comment">//获取权限,grantedAuthority泛型集合</span></span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities =</span><br><span class="line">                                                        userDetails.getAuthorities();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> authorities.contains(<span class="keyword">new</span> SimpleGrantedAuthority(request.getRequestURI()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.anyRequest().access(<span class="string">&quot;@accessServiceImpl.hasPermission(httpServletRequest,authentication)&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Remember-me"><a href="#Remember-me" class="headerlink" title="Remember me"></a>Remember me</h2><p>用户只需要在登录时添加remember-me复选框，取值为true，Spring Security会自动把用户信息存储到数据源中，以后就可以不登录进行访问</p>
<p>Spring Security实现该功能<strong>依赖</strong>于Spring JDBC</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       mybatis依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      MySql数据库依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置datasource</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/security?characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<p><code>tokenReposity</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">getRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//自动建表，第一次启动时开启，跌二次启动时注释</span></span><br><span class="line"><span class="comment">//        jdbcTokenRepository.setCreateTableOnStartup(true);</span></span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记住我</span></span><br><span class="line">http.rememberMe()</span><br><span class="line">        <span class="comment">//设置数据源</span></span><br><span class="line">        .tokenRepository(persistentTokenRepository)</span><br><span class="line">        <span class="comment">//设置超时时间</span></span><br><span class="line">        .tokenValiditySeconds(<span class="number">60</span>)</span><br><span class="line">        .userDetailsService(userDetailsService);</span><br></pre></td></tr></table></figure>



<h1 id="注解访问控制"><a href="#注解访问控制" class="headerlink" title="注解访问控制"></a>注解访问控制</h1><p>注解默认不开启，需要通过<code>@EnableGlobalMethodSecurity</code></p>
<p>如果设置的条件允许，程序正常执行，如果不允许会报500</p>
<p>注解可以写到Service接口或方法中，也可以写到Controller或Controller方法，通常情况下都是写在控制器方法中，控制接口URL是否允许被访问</p>
<p><img src="https://csn.damyoung.cn/image-20201208160543960.png" alt="image-20201208160543960"></p>
<h2 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h2><p>判断用户是否具有角色，能写在方法或类上，参数以ROLE_开头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//UserDetails</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username,encode,</span><br><span class="line">        AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin,normal,ROLE_abc&quot;</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.successForwardUrl(<span class="string">&quot;/toMain&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Secured(&quot;ROLE_abc&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toMain&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:Success.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PreAuthorize-PostAuthorize"><a href="#PreAuthorize-PostAuthorize" class="headerlink" title="@PreAuthorize/@PostAuthorize"></a>@PreAuthorize/@PostAuthorize</h2><p>方法或类级别的注解+<strong>access表达式</strong></p>
<ul>
<li>@PreAuthorize 执行前先判断权限</li>
<li>PostAuthorize 方法或类执行之后判断权限</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;abc&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toMain&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toMain</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:Success.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨站请求伪造</span></span><br><span class="line">http.csrf().disable();</span><br></pre></td></tr></table></figure>

<p>跨域：只要网络协议，ip地址，端口中任何一个不相同都是跨域请求</p>
<p>客户端与服务进行交互时，由于http协议本身是无状态协议，所以引入了cookie进行记录客户端身份。在cookie中会存放session id用来识别客户端身份，在跨域的请求下，session id可能被第三方恶意挟持，通过这个session id向服务端发起请求时，服务端会认为这个请求是合法的，可能发生很多意想不到的事情。</p>
<p>Spring-security默认开启CSRF，默认会拦截请求，进行CSRF处理。CSRF为了保证不是其他第三方网站访问，要求访问时携带参数名为_csrf值为token(token在服务端产生)的内容，如果token和服务端的token匹配成功，则正常访问。</p>
<h1 id="Oauth2协议"><a href="#Oauth2协议" class="headerlink" title="Oauth2协议"></a>Oauth2协议</h1><p>oAuth是Open Authorization的简写。</p>
<p>OAUTH协议为用户资源的授权提供了一个安全的、开放而又简易的标准。同时，任何第三方都可以使用OAUTH认证服务，任何服务提供商都可以实现自身的OAUTH认证服务，因而OAUTH是开放的。</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="微信认证"><a href="#微信认证" class="headerlink" title="微信认证"></a>微信认证</h3><p><img src="https://csn.damyoung.cn/image-20201208193713137.png" alt="image-20201208193713137"></p>
<h3 id="Oauth2认证流程"><a href="#Oauth2认证流程" class="headerlink" title="Oauth2认证流程"></a>Oauth2认证流程</h3><p><img src="https://csn.damyoung.cn/image-20201208193803706.png" alt="image-20201208193803706"></p>
<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源，比如：Android客户端、Web 客户端（浏览器端）、微信客户端等。</p>
<h4 id="资源拥有者"><a href="#资源拥有者" class="headerlink" title="资源拥有者"></a>资源拥有者</h4><p>通常为用户，也可以是应用程序，即该资源的拥有者。 </p>
<h4 id="授权服务器（也称认证服务器）"><a href="#授权服务器（也称认证服务器）" class="headerlink" title="授权服务器（也称认证服务器）"></a>授权服务器（也称认证服务器）</h4><p>用来对资源拥有的身份进行认证、对访问资源进行授权。客户端要想访问资源需要通过认证服务器由资 源拥有者授权后方可访问。 </p>
<h4 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h4><p>存储资源的服务器，比如，网站用户管理服务器存储了网站用户信息，网站相册服务器存储了用户的相 册信息，微信的资源服务存储了微信的用户信息等。客户端最终访问资源服务器获取资源信息。 </p>
<h4 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h4><ul>
<li>客户凭证(client Credentials) ：客户端的clientId和密码用于认证客户 </li>
<li>令牌(tokens) ：授权服务器在接收到客户请求后，颁发的访问令牌 </li>
<li>作用域(scopes) ：客户请求访问令牌时，由资源拥有者额外指定的细分权限(permission)</li>
</ul>
<h4 id="令牌类型"><a href="#令牌类型" class="headerlink" title="令牌类型"></a>令牌类型</h4><ul>
<li>授权码 ：仅用于授权码授权类型，用于交换获取访问令牌和刷新令牌 </li>
<li>访问令牌 ：用于代表一个用户或服务直接去访问受保护的资源 </li>
<li>刷新令牌 ：用于去授权服务器获取一个刷新访问令牌 </li>
<li>BearerToken ：不管谁拿到Token都可以访问资源，类似现金 Proof of Possession(PoP) </li>
<li>Token ：可以校验client是否对Token有明确的拥有权</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>更安全，客户端不接触用户密码，服务器端更易集中保护  </li>
<li>短寿命和封装的token </li>
<li>资源服务器和授权服务器解耦 集中式授权，简化客户端 HTTP/JSON友好，易于请求和传递token </li>
</ul>
<h2 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h2><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200327236.png" alt="image-20201208200327236"></p>
<ul>
<li>简化</li>
</ul>
<p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200404058.png" alt="image-20201208200404058"></p>
<h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200451192.png" alt="image-20201208200451192"></p>
<h3 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h3><p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200507877.png" alt="image-20201208200507877"></p>
<h2 id="Spring-Security-Oauth2"><a href="#Spring-Security-Oauth2" class="headerlink" title="Spring Security Oauth2"></a>Spring Security Oauth2</h2><p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200639973.png" alt="image-20201208200639973"></p>
<ul>
<li>Authorize Endpoint ：授权端点，进行授权</li>
<li>Token Endpoint ：令牌端点，经过授权拿到对应的Token </li>
<li>Introspection Endpoint ：校验端点，校验Token合法性 </li>
<li>Revocation Endpoint ：撤销端点，撤销授权</li>
</ul>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208200755354.png" alt="image-20201208200755354"></p>
<p>流程</p>
<ul>
<li>用户访问,此时没有Token。<code>Oauth2RestTemplate</code>会报错，这个报错信息会被 <code>Oauth2ClientContextFilter</code>捕获并重定向到认证服务器 </li>
<li>认证服务器通过Authorization Endpoint进行授权，并通过<code>AuthorizationServerTokenServices</code>生 成授权码并返回给客户端 </li>
<li>客户端拿到授权码去认证服务器通过Token Endpoint调用<code>AuthorizationServerTokenServices</code>生 成Token并返回给客户端 </li>
<li>客户端拿到Token去资源服务器访问资源，一般会通过Oauth2AuthenticationManager调用 <code>ResourceServerTokenServices</code>进行校验。校验通过可以获取资源。</li>
</ul>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-security-oauth2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pojo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        String password = passwordEncoder.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,password,</span><br><span class="line">                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        <span class="keyword">return</span> authentication.getPrincipal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">getpw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//认证</span></span><br><span class="line">        http.formLogin().permitAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/oauth/**&quot;</span>,<span class="string">&quot;/login/**&quot;</span>,<span class="string">&quot;/logout/**&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest()</span><br><span class="line">                .authenticated();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     授权服务器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//内存内</span></span><br><span class="line">        clients.inMemory()</span><br><span class="line">                <span class="comment">//客户端id</span></span><br><span class="line">                .withClient(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">                <span class="comment">//密钥</span></span><br><span class="line">                .secret(<span class="string">&quot;12345&quot;</span>)</span><br><span class="line">                .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">                <span class="comment">//授权范围</span></span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                <span class="comment">//授权类型</span></span><br><span class="line">                <span class="comment">//authorization_code;授权码模式</span></span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源服务器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers()</span><br><span class="line">                <span class="comment">//获取资源controller,对controller中url地址放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="授权码模式-1"><a href="#授权码模式-1" class="headerlink" title="授权码模式"></a>授权码模式</h3><h4 id="获取授权码"><a href="#获取授权码" class="headerlink" title="获取授权码"></a>获取授权码</h4><p> <a href="http://localhost:8087/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all">http://localhost:8087/oauth/authorize?response_type=code&amp;client_id=client&amp;redirect_uri=http://www.baidu.com&amp;scope=all</a></p>
<ul>
<li>输入账号密码(Service层中的)</li>
<li>得到授权码</li>
</ul>
<p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201208235539296.png" alt="image-20201208235539296"></p>
<h4 id="根据授权码获得令牌token"><a href="#根据授权码获得令牌token" class="headerlink" title="根据授权码获得令牌token"></a>根据授权码获得令牌token</h4><ul>
<li>客户端得到授权码去授权服务器获取token</li>
<li>postman模拟客户端发送json给授权服务器得到token的过程</li>
<li>拿到token到资源服务器获得资源</li>
</ul>
<p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201209001422681.png" alt="image-20201209001422681"></p>
<ul>
<li><p>grant_type ：授权类型，填写authorization_code，表示授权码模式 </p>
</li>
<li><p>code ：授权码，就是刚刚获取的授权码，注意：授权码只使用一次就无效了，需要重新申请。 </p>
</li>
<li><p>client_id :客户端标识 </p>
</li>
<li><p>redirect_uri ：申请授权码时的跳转url，一定<strong>和申请授权码时用的redirect_uri一致</strong>。 scope :授权范围。 </p>
</li>
</ul>
<p>  认证失败服务端返回 401 Unauthorized </p>
<p>  注意：此时无法请求到令牌，访问服务器会报错</p>
<p><img src="https://csn.damyoung.cn/image-20201209001725743.png" alt="image-20201209001725743"></p>
<p><img src="http://qkm6g478k.hn-bkt.clouddn.com/image-20201209001536525.png" alt="image-20201209001536525"></p>
<h4 id="根据token去资源服务器拿资源"><a href="#根据token去资源服务器拿资源" class="headerlink" title="根据token去资源服务器拿资源"></a>根据token去资源服务器拿资源</h4><p><img src="https://csn.damyoung.cn/image-20201209001632930.png" alt="image-20201209001632930"></p>
<p><img src="https://csn.damyoung.cn/image-20201209001648630.png" alt="image-20201209001648630"></p>
<h3 id="密码模式-1"><a href="#密码模式-1" class="headerlink" title="密码模式"></a>密码模式</h3><ul>
<li>客户端直接将账户密码传给授权服务器获得token</li>
</ul>
<p>在原有授权码模式基础上(更改授权服务器)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    endpoints.authenticationManager(authenticationManager)</span><br><span class="line">            .userDetailsService(userService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201209095813235.png" alt="image-20201209095813235"></p>
<p><img src="https://csn.damyoung.cn/image-20201209100313845.png" alt="image-20201209100313845"></p>
<p><img src="https://csn.damyoung.cn/image-20201209100326800.png" alt="image-20201209100326800"></p>
<p><img src="https://csn.damyoung.cn/image-20201209100340902.png" alt="image-20201209100340902"> </p>
<h3 id="Redis存储token"><a href="#Redis存储token" class="headerlink" title="Redis存储token"></a>Redis存储token</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    redis依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      对象池依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Redis配置</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#本机端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8085</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">redisTokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密码模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    endpoints.authenticationManager(authenticationManager)</span><br><span class="line">            .userDetailsService(userService)</span><br><span class="line">            .tokenStore(tokenStore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="常见认证方式"><a href="#常见认证方式" class="headerlink" title="常见认证方式"></a>常见认证方式</h2><h3 id="HTTP-Basic-Auth"><a href="#HTTP-Basic-Auth" class="headerlink" title="HTTP Basic Auth"></a>HTTP Basic Auth</h3><p> HTTP Basic Auth简单点说明就是每次请求API时都提供用户的username和password，简言之， Basic Auth是配合RESTful API 使用的最简单的认证方式，<strong>只需提供用户名密码即可</strong>，但由于有把用户 名密码暴露给第三方客户端的风险，在生产环境下被使用的越来越少。因此，在开发对外开放的 RESTful API时，尽量避免采用HTTP Basic Auth。 </p>
<h3 id="Cookie-Auth"><a href="#Cookie-Auth" class="headerlink" title="Cookie Auth"></a>Cookie Auth</h3><p>Cookie认证机制就是为一次请求认证在服务端创建一个Session对象，同时在客户端的浏览器端创建 了一个Cookie对象；通过客户端带上来<strong>Cookie对象来与服务器端的session对象匹配</strong>来实现状态管理 的。默认的，当我们关闭浏览器的时候，cookie会被删除。但可以通过修改cookie 的expire time使 cookie在一定时间内有效。  </p>
<p><img src="https://csn.damyoung.cn/image-20201209105809552.png" alt="image-20201209105809552"></p>
<h3 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h3><p>OAuth（开放授权,Open Authorization）是一个开放的授权标准，允许用户让第三方应用访问该用 户在某一web服务上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给 第三方应用。如网站通过微信、微博登录等，主要用于第三方登录。 OAuth允许用户提供一个<strong>令牌</strong>，而不是用户名和密码来访问他们存放在特定服务提供者的数据。每一 个令牌授权一个特定的第三方系统（例如，视频编辑网站)在特定的时段（例如，接下来的2小时内）内 访问特定的资源（例如仅仅是某一相册中的视频）。这样，OAuth让用户可以授权第三方网站访问他们 存储在另外服务提供者的某些特定信息，而非所有内容。 </p>
<p>这种基于OAuth的认证机制适用于个人消费者类的互联网产品，如社交类APP等应用，但是不太适合 拥有自有认证权限管理的企业应用。 </p>
<p>缺点：过重，完整环境下需要授权服务器，资源服务器。 </p>
<p><img src="https://csn.damyoung.cn/image-20201209105757493.png" alt="image-20201209105757493"></p>
<h3 id="Token-Auth"><a href="#Token-Auth" class="headerlink" title="Token Auth"></a>Token Auth</h3><p>使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。</p>
<ol>
<li><p>客户端使用用户名跟密码请求登录 </p>
</li>
<li><p>服务端收到请求，去验证用户名与密码 </p>
</li>
<li><p>验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 </p>
</li>
<li><p>客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里 </p>
</li>
<li><p>客户端每次向服务端请求资源的时候需要带着服务端签发的 Token </p>
</li>
<li><p>服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请 求的数据 </p>
<p>比第一种方式更安全，比第二种方式更节约服务器资源(token字符串，cookie对象)，比第三种方式更加轻量。 </p>
</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20201209105741458.png" alt="image-20201209105741458"></p>
<p>具体，Token Auth的优点（Token机制相对于Cookie机制又有什么好处呢？）： </p>
<ol>
<li>支持跨域访问: Cookie是不允许垮域访问的，这一点对Token机制是不存在的，前提是传输的用户 认证信息(token)通过HTTP头传输. </li>
<li>无状态(也称：服务端可扩展行):Token机制在服务端不需要存储session信息，因为Token 自身包 含了所有登录用户的信息，只需要在客户端的cookie或本地介质存储状态信息. </li>
<li>更适用CDN: 可以通过内容分发网络请求你服务端的所有资料（如：javascript，HTML,图片 等），而你的服务端只要提供API即可.</li>
<li>去耦: 不需要绑定到一个特定的身份验证方案。Token可以在任何地方生成，只要在你的API被调用 的时候，你可以进行Token生成调用即可. </li>
<li>更适用于移动应用: 当你的客户端是一个原生平台（iOS, Android，Windows 10等）时，Cookie 是不被支持的（你需要通过Cookie容器进行处理），这时采用Token认证机制就会简单得多。 </li>
<li>CSRF:因为不再依赖于Cookie，所以你就不需要考虑对CSRF（跨站请求伪造）的防范。 </li>
<li> 性能: 一次网络往返时间（通过数据库查询session信息）总比做一次HMACSHA256计算的Token 验证和解析要费时得多. </li>
<li>不需要为登录页面做特殊处理: 如果你使用Protractor 做功能测试的时候，不再需要为登录页面做 特殊处理.</li>
<li>基于标准化:你的API可以采用标准化的 JSON Web Token (JWT). 这个标准已经存在多个后端库 （.NET, Ruby, Java,Python, PHP）和多家公司的支持（如：Firebase,Google, Microsoft）.</li>
</ol>
<h2 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h2><p>JSON Web Token（JWT）是一个开放的行业标准（RFC 7519），它定义了一种简介的、自包含的<strong>协议格式</strong>，用于在通信双方传递json对象，传递的信息经过数字签名可以被验证和信任。JWT可以使用 HMAC算法或使用RSA的公钥/私钥对来签名，防止被篡改。</p>
<p>JWT令牌的优点： </p>
<ol>
<li>jwt基于json，非常方便解析。 </li>
<li>可以在令牌中自定义丰富的内容，易扩展。 </li>
<li>通过非对称加密算法及数字签名技术，JWT防止篡改，安全性高。</li>
<li>资源服务使用JWT可不依赖认证服务即可完成授权。 </li>
</ol>
<p>缺点： JWT令牌较长，占存储空间比较大。</p>
<h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>一个JWT实际上就是一个字符串，它由三部分组成，头部、载荷与签名。</p>
<h3 id="头部header"><a href="#头部header" class="headerlink" title="头部header"></a>头部header</h3><p>头部用于描述关于该JWT的最基本的信息，例如其类型（即JWT）以及签名所用的算法（如HMAC SHA256或RSA）等。这也可以被表示成一个JSON对象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">	<span class="comment">//签名的算法，HS256算法</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>, </span><br><span class="line">    <span class="comment">//类型</span></span><br><span class="line">	 <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span>	</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="负载payload"><a href="#负载payload" class="headerlink" title="负载payload"></a>负载payload</h3><p>存放有效信息的地方</p>
<p>iss: jwt签发者 </p>
<p>sub: jwt所面向的用户 </p>
<p>aud: 接收jwt的一方 </p>
<p>exp: jwt的过期时间，这个过期时间必须要大于签发时间 </p>
<p>nbf: 定义在什么时间之前，该jwt都是不可用的. </p>
<p>iat: jwt的签发时间 </p>
<p>jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</p>
<ul>
<li>公共的声明 </li>
</ul>
<p>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加 敏感信息，因为该部分在客户端可解密. </p>
<ul>
<li>私有的声明 </li>
</ul>
<p>私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密 的，意味着该部分信息可以归类为明文信息。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;iat&quot;</span>: <span class="number">1516239022</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示：声明中不要放一些敏感信息。</p>
<h3 id="签证和签名"><a href="#签证和签名" class="headerlink" title="签证和签名"></a>签证和签名</h3><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成： </p>
<ol>
<li>header (base64后的)</li>
<li>payload (base64后的) </li>
<li>secret（<strong>盐</strong>，一定要保密)</li>
</ol>
<p>注意： secret 是保存在服务器端的， jwt 的签发生成也是在服务器端的， secret 就是用来进行 jwt 的签发和 jwt 的验证，所以，它就是你<strong>服务端的私钥</strong>，在任何场景都不应该流露出去。一旦客户端得知 这个 secret , 那就意味着客户端是可以自我签发 jwt 了</p>
<h2 id="JJWT"><a href="#JJWT" class="headerlink" title="JJWT"></a>JJWT</h2><p>JJWT是一个提供端到端的JWT创建和验证的Java库。永远免费和开源(Apache License，版本2.0)，JJW 很容易使用和理解。它被设计成一个以建筑为中心的流畅界面，隐藏了它的大部分复杂性。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jjwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JJWT生成与解析"><a href="#JJWT生成与解析" class="headerlink" title="JJWT生成与解析"></a>JJWT生成与解析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JwtBuilder jwtBuilder = Jwts.builder()</span><br><span class="line">      <span class="comment">//唯一id&#123;&quot;id&quot;: &quot;888&quot;&#125;</span></span><br><span class="line">      .setId(<span class="string">&quot;888&quot;</span>)</span><br><span class="line">      <span class="comment">//接收的用户&#123;“sub”:&quot;Rose&quot;&#125;</span></span><br><span class="line">      .setSubject(<span class="string">&quot;Rose&quot;</span>)</span><br><span class="line">      <span class="comment">//签发时间&#123;“iat&quot; : “ ”&#125;</span></span><br><span class="line">      .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">      <span class="comment">//签名算法及密钥</span></span><br><span class="line">      .signWith(SignatureAlgorithm.HS256, <span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">     <span class="comment">//失效时间</span></span><br><span class="line">	 .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + (<span class="number">60</span> * <span class="number">10</span>)));;</span><br><span class="line">String token = jwtBuilder.compact();</span><br><span class="line">System.out.println(token);</span><br><span class="line"></span><br><span class="line">String[] split = token.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">Arrays.stream(split).forEach(s-&gt;&#123;</span><br><span class="line">   System.out.println(Base64Codec.BASE64.decodeToString(s));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//解析token,获取claims,jwt中荷载声明的对象</span></span><br><span class="line">Claims claims=(Claims)Jwts.parser()</span><br><span class="line">      <span class="comment">//密钥</span></span><br><span class="line">      .setSigningKey(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">      .parse(token)</span><br><span class="line">      .getBody();</span><br><span class="line">System.out.println(<span class="string">&quot;id&quot;</span>+claims.getId());</span><br><span class="line">System.out.println(<span class="string">&quot;sub&quot;</span>+claims.getSubject());</span><br><span class="line">System.out.println(<span class="string">&quot;iat&quot;</span>+claims.getIssuedAt());</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Security-Oauth2-整合JWT"><a href="#Spring-Security-Oauth2-整合JWT" class="headerlink" title="Spring Security Oauth2 整合JWT"></a>Spring Security Oauth2 整合JWT</h1><h2 id="整合jwt"><a href="#整合jwt" class="headerlink" title="整合jwt"></a>整合jwt</h2><p>添加配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenStoreConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtAccessTokenConverter jwtAccessTokenConverter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TokenStore <span class="title">getJwtTokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtTokenStore(jwtAccessTokenConverter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAccessTokenConverter <span class="title">jwtAccessTokenConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="keyword">new</span> JwtAccessTokenConverter();</span><br><span class="line">        <span class="comment">//设置密钥</span></span><br><span class="line">        jwtAccessTokenConverter.setSigningKey(<span class="string">&quot;test_key&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jwtAccessTokenConverter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;getJwtTokenStore&quot;)</span></span><br><span class="line"><span class="keyword">private</span> TokenStore jwtTokenStore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;jwtAccessTokenConverter&quot;)</span></span><br><span class="line"><span class="keyword">private</span> AccessTokenConverter tokenConverter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userService)</span><br><span class="line">                <span class="comment">//使用redis存储token</span></span><br><span class="line"><span class="comment">//                .tokenStore(tokenStore);</span></span><br><span class="line">                .tokenStore(jwtTokenStore)</span><br><span class="line">                .accessTokenConverter(tokenConverter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展jwt存储的内容"><a href="#扩展jwt存储的内容" class="headerlink" title="扩展jwt存储的内容"></a>扩展jwt存储的内容</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  扩展token声明存储内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenEnhancer</span> <span class="keyword">implements</span> <span class="title">TokenEnhancer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OAuth2AccessToken <span class="title">enhance</span><span class="params">(OAuth2AccessToken oAuth2AccessToken, OAuth2Authentication oAuth2Authentication)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; stringObjectHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        stringObjectHashMap.put(<span class="string">&quot;enhance&quot;</span>,<span class="string">&quot;enhancer info&quot;</span>);</span><br><span class="line"></span><br><span class="line">        DefaultOAuth2AccessToken defaultOauth2AccessToken =(DefaultOAuth2AccessToken)oAuth2AccessToken;</span><br><span class="line">        defaultOauth2AccessToken.setAdditionalInformation(stringObjectHashMap);</span><br><span class="line">        <span class="keyword">return</span> defaultOauth2AccessToken ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpoints</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置jwt增强内容。tokenEnhancerChain为tokenEnhancer的实现类</span></span><br><span class="line">        TokenEnhancerChain tokenEnhancerChain = <span class="keyword">new</span> TokenEnhancerChain();</span><br><span class="line">        ArrayList&lt;TokenEnhancer&gt; tokenEnhancers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tokenEnhancers.add(jwtTokenEnhancer);</span><br><span class="line">        <span class="comment">//将accessToken转换为JwtAccessToken</span></span><br><span class="line">        tokenEnhancers.add(jwtAccessTokenConverter);</span><br><span class="line">        tokenEnhancerChain.setTokenEnhancers(tokenEnhancers);</span><br><span class="line"></span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .userDetailsService(userService)</span><br><span class="line">                <span class="comment">//使用redis存储token</span></span><br><span class="line"><span class="comment">//                .tokenStore(tokenStore);</span></span><br><span class="line">                .tokenStore(jwtTokenStore)</span><br><span class="line">                .accessTokenConverter(jwtAccessTokenConverter)</span><br><span class="line">                .tokenEnhancer(tokenEnhancerChain);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析JWT内容"><a href="#解析JWT内容" class="headerlink" title="解析JWT内容"></a>解析JWT内容</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  jwt依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String header = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">    String token = header.substring(header.lastIndexOf(<span class="string">&quot;bearer&quot;</span>) + <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">        .setSigningKey(<span class="string">&quot;test_key&quot;</span>.getBytes(StandardCharsets.UTF_8))</span><br><span class="line">        .parseClaimsJws(token)</span><br><span class="line">        .getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201209164505128.png" alt="image-20201209164505128"></p>
<h2 id="刷新令牌"><a href="#刷新令牌" class="headerlink" title="刷新令牌"></a>刷新令牌</h2><p>在Spring Cloud Security 中使用oauth2时，如果令牌失效了，可以使用刷新令牌通过refresh_token 的授权模式再次获取access_token。 </p>
<p>只需修改认证服务器的配置，添加refresh_token的授权模式即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clients 客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//内存内</span></span><br><span class="line">    clients.inMemory()</span><br><span class="line">        <span class="comment">//客户端id</span></span><br><span class="line">        .withClient(<span class="string">&quot;client&quot;</span>)</span><br><span class="line">        <span class="comment">//密钥</span></span><br><span class="line">        .secret(passwordEncoder.encode(<span class="string">&quot;12354&quot;</span>))</span><br><span class="line">        <span class="comment">//token有效时间</span></span><br><span class="line">        .accessTokenValiditySeconds(<span class="number">3060</span>)</span><br><span class="line">        <span class="comment">//刷新token</span></span><br><span class="line">        .refreshTokenValiditySeconds(<span class="number">86000</span>)</span><br><span class="line">        .redirectUris(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">        <span class="comment">//授权范围</span></span><br><span class="line">        .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="comment">//授权类型</span></span><br><span class="line">        <span class="comment">//authorization_code;授权码模式</span></span><br><span class="line">        <span class="comment">//password: 密码模式</span></span><br><span class="line">        <span class="comment">//refresh_token:刷新令牌</span></span><br><span class="line">        .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;refresh_token&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201209170717505.png" alt="image-20201209170717505"></p>
<p><img src="https://csn.damyoung.cn/image-20201209170938331.png" alt="image-20201209170938331"></p>
<h1 id="Spring-Security-Oauth2-整合单点登录（SSO）"><a href="#Spring-Security-Oauth2-整合单点登录（SSO）" class="headerlink" title="Spring Security Oauth2 整合单点登录（SSO）"></a>Spring Security Oauth2 整合单点登录（SSO）</h1><h2 id="单点登录简介"><a href="#单点登录简介" class="headerlink" title="单点登录简介"></a>单点登录简介</h2><p>单点登录（SSO——Single Sign On）对于我们来说已经不陌生了。对于大型系统来说使用单点登录可以减少用户很多的麻烦。就拿百度来说吧，百度下面有很多的子系统——百度经验、百度知道、百度文库等等，如果我们使用这些系统的时候，每一个系统都需要我们输入用户名和密码登录一次的话，我相信用户体验肯定会直线下降。当然，对于个人博客这类系统来说根本就用不上单点登录了</p>
<p>假如，我们的系统很庞大，但是就是这一个系统，并没有什么子系统。这时我们也不需要单点登录。我们需要的是搭建集群环境，这里虽说只有一个系统，但是多台主机负载均衡的话就涉及到<a href="http://www.onmpw.com/tm/xwzj/network_144.html">session共享的问题了</a>。Session共享问题较之于SSO来说将比较容易解决了。</p>
<h2 id="整合环境"><a href="#整合环境" class="headerlink" title="整合环境"></a>整合环境</h2><p>创建客户端client01</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#防止Cookie冲突，冲突会导致登录验证不通过</span></span><br><span class="line"><span class="meta">server.servlet.session.cookie.name</span>=<span class="string">OAUTH2-CLIENT-SESSIONID01</span></span><br><span class="line"><span class="comment">#授权服务器地址</span></span><br><span class="line"><span class="meta">oauth2-server-url</span>: <span class="string">http://localhost:8085</span></span><br><span class="line"><span class="comment">#与授权服务器对应的配置</span></span><br><span class="line"><span class="meta">security.oauth2.client.client-id</span>=<span class="string">client</span></span><br><span class="line"><span class="meta">security.oauth2.client.client-secret</span>=<span class="string">12354</span></span><br><span class="line"><span class="meta">security.oauth2.client.user-authorization-uri</span>=<span class="string">$&#123;oauth2-serverurl&#125;/oauth/authorize</span></span><br><span class="line"><span class="meta">security.oauth2.client.access-token-uri</span>=<span class="string">$&#123;oauth2-server-url&#125;/oauth/token</span></span><br><span class="line"><span class="meta">security.oauth2.resource.jwt.key-uri</span>=<span class="string">$&#123;oauth2-server-url&#125;/oauth/token_key</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201209175207743.png" alt="image-20201209175207743"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getCurrentUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">(Authentication authentication)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authentication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器配置</p>
<p>在授权服务器配置中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取密钥必须要身份认证,单点登录必备</span></span><br><span class="line">    security.tokenKeyAccess(<span class="string">&quot;isAuthenticated()&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201209175611283.png" alt="image-20201209175611283"></p>
<p>启动</p>
<p><img src="https://csn.damyoung.cn/image-20201209180344159.png" alt="image-20201209180344159"></p>
<p><img src="https://csn.damyoung.cn/image-20201209180443670.png" alt="image-20201209180443670"></p>
<p><img src="https://csn.damyoung.cn/image-20201209180506771.png" alt="image-20201209180506771"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>并发</title>
    <url>/2020/11/11/12%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><blockquote>
<p>多线程能够提高内存的使用率，提高程序的响应程度</p>
<p>JVM是多线程（main(主线程)，GC线程，异常处理线程）</p>
</blockquote>
<p>IO操作不占用CPU,只是我们一般拷贝文件使用的是<code>阻塞IO</code>，但会一直等待IO结束，没能充分利用线程</p>
<ul>
<li>有<code>非阻塞IO</code>和<code>异步IO</code>优化</li>
</ul>
<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1、进程与线程"><a href="#1、进程与线程" class="headerlink" title="1、进程与线程"></a>1、进程与线程</h4><p><img src="https://camo.githubusercontent.com/a66819fd82c6adfa69b368edf3c52b1fa9cdc89d/68747470733a2f2f6d792d626c6f672d746f2d7573652e6f73732d636e2d6265696a696e672e616c6979756e63732e636f6d2f323031392d332f4a564de8bf90e8a18ce697b6e695b0e68daee58cbae59f9f2e706e67" alt="java运行时内存区域"></p>
<blockquote>
<p>进程process：操作系统分配和调度的基本单位，进程是线程的容器，是程序的实体，拥有独立的内存空间</p>
<p>线程thread：操作系统进行运算调度的最小单位，与其他线程共享内存空间</p>
<p>多个线程共享进程的<strong>堆</strong>和<strong>方法区</strong>资源（<strong>JDK1.8之后使用元空间</strong>），但是每个线程有自己的<strong>程序计数器，虚拟机栈和本地方法栈</strong></p>
<ul>
<li><p>堆是进程中最大的一块内存，主要用于存放新创建的对象 (所有对象都在这里分配内存)</p>
</li>
<li><p>方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。 </p>
</li>
</ul>
<p>线程和进程最大的不同在于基本上各个进程都是独立的，而线程则不一定，同一进程中的不同线程极有可能相互影响。线程执行开销小，但不利于资源的管理和保护；进程则相反。</p>
</blockquote>
<h5 id="1-1-进程通信"><a href="#1-1-进程通信" class="headerlink" title="1.1 进程通信"></a>1.1 进程通信</h5><ul>
<li>同一台计算机进程通信称为IPC</li>
<li>不同计算机之间的进程通过网络，遵守共同的协议HTTP</li>
</ul>
<h5 id="1-2-线程通信"><a href="#1-2-线程通信" class="headerlink" title="1.2 线程通信"></a>1.2 线程通信</h5><ul>
<li>由于线程之间共享内存，多个线程可以访问同一个共享变量</li>
<li>线程更轻量，线程的上下文切换成本一般比进程低</li>
</ul>
<h4 id="2、并行与并发"><a href="#2、并行与并发" class="headerlink" title="2、并行与并发"></a>2、并行与并发</h4><blockquote>
<p>并行：多个CPU同时执行不同的任务 parallel</p>
<p>并发：由CPU的任务调度器完成，轮流运行 concurrent</p>
</blockquote>
<blockquote>
<p>异步：更像一个消息传递，一旦开始，<strong>方法调用就会立即返回</strong>，调用者可以继续后续的操作</p>
<p>同步：形容一次方法调用。同步方法调用一旦开始，调用者必须<strong>等到方法调用返回后</strong>，才能继续后续的行为</p>
</blockquote>
<blockquote>
<p>高并发：响应时间，吞吐量，并发用户数</p>
</blockquote>
<h4 id="3、线程调度模型"><a href="#3、线程调度模型" class="headerlink" title="3、线程调度模型"></a>3、线程调度模型</h4><ul>
<li><p>分时调度模型：所有线程<strong>轮流使用</strong>CPU，平均分配每个线程占用CPU的时间片</p>
</li>
<li><p>抢占式调度模型：优先级高的线程使用CPU，优先级相同，则随机选择一个(JVM)</p>
</li>
</ul>
<h4 id="4、线程三个特性"><a href="#4、线程三个特性" class="headerlink" title="4、线程三个特性"></a>4、线程三个特性</h4><h5 id="4-1-原子性"><a href="#4-1-原子性" class="headerlink" title="4.1 原子性"></a>4.1 原子性</h5><blockquote>
<p>原子操作：只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;  <span class="comment">//语句1直接将数值10赋值给a，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</span></span><br></pre></td></tr></table></figure>

<p><strong>一个操作是不可中断，要么全部执行成功要么全部执行失败</strong></p>
<p>​    即多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程所干扰。</p>
<h5 id="4-2-有序性"><a href="#4-2-有序性" class="headerlink" title="4.2 有序性"></a>4.2 有序性</h5><blockquote>
<p>有序性：是指程序执行的顺序按照代码的先后顺序执行。</p>
</blockquote>
<p><strong>Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序</strong></p>
<h5 id="4-3-可见性"><a href="#4-3-可见性" class="headerlink" title="4.3 可见性"></a>4.3 可见性</h5><blockquote>
<p>可见性：当一个线程修改了共享变量后，其他线程能够立即得知这个修改。</p>
</blockquote>
<h3 id="二、Java多线程"><a href="#二、Java多线程" class="headerlink" title="二、Java多线程"></a>二、Java多线程</h3><blockquote>
<p>主线程：在main方法中</p>
<p>子线程：main方法中启动的其他线程（与主线程平等相同）</p>
<p>主线程放在子线程后，否则会优先执行主线程，线程多次在运行、阻塞之间切换</p>
</blockquote>
<h4 id="1、启动创建线程"><a href="#1、启动创建线程" class="headerlink" title="1、启动创建线程"></a>1、启动创建线程</h4><blockquote>
<p>调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行</p>
</blockquote>
<h5 id="1-1-继承Thread"><a href="#1-1-继承Thread" class="headerlink" title="1.1 继承Thread"></a>1.1 继承Thread</h5><p><strong>创建该类的实例，即创建了线程对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) System.out.println(i+<span class="string">&quot;听音乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Music m=<span class="keyword">new</span> Music();</span><br><span class="line">m.start();</span><br></pre></td></tr></table></figure>

<h5 id="1-2-实现Runnable-接口"><a href="#1-2-实现Runnable-接口" class="headerlink" title="1.2 实现Runnable 接口"></a>1.2 实现Runnable 接口</h5><blockquote>
<p><strong>作为任务对象</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread(Runnable target，name)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Music1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) System.out.println(i+<span class="string">&quot;听音乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Music1 m1=<span class="keyword">new</span> Music1();</span><br><span class="line">Thread t_music=<span class="keyword">new</span> Thread(m1,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">t_music.start();</span><br></pre></td></tr></table></figure>

<h5 id="1-3-Callable接口"><a href="#1-3-Callable接口" class="headerlink" title="1.3 Callable接口"></a>1.3 Callable接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">     <span class="title">V</span> <span class="title">call</span>()</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>Callable函数式泛型接口，带有返回值</strong></p>
<ul>
<li><p><code>RunnableFuture&lt;V&gt;</code> 接口继承了<code>Runnable</code>接口和 <code>Future&lt;V&gt;</code>接口，</p>
</li>
<li><p>将<code>FutureTask&lt;V&gt;</code> 的一个实例当做是一个Runnable接口的实例</p>
</li>
<li><p><code>FutureTask</code>能够接收<code>Callable</code>类型的参数，<strong>用来处理结果有返回值的情况</strong></p>
</li>
<li><p>传入Thread来启动我们新建的线程</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/20180730145740512" alt="img" style="zoom: 80%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FutureTask&lt;Integer&gt; future=<span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Callable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(future,<span class="string">&quot;这是FutureTask线程&quot;</span>).start();</span><br><span class="line">Integer integer = future.get();</span><br><span class="line">System.out.println(integer);</span><br></pre></td></tr></table></figure>

<h5 id="1-4-匿名创建"><a href="#1-4-匿名创建" class="headerlink" title="1.4 匿名创建"></a>1.4 匿名创建</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()&#123; </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++) System.out.println(i+<span class="string">&quot;听音乐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure>

<p>或者，匿名实现runnable接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;听歌线程&quot;</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;听歌&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>

<p>Lambda简化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t2=<span class="keyword">new</span> Thread(  ()-&gt;&#123;</span><br><span class="line"> 	System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;听歌&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="实现接口-VS-继承-Thread"><a href="#实现接口-VS-继承-Thread" class="headerlink" title="实现接口 VS 继承 Thread"></a>实现接口 VS 继承 Thread</h5><p>实现接口会更好一些，因为：</p>
<ul>
<li>Java 不支持多重继承，因此继承了 Thread 类就无法继承其它类，但是可以实现多个接口；</li>
<li>类可能只要求可执行就行，继承整个 Thread 类开销过大。</li>
</ul>
<blockquote>
<p>工具类<code>Executors</code>可以实现<code>Runnable</code>对象和<code>Callable</code>对象之间的相互转换。（<code>Executors.callable（Runnable task）</code>或<code>Executors.callable（Runnable task，Object result）</code>）。</p>
</blockquote>
<h4 id="2、-线程运行原理"><a href="#2、-线程运行原理" class="headerlink" title="2、*线程运行原理"></a>2、*线程运行原理</h4><h5 id="2-1-栈与栈帧"><a href="#2-1-栈与栈帧" class="headerlink" title="2.1 栈与栈帧"></a>2.1 栈与栈帧</h5><blockquote>
<p>JVM中有栈、堆、方法区组成</p>
<p>线程使用栈内存，每个线程启动后，虚拟机为其分配一块栈内存(后进先出)</p>
</blockquote>
<ul>
<li>每一个栈由多个栈帧组成，对应每次方法调用时所占用的内存</li>
<li>每个线程只能有一个活动栈帧，对应正在执行的那个方法</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201001214757147.png" alt="image-20201001214757147" style="zoom: 67%;" />

<h5 id="2-2-线程上下文切换"><a href="#2-2-线程上下文切换" class="headerlink" title="2.2 线程上下文切换"></a>2.2 线程上下文切换</h5><blockquote>
<p>由于一些原因CPU不再执行当前的线程，转而执行另一个线程的代码</p>
</blockquote>
<ul>
<li>线程的CPU时间片用完</li>
<li>垃圾回收</li>
<li>有更高优先级的线程需要运行</li>
<li>主动： 线程自己调用sleep/yield/wait/join/park/synchronized/lock等方法</li>
</ul>
<blockquote>
<p>当Context Switch发生时，需要由<strong>操作系统保存当前线程的状态，并恢复另一个线程的状态</strong></p>
<p>程序计数器，作用是记住下一条jvm指令的执行地址，是线程私有的</p>
</blockquote>
<ul>
<li>状态包括程序计数器、虚拟机栈每个栈帧的信息，如局部变量、操作数栈、返回地址等</li>
<li>频繁的上下文切换会影响性能</li>
</ul>
<h4 id="3、生命周期"><a href="#3、生命周期" class="headerlink" title="3、生命周期"></a>3、生命周期</h4><h5 id="3-1-操作系统层面"><a href="#3-1-操作系统层面" class="headerlink" title="3.1 操作系统层面"></a>3.1 操作系统层面</h5><blockquote>
<p>在操作系统层面上</p>
</blockquote>
<ul>
<li><p>新建new：<code>还未与操作系统线程关联</code></p>
</li>
<li><p>就绪Runnable: start（）<code>关联</code></p>
</li>
<li><p>运行running：由任务调度器分配CPU资源，获取CPU资源，执行run()  —&gt;阻塞、死亡、就绪</p>
</li>
<li><p>阻塞block：失去所占用的资源</p>
<ul>
<li>等待阻塞：wait() </li>
<li>同步阻塞：获取synchronized同步锁失败 </li>
<li>其他阻塞： sleep() 发出I/O请求</li>
</ul>
</li>
<li><p>死亡 dead: 终止</p>
</li>
</ul>
<h5 id="3-2-JavaApi层面"><a href="#3-2-JavaApi层面" class="headerlink" title="3.2** JavaApi层面"></a>3.2** JavaApi层面</h5><blockquote>
<p>Java层面六个状态</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201003112044132.png" alt="image-20201003112044132" style="zoom:80%;" />

<ul>
<li><p>new-新建线程对象，还未于操作系统相关联</p>
</li>
<li><p>2-Runnable–&gt;Waiting</p>
<ul>
<li>obj.wait()</li>
<li>obj.notify()/obj.notifyAll()/thread.interrupt()<ul>
<li>竞争锁失败，waiting–&gt;blocked</li>
<li>竞争锁成功，waiting–&gt;runnable</li>
</ul>
</li>
</ul>
</li>
<li><p>3-Runnable–&gt;waiting</p>
<ul>
<li>调用join方法，<strong>当前线程</strong>进入waiting状态</li>
<li>或调用当前线程interrupt(),<strong>当前线程</strong>进入waiting状态</li>
</ul>
</li>
<li><p>4-Runnable–&gt;waiting</p>
<ul>
<li>LockSupport.park</li>
<li>LockSupport.unpark(目标线程)，waiting–&gt;Runnable</li>
</ul>
</li>
<li><p>5-Runnable–&gt;TimeWaiting</p>
<ul>
<li>wait()</li>
<li>等待超时/notify/notifyAll/interrupt<ul>
<li>竞争锁失败，TimeWaiting–&gt;blocked</li>
<li>竞争锁成功 ,  TimeWaiting–&gt;runnable</li>
</ul>
</li>
</ul>
</li>
<li><p>6-Runnable–&gt;TimeWaiting</p>
<ul>
<li>join(long n)</li>
</ul>
</li>
<li><p>7-Runnable–&gt;TimeWaiting</p>
<ul>
<li>sleep(long n)</li>
</ul>
</li>
<li><p>8-Runnable–&gt;TimeWaiting</p>
<ul>
<li>LockSupport.parkNanos(long nanos)、LockSupport.parkUtil(long mills)</li>
</ul>
</li>
<li><p>9-Runnable–&gt;Blocked</p>
<ul>
<li>获得对象锁时竞争失败</li>
<li>Blocked中EntrySet中的线程竞争成功</li>
</ul>
</li>
<li><p>10-Runnable–&gt;Terminated</p>
<ul>
<li>所有代码运行完毕，进入terminated</li>
</ul>
</li>
</ul>
<h4 id="4、Thread方法"><a href="#4、Thread方法" class="headerlink" title="4、Thread方法"></a>4、Thread方法</h4><h5 id="3-1-start与run"><a href="#3-1-start与run" class="headerlink" title="3.1 start与run"></a>3.1 start与run</h5><blockquote>
<ul>
<li>start() 让线程进入就绪状态(runnable)，当CPU时间片分配到CPU资源才会进行运行(running)状态</li>
<li><code>start()</code>会执行线程的相应准备工作，然后自动去执行<code>run()</code>方法的内容，这时真正的多线程工作</li>
<li>直接执行<code>run()</code>方法，会把<code>run</code>方法当成一个<code>main()</code>线程下的普通方法执行，并不会在某个线程中执行它，所以这并不是多线程工作</li>
</ul>
</blockquote>
<blockquote>
<p><strong>直接调用run() 方法并没有启动新的线程，还是由main线程启动!!!!!!!</strong></p>
</blockquote>
<h5 id="3-2-sleep与yield"><a href="#3-2-sleep与yield" class="headerlink" title="3.2 sleep与yield"></a>3.2 sleep与yield</h5><blockquote>
<p><code>Thread.sleep(millisec)</code>方法会休眠当前正在执行的线程，<code>millisec</code>单位为毫秒。</p>
<p>该方法可能会有两个异常：</p>
<ul>
<li><code>IllegalArgumentException</code>:如果参数为负数</li>
<li><code>InterruptedException</code>:如果任何线程中断了当前线程，就会抛出此异常，此时线程的中断状态将被清除。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>sleep() 放弃CPU时间片，running–&gt;Timed Waiting状态(阻塞状态)</li>
<li>睡眠结束后的线程未必会立刻得到执行，需要等待时间片分配CPU资源</li>
</ul>
<p><code>sleep(long milis)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><p>yield() 让步，会让当前线程从Running进入Runnable就绪状态，然后<strong>调度其它同优先级的线程</strong></p>
</li>
<li><p>在下一次竞争中，若又获得CPU时间片则依旧继续运行</p>
</li>
<li><p>具体实现<strong>依赖于操作系统的任务调度器</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.yield()</span><br></pre></td></tr></table></figure>

<p><strong>应用</strong></p>
<blockquote>
<p>在没有利用cpu计算时，不要让while(true)空转浪费cpu，这时可以使用sleep/yield来转权给其他程序</p>
<p><strong>sleep适用于无需锁同步的场景</strong></p>
</blockquote>
<p><strong>与 sleep() 方法的区别</strong>：</p>
<ul>
<li><code>sleep()</code>方法给其他进程运行时不会考虑进程的优先级问题，因此会给低优先级的线程以运行的机会；<code>yield()</code>方法只会给相同优先级或者更高优先级的线程以运行的机会。</li>
<li><code>sleep()</code>方法声明会抛出<code>InterruptedException</code>异常，而<code>yield()</code>方法没有声明任何异常。</li>
<li><code>sleep()</code>方法比<code>yield()</code>方法（跟操作系统CPU调度相关）具有更好的可移植性。</li>
</ul>
<h5 id="3-3-线程优先级"><a href="#3-3-线程优先级" class="headerlink" title="3.3 线程优先级"></a>3.3 线程优先级</h5><blockquote>
<p>setPority(),仅仅只是一个提示，调度器可以忽略它</p>
<p>CPU比较忙，那么优先级高的线程会获得更多的时间片；cpu闲时，优先级几乎没有作用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.setPriority(t1.MIN_PRIORITY);<span class="comment">//1</span></span><br><span class="line">t1.setPriority(t1.NORM_PRIORITY);<span class="comment">//5</span></span><br><span class="line">t1.setPriority(t1.MAX_PRIORITY);<span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h5 id="3-4-name"><a href="#3-4-name" class="headerlink" title="3.4 name"></a>3.4 name</h5><blockquote>
<p>set Name() 、get Name()</p>
<p>构造方法    Thread(String name)  / Thread(Runnable target, String name)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread(<span class="string">&quot;music&quot;</span>)</span><br><span class="line"></span><br><span class="line">t1.setName(<span class="string">&quot;music&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread.currentThread().setName()</span><br></pre></td></tr></table></figure>

<h5 id="3-5-stop-suspend-resume"><a href="#3-5-stop-suspend-resume" class="headerlink" title="3.5 stop/suspend/resume"></a>3.5 stop/suspend/resume</h5><blockquote>
<p>stop停止/suspend暂停/resume恢复是<code>@deprecated</code>过时方法，在操作同步代码块时,会造成死锁</p>
<p>代替的方法 interrupt/park/unpark</p>
</blockquote>
<h4 id="5、-interrupt"><a href="#5、-interrupt" class="headerlink" title="5、*interrupt"></a>5、*interrupt</h4><p><strong>不可打断模式</strong></p>
<blockquote>
<ul>
<li>interrupt并不是马上停止线程，而是给线程<strong>打一个停止标记</strong>，将线程的中断状态设置为true<ul>
<li>stop()方法也可以停止线程，<strong>线程锁住共享资源</strong>，被杀死后其他线程无法获得共享资源，<strong>其他线程永远无法获得资源</strong></li>
<li>stop停止/suspend暂停/resume恢复是<code>@deprecated</code>过时方法，在操作同步代码块时,会造成死锁</li>
</ul>
</li>
<li><strong>当中断sleep/yield时，会出现InterruptException异常</strong></li>
</ul>
</blockquote>
<p><strong>判断中断</strong></p>
<blockquote>
<ul>
<li>static boolean interrupted()：判断当前线程是否中断，清除中断标志。</li>
<li>boolean isInterrupted()：判断线程是否中断，不清除中断标志。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断线程是否中断，不清楚中断标志</span></span><br><span class="line">            <span class="keyword">boolean</span> interrupted = Thread.currentThread().isInterrupted();</span><br><span class="line">            <span class="comment">//清除中断标志</span></span><br><span class="line">            <span class="keyword">boolean</span> interrupted1 = Thread.interrupted();</span><br><span class="line">            <span class="keyword">if</span> (interrupted)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">Thread.sleep(<span class="number">50</span>);</span><br><span class="line"><span class="comment">//中断线程</span></span><br><span class="line">t1.interrupt();</span><br></pre></td></tr></table></figure>



<h4 id="6、守护线程"><a href="#6、守护线程" class="headerlink" title="6、守护线程"></a>6、守护线程</h4><blockquote>
<p><code>setDaemon(boolean on)</code></p>
<p>垃圾回收线程是典型的守护线程</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;<span class="comment">//死循环</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i am alive&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;finally block&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">DaemonThread daemonThread = <span class="keyword">new</span> DaemonThread();</span><br><span class="line">daemonThread.setDaemon(<span class="keyword">true</span>); <span class="comment">//建立守护线程，守护main方法</span></span><br><span class="line">daemonThread.start();</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br></pre></td></tr></table></figure>

<p>线程如果不设置为守护线程，是一个死循环，会一直执行，当我们把它设置为守护线程后，在主线程执行完成后，守护线程也会退出，但是需要注意的是<strong>守护线程在退出的时候并不会执行finnaly块中的代码，所以将释放资源等操作不要放在finnaly块中执行，这种操作是不安全的</strong>。</p>
<h4 id="7、wait-notify"><a href="#7、wait-notify" class="headerlink" title="7、wait/notify"></a>7、wait/notify</h4><blockquote>
<p><strong>必须获得锁状态下才能使用wait/notify</strong></p>
<p>​    wait(long timeout)：将线程放弃同步锁转换为阻塞状态，直到被其他进程进入该同步锁唤醒为止。</p>
<p>​        -带参wait,会在时限结束后直接进入BLOCKING状态</p>
<p>​    notify():<strong>随机唤醒</strong>一个此同步锁上等待的线程</p>
<p>​    notifyAll():唤醒此同步锁上所有等待中的线程。</p>
</blockquote>
<p><strong>存在的问题</strong></p>
<blockquote>
<p>notify会虚假唤醒问题</p>
<ul>
<li>用notifyAll解决</li>
<li>使用while循环解决</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;春&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;眠&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;不&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;觉&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;晓&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        flag=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.wait();</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(flag==<span class="number">2</span>)&#123;</span><br><span class="line">         System.out.print(<span class="string">&quot;砺&quot;</span>);</span><br><span class="line">         System.out.print(<span class="string">&quot;峰&quot;</span>);</span><br><span class="line">         System.out.print(<span class="string">&quot;科&quot;</span>);</span><br><span class="line">         System.out.print(<span class="string">&quot;技&quot;</span>);</span><br><span class="line">         System.out.print(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">         flag=<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">this</span>.notifyAll();</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     	<span class="keyword">this</span>.wait();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-1-wait和sleep区别和共同点"><a href="#7-1-wait和sleep区别和共同点" class="headerlink" title="7.1 wait和sleep区别和共同点"></a>7.1 wait和sleep区别和共同点</h5><ul>
<li><p>俩者都可用于暂停线程的执行</p>
</li>
<li><p>wait()是<strong>Object</strong>实例方法，sleep()是<strong>Thread</strong>的静态方法</p>
</li>
<li><p>wait()方法必须要在同步方法或者同步代码块中<strong>调用</strong>，也就是必须已经获得对象锁，sleep()方法没有这个限制</p>
<ul>
<li>wait()方法会<strong>释放</strong>占有的对象锁，使得该线程<strong>进入等待池waitSet中</strong>，等待下一次获取资源。</li>
<li>而sleep()方法只是会<strong>让出CPU并不会释放掉对象锁</strong></li>
</ul>
</li>
<li><p>sleep()方法在休眠时间达到后如果再次获得CPU时间片就会<strong>继续执行</strong>，而wait()方法必须等待</p>
<ul>
<li>Object.notift/Object.notifyAll通知后，才会离开等待池，并且再次获得CPU时间片才会继续执行</li>
</ul>
</li>
</ul>
<h5 id="7-2-原理"><a href="#7-2-原理" class="headerlink" title="7.2 原理"></a>7.2 原理</h5><blockquote>
<p>实现原理：见3.4monitor</p>
</blockquote>
<h4 id="8、join原理"><a href="#8、join原理" class="headerlink" title="8、join原理"></a>8、join原理</h4><blockquote>
<p><strong>一个线程等待另一个线程的结束</strong>==&gt;保护性暂停==&gt;<strong>线程同步等待问题</strong></p>
<p>插队：当前线程暂停，等待指定的线程执行结束后，当前线程再继续</p>
<p>在一个线程中调用另一个线程的<code>join()</code>方法，会将当前线程挂起，等待另一个线程执行完毕之后再继续往下执行</p>
<p><code>join(long millis)</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.join(); <span class="comment">//无参</span></span><br><span class="line">t1.join(<span class="number">1000</span>);<span class="comment">//带参,只等待mills的时间</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        i = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    thread.start();</span><br><span class="line">    thread.join(); <span class="comment">//10，无join0</span></span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、共享模型-锁"><a href="#三、共享模型-锁" class="headerlink" title="三、共享模型(锁)"></a>三、共享模型(锁)</h3><h4 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h4><h5 id="1-1-临界区"><a href="#1-1-临界区" class="headerlink" title="1.1 临界区"></a>1.1 临界区</h5><blockquote>
<p>一段代码存在对<strong>共享资源</strong>的<strong>多线程读写</strong>操作，称这段代码为临界区</p>
</blockquote>
<ul>
<li>多线程本身没有问题，也仅仅只是读操作也没用问题</li>
<li>但在多线程对共享资源进行读写操作时，出现<strong>指令交错</strong>时出现问题</li>
</ul>
<h5 id="1-2-竞态条件"><a href="#1-2-竞态条件" class="headerlink" title="1.2 竞态条件"></a>1.2 竞态条件</h5><p>Race Condiction</p>
<blockquote>
<p>在<strong>多线程</strong>下，<strong>没有依赖关系</strong>的代码，在执行<strong>共享变量读写</strong>操作(至少有一个线程写)时，并不能保证以编写顺序执行，这称为发生了竞态条件</p>
</blockquote>
<h5 id="1-3-线程同步"><a href="#1-3-线程同步" class="headerlink" title="1.3 线程同步"></a>1.3 线程同步</h5><blockquote>
<p><strong>线程同步</strong>：当有一个线程对内存进行操作时，其他线程不可以对内存进行，直至该线程结束</p>
</blockquote>
<h5 id="1-4-线程安全"><a href="#1-4-线程安全" class="headerlink" title="1.4 线程安全"></a>1.4 线程安全</h5><blockquote>
<p><strong>上下文切换</strong>造成<strong>指令交错</strong>引发线程安全问题</p>
</blockquote>
<h4 id="2、阻塞式Synchronized"><a href="#2、阻塞式Synchronized" class="headerlink" title="2、阻塞式Synchronized"></a>2、阻塞式Synchronized</h4><blockquote>
<p>避免临界区的竞态条件发生，即保证了线程同步/线程安全</p>
</blockquote>
<h5 id="2-1-Synchronized原理"><a href="#2-1-Synchronized原理" class="headerlink" title="2.1 Synchronized原理"></a><strong>2.1 Synchronized原理</strong></h5><blockquote>
<ul>
<li>Synchronized俗称对象锁，采用<strong>互斥</strong>的方式让同一个时刻至多<strong>只能有一个线程持有同一把对象锁</strong>，其他线程想再获取时会<strong>被阻塞</strong>。</li>
<li>持有锁的线程安全执行临界区的代码，保证了<strong>临界区代码的原子性</strong>，不用担心上下文切换。</li>
<li>Synchronized<strong>锁的是对象</strong>！！！，加在普通方法上锁的是this这个实例对象，加在静态方法上锁的是该类对象</li>
<li>如果有多个线程，<strong>需要对多个线程都加上同一把对象锁</strong>！！！！不然无互斥现象</li>
</ul>
</blockquote>
<blockquote>
<p><strong>保证有序性，但并不能禁止指令重排序</strong></p>
</blockquote>
<p><strong>语法</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象)&#123; <span class="comment">//线程1，线程2(blocked)</span></span><br><span class="line">	临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Synchronized保证了多线程三个特性</strong></p>
<blockquote>
<p><strong>synchronized</strong>能够保证任一时刻只有一个线程执行该代码块(线程同步)，并且在释放锁之前会将对变量的修改刷新到主存当中，那么自然就<strong>不存在原子性和可见性</strong>问题了</p>
</blockquote>
<p><strong>关于Synchronized有序性</strong></p>
<blockquote>
<p>由于Synchronized<strong>保证临界区代码不会发生上下文切换</strong>，当变量完全被Synchronized保护，即使临界区代码发生了重排序也无无影响，故<strong>Synchronized能保证作用范围内有序性(但不能禁止重排序)。</strong></p>
</blockquote>
<h5 id="2-2-同步代码块"><a href="#2-2-同步代码块" class="headerlink" title="2.2 同步代码块"></a>2.2 同步代码块</h5><blockquote>
<p>this/.class/其他对象（d？ Demo d=new Demo()）；</p>
<p>但不能使用匿名内部类</p>
</blockquote>
<ul>
<li><p>初始标志位为1，线程访问时标志位设置<strong>为0</strong>，该线程获得访问代码块的权限；</p>
</li>
<li><p>其他线程访问时发现为0则阻塞；执行完毕时设置为1</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Printer.class)&#123;</span><br><span class="line">		<span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-3-同步方法"><a href="#2-3-同步方法" class="headerlink" title="2.3 同步方法"></a>2.3 同步方法</h5><blockquote>
<p>非静态方法锁：this</p>
<p>静态方法锁：.class</p>
</blockquote>
<blockquote>
<p><strong>普通方法锁住的是实例对象</strong>，静态方法是属于类的，<strong>静态方法锁定的是这个类的所有对象</strong></p>
<p>即不管创建多少个实例，都需要等待锁释放</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、线程安全"><a href="#3、线程安全" class="headerlink" title="3、线程安全"></a>3、线程安全</h4><blockquote>
<p><strong>上下文切换</strong>造成<strong>指令交错</strong>引发线程安全问题</p>
</blockquote>
<h5 id="3-1-成员变量和静态变量"><a href="#3-1-成员变量和静态变量" class="headerlink" title="3.1 成员变量和静态变量"></a>3.1 成员变量和静态变量</h5><ul>
<li>如果没有被共享，则线程安全</li>
<li>如果被共享<ul>
<li>只有读操作，则线程安全</li>
<li>有读写操作，则这段代码是临界区，需要考虑线程安全</li>
</ul>
</li>
</ul>
<h5 id="3-2-局部变量"><a href="#3-2-局部变量" class="headerlink" title="3.2 局部变量"></a>3.2 局部变量</h5><ul>
<li>局部变量是线程安全,没有被共享</li>
<li>局部变量引用的对象则未必<ul>
<li>如果该对象没有逃离方法的作用范围，是线程安全</li>
<li>如果该对象逃离<strong>方法的作用范围</strong>，需要考虑线程安全  （return）</li>
</ul>
</li>
</ul>
<h5 id="3-3-常见线程安全类-不可变类"><a href="#3-3-常见线程安全类-不可变类" class="headerlink" title="3.3 常见线程安全类(不可变类)"></a>3.3 常见线程安全类(不可变类)</h5><p>vector、HashTable、Random、String、Integer、StringBuffer</p>
<blockquote>
<p>多个线程调用它们同一个实例的某个方法时，是线程安全的</p>
</blockquote>
<ul>
<li>它们每个方法是原子的</li>
<li>多个方法的组成不是原子的</li>
</ul>
<blockquote>
<p><strong>不可变类线程安全性</strong>:（String、Integer…）因为其内部的状态不可以改变，因此它们的方法都是线程安全。</p>
</blockquote>
<ul>
<li>String类中replace内部是创建新的String实例，并没有对状态进行改变</li>
</ul>
<h4 id="4、-Monitor-锁"><a href="#4、-Monitor-锁" class="headerlink" title="4、*Monitor(锁)"></a>4、*Monitor(锁)</h4><blockquote>
<p>操作系统提供的Monitor锁</p>
</blockquote>
<h5 id="4-1-java对象头"><a href="#4-1-java对象头" class="headerlink" title="4.1 java对象头"></a>4.1 java对象头</h5><blockquote>
<p>Mark Word：hashcode(hash地址)、bisased_lock偏向锁状态、01表示锁状态</p>
<p>Klass Word：表示对象从属的类</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201002235120076.png" alt="image-20201002235120076" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201002235454295.png" alt="image-20201002235454295" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201002234814861.png" alt="image-20201002234814861" style="zoom:80%;" />

<ul>
<li>biased_lock：1表示开启偏向锁</li>
</ul>
<h5 id="4-2-Monitor"><a href="#4-2-Monitor" class="headerlink" title="4.2 Monitor"></a>4.2 Monitor</h5><p><strong>Synchronized底层原理</strong></p>
<blockquote>
<p>监视器/管程(操作系统)</p>
<p>WaitSet(等待池)、Owner、EntryList(未获得过锁线程)</p>
</blockquote>
<h5 id="4-3-wait原理"><a href="#4-3-wait原理" class="headerlink" title="4.3 wait原理"></a>4.3 wait原理</h5><img src="https://csn.damyoung.cn/image-20201002175837645.png" alt="image-20201002175837645" style="zoom: 80%;" />

<ul>
<li>Owner线程发现条件不满足，调用wait()，即可进入WaitSet进入WAITING状态</li>
<li>BLOCKED(未获得过锁的线程)与WAITING(调用wait方法)线程<strong>都处于阻塞状态</strong>，<strong>不占用CPU时间片</strong><ul>
<li>BLOCKED线程在Owner线程释放锁时唤醒</li>
<li>Waiting线程在Owner线程调用notify/notifyAll时唤醒，但仍进入EntryList条件变量中重新竞争</li>
</ul>
</li>
</ul>
<h4 id="5、-锁优化"><a href="#5、-锁优化" class="headerlink" title="5、**锁优化"></a>5、**锁优化</h4><blockquote>
<p>JVM层面对对象锁的优化</p>
<p>Synchronized是重量级锁(Monitor)、悲观锁、可重入锁、非公平锁</p>
<p>​    不可打断</p>
</blockquote>
<h5 id="5-1-自旋锁"><a href="#5-1-自旋锁" class="headerlink" title="5.1 自旋锁"></a>5.1 自旋锁</h5><blockquote>
<p>互斥同步进入阻塞状态的开销都很大，应该尽量避免，在许多应用中，共享数据的锁定状态只会持续很短的一段时间</p>
<p>自旋锁的思想是让一个线程在请求一个共享数据的锁时执行忙循环（自旋）一段时间，如果在这段时间内能获得锁，就可以避免进入阻塞状态</p>
<p>自旋锁虽然能避免进入阻塞状态从而减少开销，但是它需要进行忙循环操作占用 CPU 时间，它只适用于共享数据的锁定状态很短的场景。</p>
<p>JDK 1.6 中引入了自适应的自旋锁。自适应意味着自旋的次数不再固定了，而是由前一次在同一个锁上的自旋次数及锁的拥有者的状态来决定。</p>
</blockquote>
<h5 id="5-2-锁消除"><a href="#5-2-锁消除" class="headerlink" title="5.2 锁消除"></a>5.2 锁消除</h5><blockquote>
<p>锁消除是指对于被检测出不可能存在竞争的共享数据的锁进行消除。</p>
<p>锁消除主要是通过<strong>逃逸分析</strong>来支持，如果堆上的共享数据不可能逃逸出去被其它线程访问到，那么就可以把它们当成<strong>私有数据</strong>对待，也就可以将它们的<strong>锁进行消除</strong>。</p>
</blockquote>
<p><code>String</code>是一个不可变的类，字符串拼接代码就隐式加了锁，编译器会对<code>String</code>的拼接自动优化。在JDK1.5之前，会转化为<code>StringBuffer</code>对象的连续<code>append()</code>操作。</p>
<blockquote>
<p>现在使用<code>StringBuilder</code>,线程不安全，效率高</p>
</blockquote>
<p>每个<code>append()</code>方法中都有一个同步块。</p>
<p>虚拟机观察变量<code>sb</code>，很快就会发现它的动态作用域被限制在<code>concatString()</code>方法内部。</p>
<p>也就是说，<code>sb</code>的所有引用永远不会逃逸到<code>concatString()</code>方法之外，其他线程无法访问到它，因此可以进行消除。</p>
<h5 id="5-3-锁粗化"><a href="#5-3-锁粗化" class="headerlink" title="5.3 锁粗化"></a>5.3 锁粗化</h5><blockquote>
<p>如果一系列的连续操作都对同一个对象反复加锁和解锁，频繁的加锁操作就会导致性能损耗。</p>
</blockquote>
<p>上一节的示例代码中连续的<code>append()</code>方法就属于这类情况。如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p>
<p>对于上一节的示例代码就是扩展到第一个<code>append()</code>操作之前直至最后一个<code>append()</code>操作之后，这样只需要加锁一次就可以了。</p>
<h5 id="5-4-轻量级锁"><a href="#5-4-轻量级锁" class="headerlink" title="5.4 轻量级锁"></a>5.4 轻量级锁</h5><blockquote>
<ul>
<li><p>如果一个对象虽然有多线程访问，但多线程访问的时间是错开的(没有竞争)，那么可以轻量级锁优化</p>
</li>
<li><p>对使用者是透明的，语法仍然是Synchronized</p>
</li>
<li><p>但每次发生锁重入时，还是需要进行CAS操作</p>
</li>
</ul>
</blockquote>
<h5 id="5-5-锁膨胀"><a href="#5-5-锁膨胀" class="headerlink" title="5.5 锁膨胀"></a>5.5 锁膨胀</h5><blockquote>
<p>在尝试加轻量级锁时，CAS操作无法成功，这时一种情况就是有其他线程为此对象加上了轻量级锁(有竞争),这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>
</blockquote>
<h5 id="5-6-偏向锁"><a href="#5-6-偏向锁" class="headerlink" title="5.6 偏向锁"></a>5.6 偏向锁</h5><blockquote>
<p>轻量级锁在没有竞争时，每次重入都需要执行CAS操作</p>
<p>偏向锁优化：只有第一次使用CAS将线程ID设置到对象的Mark Word头，之后发现这个线程ID是自己的就表示没有竞争。</p>
<p>​                        不用重新CAS。以后只要不发生竞争，这个对象就归该线程所有。</p>
</blockquote>
<h6 id="5-6-1-撤销偏向锁"><a href="#5-6-1-撤销偏向锁" class="headerlink" title="5.6.1 撤销偏向锁"></a>5.6.1 撤销偏向锁</h6><ul>
<li>1-调用对象的Id,但偏向锁的对象MarkWord中存储的是线程Id。如果调用hashcode会导致偏向锁被撤销</li>
<li>2-其他线程使用偏向锁对象，会将偏向锁升级为轻量级锁</li>
</ul>
<h6 id="5-6-2-批量重偏向"><a href="#5-6-2-批量重偏向" class="headerlink" title="5.6.2 批量重偏向"></a>5.6.2 批量重偏向</h6><ul>
<li>对象被多个线程访问，但没有竞争，这时偏向了线程T1的对象仍有机会重新偏向T2，重偏向会重置对象的线程Id</li>
<li>当撤销偏向锁阈值超过20次，会在这些对象加锁时重新偏向至加锁线程。</li>
</ul>
<h6 id="5-6-3-批量撤销"><a href="#5-6-3-批量撤销" class="headerlink" title="5.6.3 批量撤销"></a>5.6.3 批量撤销</h6><p>当撤销偏向锁阈值超过40次后，jvm发现不该偏向，于是整个类的所有对象都会变成不可偏向，<strong>新建的对象也是不可偏向。</strong></p>
<h4 id="6、Park-amp-Unpark"><a href="#6、Park-amp-Unpark" class="headerlink" title="6、Park&amp;Unpark"></a>6、Park&amp;Unpark</h4><blockquote>
<p>LockSupport工具类</p>
<ul>
<li><p>LockSupport.park() 暂停当前线程</p>
</li>
<li><p>LockSupport.unpark(暂停线程对象)   恢复某个线程的运行</p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    LockSupport.park();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//将线程作为形参</span></span><br><span class="line">LockSupport.unpark(t);</span><br></pre></td></tr></table></figure>

<h5 id="park-vs-wait"><a href="#park-vs-wait" class="headerlink" title="park vs wait"></a>park vs wait</h5><ul>
<li>park/unpark以<strong>线程为单位来！！！</strong>【阻塞】【唤醒】线程，而notify是随机唤醒某个线程，不精确</li>
<li>wait必须配合Object Monitor来使用，而park没有这个限制</li>
<li><strong>park( __counter=0)之前可以先unpark(设置_counter=1), wait之前不能先notify</strong></li>
</ul>
<h4 id="7、-Reentrantlock"><a href="#7、-Reentrantlock" class="headerlink" title="7、**Reentrantlock"></a>7、**Reentrantlock</h4><img src="https://csn.damyoung.cn/image-20201007164306417.png" alt="image-20201007164306417" style="zoom:67%;" />

<blockquote>
<p>是在对象级别的锁。而Synchronized是以关键字形式(直接操作Monitor)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//临界区</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-1-可重入"><a href="#7-1-可重入" class="headerlink" title="7.1 可重入"></a>7.1 可重入</h5><blockquote>
<p>可重入指同一个线程如果首次获得这把锁，那么它是这把锁的拥有者，因此有权力再次获得该锁。</p>
<p>Synchronized和ReentrantLock都是可重入锁</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Lock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m1();</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1Finally&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-2-可打断"><a href="#7-2-可打断" class="headerlink" title="7.2 可打断"></a>7.2 可打断</h5><blockquote>
<ul>
<li><p>默认为不可打断模式<code>-见2.5interrupt</code></p>
</li>
<li><p>可打断模式调用<code>lock.lockInterruptibly</code>-通过抛出异常实现</p>
</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201007191014931.png" alt="image-20201007191014931" style="zoom:67%;" />

<p>指线程可以被其他线程调用<code>interrupt()</code>打断。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;thread&quot;</span>);</span><br><span class="line">        <span class="comment">//设置lock为可打断</span></span><br><span class="line">        <span class="comment">//如果没有竞争那么此方法会获取Lock对象锁</span></span><br><span class="line">        <span class="comment">//如果有竞争进入阻塞队列，可以被其他线程用interrupt打断</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;中断异常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获得到锁&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//开启thread线程</span></span><br><span class="line">    thread.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;打断thread&quot;</span>);</span><br><span class="line">    <span class="comment">//打断thread线程</span></span><br><span class="line">    thread.interrupt();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-3-锁超时"><a href="#7-3-锁超时" class="headerlink" title="7.3 锁超时"></a>7.3 锁超时</h5><blockquote>
<p>设置时间，使得在阻塞队列中立即失败</p>
<p><code>tryLock</code>的方法就是试一下，如果能得到锁，就返回true，如果当时得不到，马上就返回false，绝不等。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;尝试获得锁&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!lock.tryLock(<span class="number">1</span>, TimeUnit.SECONDS))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取不到锁&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获得到锁&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-4-非公平锁"><a href="#7-4-非公平锁" class="headerlink" title="7.4 非公平锁"></a>7.4 非公平锁</h5><blockquote>
<p>公平锁：是指多个线程按照申请锁的顺序来获取锁</p>
<p>非公平锁：是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程优先获取锁</p>
</blockquote>
<blockquote>
</blockquote>
<h5 id="7-5-条件变量condition-await"><a href="#7-5-条件变量condition-await" class="headerlink" title="7.5 条件变量condition/await"></a>7.5 条件变量condition/await</h5><blockquote>
<ul>
<li>Condition类是来实现线程之间的协调关系</li>
<li>每个条件变量对应一个<strong>等待队列</strong>，其实现类是<code>ConditionObject</code>(AQS内部类，继承与Condition)</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201007230023942.png" alt="image-20201007230023942" style="zoom:67%;" />

<p>条件变量：Synchronized的WaitSet，但Synchronized只支持一个</p>
<ul>
<li>ReentrantLock支持多个条件变量<ul>
<li>await前需要获得锁，执行后会释放锁，进入ConditionObject等待</li>
<li>await线程被唤醒(或打断、或超时)，重新竞争lock锁</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件变量2个</span></span><br><span class="line">Condition condition1 = lock.newCondition();</span><br><span class="line">Condition condition2 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//进入condition1等待</span></span><br><span class="line">    condition1.await();</span><br><span class="line">    <span class="comment">//唤醒condition1中的线程</span></span><br><span class="line">    condition1.signal();</span><br><span class="line">    condition1.signalAll();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以在<code>Condition</code>上调用<code>await()</code>方法使线程等待，其它线程调用<code>signal()</code>或<code>signalAll()</code>方法唤醒等待的线程。</p>
<p>相比于<code>wait()</code>这种等待方式，<code>await()</code>可以指定等待的条件，因此更加灵活。</p>
</blockquote>
<h5 id="7-6-Synchronized-vs-ReentrantLock"><a href="#7-6-Synchronized-vs-ReentrantLock" class="headerlink" title="7.6 Synchronized vs ReentrantLock"></a>7.6 Synchronized vs ReentrantLock</h5><ul>
<li><strong>两者都是可重入锁</strong></li>
<li><code>synchronized</code>是JVM实现的，<code>ReentrantLock</code>是JDK实现的</li>
<li>新版本的<code>synchronized</code>进行了很多优化，例如自旋锁，<code>synchronized</code>与<code>ReentrantLock</code>大致相同。</li>
<li>当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。 <strong><code>ReentrantLock</code>可中断（通过<code>lock.lockInterruptibly()</code>来实现），而<code>synchronized</code>不行</strong>。</li>
<li><code>synchronized</code>中的锁是非公平的，<code>ReentrantLock</code>默认情况下也是非公平的，但是也可以是公平的（通过<code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>。</li>
<li>一个<code>ReentrantLock</code>可以同时绑定多个<code>Condition</code>对象（绑定多个条件）,从而可以有选择性的进行线程通知，在调度线程上更加灵活。在使用<code>notify()/notifyAll()</code>方法进行通知时，被通知的线程是由 JVM 选择的，用<code>ReentrantLock</code>类结合<code>Condition</code>实例可以实现“选择性通知”。</li>
</ul>
<blockquote>
<p>除非需要使用<code>ReentrantLock</code>的高级功能，否则优先使用<code>synchronized</code>。这是因为<code>synchronized</code>是 JVM 实现的一种锁机制，JVM 原生地支持它，而<code>ReentrantLock</code>不是所有的 JDK 版本都支持。并且使用<code>synchronized</code>不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
</blockquote>
<h4 id="8、多把锁"><a href="#8、多把锁" class="headerlink" title="8、多把锁"></a>8、多把锁</h4><blockquote>
<p>俩个不相干线程使用同一把锁会影响并发度</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigRoom</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object studyRoom=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object sleepRoom=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sleepRoom)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (studyRoom)&#123;</span><br><span class="line">            Thread.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="9、线程活跃性"><a href="#9、线程活跃性" class="headerlink" title="9、线程活跃性"></a>9、线程活跃性</h4><h5 id="9-1-死锁"><a href="#9-1-死锁" class="headerlink" title="9.1 死锁"></a>9.1 死锁</h5><blockquote>
<p>俩个或以上的线程在执行过程中，需要获得多把锁，这时容易发生死锁</p>
<p><strong>这种因线程之间争夺资源而互相等待的现象，需要外力推动</strong></p>
<p>解决：多种锁不能嵌套</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁演示</span></span><br><span class="line"><span class="keyword">synchronized</span> (Product.class)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;卖家有货，等待买家交钱&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Money.class)&#123;</span><br><span class="line">    		System.out.println(<span class="string">&quot;卖家获得钱，交出货物&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决</span></span><br><span class="line"><span class="keyword">synchronized</span> (Money.class)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;买家有钱，等待卖家交货&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sleep(<span class="number">1000</span>);    <span class="comment">//睡眠，让出CPU资源</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (Product.class)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;买家获得货物，钱交给卖家&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="定位死锁"><a href="#定位死锁" class="headerlink" title="定位死锁"></a>定位死锁</h6><ul>
<li>jconsole工具</li>
<li>jps定位进程</li>
</ul>
<h5 id="9-2-活锁"><a href="#9-2-活锁" class="headerlink" title="9.2 活锁"></a>9.2 活锁</h5><blockquote>
<p><strong>俩个线程互相改变对方的结束条件，最后谁也无法结束</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">while</span> (a&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a--;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">   <span class="keyword">while</span> (a&lt;<span class="number">20</span>)&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Thread.sleep(<span class="number">200</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       a++;</span><br><span class="line">       System.out.println(a);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>



<h5 id="9-1-饥饿"><a href="#9-1-饥饿" class="headerlink" title="9.1 饥饿"></a>9.1 饥饿</h5><blockquote>
<p>在公平锁中，由于优先级太低，始终无法得到CPU调度执行，也不能结束，<strong>造成“饥饿”现象</strong></p>
</blockquote>
<h3 id="四、内存模型"><a href="#四、内存模型" class="headerlink" title="四、内存模型"></a>四、内存模型</h3><h4 id="1、Java内存模型"><a href="#1、Java内存模型" class="headerlink" title="1、Java内存模型"></a>1、<strong>Java内存模型</strong></h4><h5 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h5><blockquote>
<p><strong>多线程下Java代码的执行顺序，共享变量的读写！！！</strong></p>
</blockquote>
<blockquote>
<p>JMM即Java Memory Model，从属于JVM，定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等.</p>
<p>JMM试图屏蔽各种硬件和操作系统的内存差异，使得java代码在各种平台都达到一致的内存访问效果</p>
</blockquote>
<blockquote>
<p>共享变量会先放在主存中，每个线程都有属于自己的工作内存，并且会把位于主存中的共享变量拷贝到自己的工作内存</p>
<p>之后的读写操作均使用位于工作内存的变量副本，并在某个时刻将工作内存的变量副本写回到主存中去。</p>
<p>线程只能操作自己工作内存中的变量，不同线程之间的变量值传递需要通过主内存来完成</p>
</blockquote>
<h5 id="1-2-三大特性"><a href="#1-2-三大特性" class="headerlink" title="1.2 三大特性"></a>1.2 三大特性</h5><blockquote>
<ul>
<li>原子性-保证指令不会受到<strong>线程上下文切换</strong>的影响</li>
<li>可见性-保证指令不会受到Cpu<strong>缓存</strong>的影响</li>
<li>有序性-保证指令不会受到CPU<strong>指令并行优化</strong>的影响</li>
</ul>
</blockquote>
<h6 id="1-1-可见性"><a href="#1-1-可见性" class="headerlink" title="1.1 可见性"></a>1.1 可见性</h6><blockquote>
<p><strong>可见性：当一个线程修改了共享变量后，其他线程能够立即得知这个修改。</strong></p>
<ul>
<li><p>当多个线程操作共享变量时，一个CPU中的线程读取主存数据到<strong>CPU缓存</strong>，然后对共享对象做了更改。</p>
</li>
<li><p>但CPU缓存中的更改后的对象还没有flush到主存，此时<strong>线程对共享对象的更改对其它CPU中的线程是不可见的</strong>。 </p>
</li>
<li><p>最终就是每个线程最终都会拷贝共享对象，而且拷贝的对象位于不同的CPU缓存中</p>
</li>
</ul>
</blockquote>
<p><strong>解决</strong></p>
<blockquote>
<ul>
<li>使用<strong>volatile(易变)**关键字，保证变量会</strong>直接从主存读取<strong>，而对变量的</strong>更新也会直接写到主存**(轻量)</li>
<li>使用Synchronized保证临界区代码的原子性，也会在释放锁前将变量直接写入主存中，保证可见性(调用Monitor,重量)</li>
<li><code>final</code>:被<code>final</code>关键字修饰的字段在构造器中一旦初始化完成，并且没有发生<code>this</code>逃逸（其他线程通过<code>this</code>引用访问到初始化一半的对象），那么其他线程就能看见<code>final</code>字段的值。</li>
</ul>
</blockquote>
<h6 id="1-3-原子性"><a href="#1-3-原子性" class="headerlink" title="1.3 原子性"></a>1.3 原子性</h6><blockquote>
<p><strong>原子性：一个操作是不可中断，要么全部执行成功要么全部执行失败</strong></p>
<ul>
<li><p>volatile不能保证原子性，<strong>不能保证指令交错</strong>，仅适合用于一个写线程，多个读线程。</p>
</li>
<li><p>Synchronized保证临界区代码避免发生竞态条件</p>
</li>
</ul>
</blockquote>
<h6 id="1-4-有序性"><a href="#1-4-有序性" class="headerlink" title="1.4 有序性"></a>1.4 有序性</h6><blockquote>
<p><strong>有序性：是指程序执行的顺序按照代码的先后顺序执行。</strong></p>
<p>CPU会对<strong>无依赖关系指令</strong>进行重排序优化</p>
<ul>
<li>volatile可以禁止指令重排序</li>
<li>也可以通过<code>synchronized</code>来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。典型的应用是双重检查锁实现的单例模式。</li>
</ul>
</blockquote>
<h5 id="1-3-内存间的交互操作"><a href="#1-3-内存间的交互操作" class="headerlink" title="1.3 内存间的交互操作"></a>1.3 内存间的交互操作</h5><blockquote>
<p>Java 内存模型定义了 8 个操作来完成主内存和工作内存的交互操作：</p>
</blockquote>
<img src="https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/8b7ebbad-9604-4375-84e3-f412099d170c.png" alt="内存交互操作" style="zoom:80%;" />

<ul>
<li><code>read</code>:把一个变量的值从主内存传输到工作内存中</li>
<li><code>load</code>:在<code>read</code>之后执行，把<code>read</code>得到的值放入工作内存的变量副本中</li>
<li><code>use</code>:把工作内存中一个变量的值传递给执行引擎</li>
<li><code>assign</code>:把一个从执行引擎接收到的值赋给工作内存的变量</li>
<li><code>store</code>:把工作内存的一个变量的值传送到主内存中</li>
<li><code>write</code>:在<code>store</code>之后执行，把<code>store</code>得到的值放入主内存的变量中</li>
<li><code>lock</code>:作用于主内存的变量</li>
<li><code>unlock</code></li>
</ul>
<h5 id="1-4-多线程读写优化"><a href="#1-4-多线程读写优化" class="headerlink" title="1.4 多线程读写优化"></a>1.4 多线程读写优化</h5><blockquote>
<p>如果让线程独占CPU是不合理的，任务调度器会让线程分时使用CPU</p>
</blockquote>
<blockquote>
<p>编译器JIT以及硬件层面会做层层优化，提升性能</p>
<ul>
<li>Complier/JIT优化 </li>
<li>Processor流水线优化</li>
<li>Cache优化</li>
</ul>
</blockquote>
<h6 id="1-1-1-编译器优化"><a href="#1-1-1-编译器优化" class="headerlink" title="1.1.1 编译器优化"></a>1.1.1 编译器优化</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">优化前</span><br><span class="line">	x=<span class="number">1</span></span><br><span class="line">	y=<span class="string">&quot;sss&quot;</span></span><br><span class="line">	x=<span class="number">2</span></span><br><span class="line">优化后</span><br><span class="line">	y=<span class="string">&quot;sss&quot;</span></span><br><span class="line">	x=<span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">优化前</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;max;i++)&#123;</span><br><span class="line">    	z+=a[i]</span><br><span class="line">    &#125;</span><br><span class="line">优化后</span><br><span class="line">	t=z;</span><br><span class="line">	 <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;max;i++)&#123;</span><br><span class="line">    	t+=a[i]</span><br><span class="line">    &#125;</span><br><span class="line">    z=t</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">优化前</span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">		y=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//--</span></span><br><span class="line">	&#125;</span><br><span class="line">优化后</span><br><span class="line">	y=<span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123; <span class="comment">//发现一直true,提取出y</span></span><br><span class="line">		<span class="comment">//---</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h6 id="1-1-2-流水线优化"><a href="#1-1-2-流水线优化" class="headerlink" title="1.1.2 流水线优化"></a>1.1.2 流水线优化</h6><blockquote>
<p>多线程下会导致指令重排序</p>
<ul>
<li>流水线在CPU的一个时钟周期会执行多个指令不同部分</li>
</ul>
</blockquote>
<p><strong>execute Out of Order</strong>乱序执行 </p>
<ul>
<li>按序执行，一旦遇到指令依赖的情况，流水线就会停滞</li>
<li>乱序执行，就可以跳到下一个非依赖指令并发布它。这样执行单元就可以总是处于工作状态，把时间浪费减到最少</li>
</ul>
<h6 id="1-1-3-缓存优化"><a href="#1-1-3-缓存优化" class="headerlink" title="1.1.3 缓存优化"></a>1.1.3 缓存优化</h6><blockquote>
<p>导致可见性问题，缓存会产生 一致性 问题</p>
</blockquote>
<h4 id="2、JMM规范"><a href="#2、JMM规范" class="headerlink" title="2、JMM规范"></a>2、JMM规范</h4><blockquote>
<p>内存模型就是多线程下对共享变量的一组读写规则</p>
<ul>
<li>代码可能的执行顺序       –有序性</li>
<li>共享变量值是否在线程间同步  –可见性</li>
</ul>
</blockquote>
<h5 id="2-1-Race-Condition"><a href="#2-1-Race-Condition" class="headerlink" title="2.1 Race Condition"></a>2.1 Race Condition</h5><blockquote>
<p>竞态条件    </p>
<p>在<strong>多线程</strong>下，<strong>没有依赖关系</strong>的代码，在执行<strong>共享变量读写</strong>操作(至少有一个线程写)时，并不能保证以编写顺序执行，这称为发生了竞态条件</p>
</blockquote>
<p><strong>竞争是为了更好的性能</strong> </p>
<h5 id="2-2-Synchronization-Order"><a href="#2-2-Synchronization-Order" class="headerlink" title="2.2 Synchronization Order"></a>2.2 Synchronization Order</h5><blockquote>
<p>多线程下，每个线程的执行顺序按编写顺序执行，那么必须使用Synchronization Actions保证</p>
<ul>
<li>lock,unlock,synchronized</li>
<li>volatile方式读写读写变量</li>
<li>VarHandle方式 (jdk9)</li>
</ul>
</blockquote>
<h5 id="2-3-Happens-Before"><a href="#2-3-Happens-Before" class="headerlink" title="2.3 Happens-Before"></a>2.3 Happens-Before</h5><blockquote>
<p>JVM还规定了先行发生原则，让一个操作无需控制就能先于另一个操作完成。</p>
<p><strong>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系。</strong></p>
</blockquote>
<ul>
<li><p>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</p>
</li>
<li><p>两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。<strong>如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法</strong>（也就是说，JMM允许这种重排序）</p>
</li>
</ul>
<p><strong>具体规则</strong></p>
<ol>
<li><p>单一线程原则</p>
<blockquote>
<p>Single Thread Rule</p>
<p>一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</p>
</blockquote>
</li>
<li><p>管程锁定规则</p>
<blockquote>
<p>Monitor Lock Rule</p>
<p>一个unLock操作先行发生于后面对同一个锁的lock操作。</p>
</blockquote>
</li>
<li><p>volatile变量规则</p>
<blockquote>
<p>Volatile Variable Rule</p>
<p>对一个变量的写操作先行发生于后面对这个变量的读操作。</p>
</blockquote>
</li>
<li><p>传递规则</p>
<blockquote>
<p>Transitivity</p>
<p>如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C。</p>
</blockquote>
</li>
<li><p>线程启动规则</p>
<blockquote>
<p>Thread Start Rule</p>
<p>Thread对象的start()方法先行发生于此线程的每个一个动作。</p>
</blockquote>
</li>
<li><p>线程中断规则</p>
<blockquote>
<p>Thread Interruption Rule</p>
<p>对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。</p>
</blockquote>
</li>
<li><p>线程终结规则</p>
<blockquote>
<p>线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行。</p>
</blockquote>
</li>
<li><p>对象终结规则</p>
<blockquote>
<p>Finalizer Rule</p>
<p>一个对象的初始化完成先行发生于他的finalize()方法的开始。</p>
</blockquote>
</li>
</ol>
<p>exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writer</span><span class="params">()</span> </span>&#123;     <span class="comment">// 1</span></span><br><span class="line">        a++;                                <span class="comment">// 2</span></span><br><span class="line">    &#125;                                       <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">reader</span><span class="params">()</span> </span>&#123;    <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">int</span> i = a;                         <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>从整体上来看，线程A的执行结果（a=1）对线程B是可见的，实现原理为：释放锁的时候会将值刷新到主内存中，其他线程获取锁时会强制从主内存中获取最新的值。另外也验证了2 happens-before 5，2的执行结果对5是可见的。</p>
</li>
<li><p>从横向来看，这就像线程A通过主内存中的共享变量和线程B进行通信，A 告诉 B 我们俩的共享数据现在为1啦，这种线程间的通信机制正好吻合java的内存模型正好是共享内存的并发模型结构。</p>
</li>
</ul>
<h4 id="3、volatile"><a href="#3、volatile" class="headerlink" title="3、volatile"></a>3、volatile</h4><blockquote>
<p>底层实现原理是<strong>内存屏障</strong>(Memory Barrier)</p>
</blockquote>
<blockquote>
<p><strong>使用场景！！！</strong></p>
<ul>
<li>一个线程修改了某个变量的值，读写操作都同步到主存中，新值对其他线程来说是立即可见的。</li>
<li><strong>禁止进行指令重排序</strong>，保证volatile有序性。</li>
<li>不能保证原子性，仅仅用于仅有一个写操作场景下或运算结果并不依赖于变量的当前值。</li>
</ul>
</blockquote>
<h5 id="3-1-可见性"><a href="#3-1-可见性" class="headerlink" title="3.1 可见性"></a>3.1 可见性</h5><blockquote>
<p>写屏障sfence，<strong>写屏障之前</strong>的所有修改都会同步到主存</p>
<p>读屏障lfence，<strong>读屏障之后</strong>读取都是主存中最新数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> isover=<span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//读屏障</span></span><br><span class="line">                <span class="keyword">while</span> (!isOver) &#123;</span><br><span class="line">                    a++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        isOver = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//写屏障</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-2-有序性"><a href="#3-2-有序性" class="headerlink" title="3.2 **有序性"></a>3.2 **有序性</h5><blockquote>
<p>写屏障，不会将写屏障之前的代码排在写屏障之后</p>
<p>读屏障，不会将读屏障之后的代码排在读屏障之前</p>
</blockquote>
<p><strong>注意！！！！</strong></p>
<blockquote>
<ul>
<li><strong>读屏障仅仅是保证之后的读能够读到最新的结果，但不能保证之前的读操作是最新结果</strong> </li>
<li>有序性的保证只是保证**本线程！！的相关代码不被重排序 ** </li>
</ul>
</blockquote>
<p>double-checked blocking 模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;<span class="comment">//步骤1</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;<span class="comment">//步骤2</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;<span class="comment">//步骤3</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();<span class="comment">//步骤4</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双检锁模式特点</p>
<blockquote>
<ul>
<li>懒惰实例化</li>
<li>首次使用getInstance()，才会使用Synchronized加锁，后续使用无需加锁</li>
<li>第一个if是在同步代码块外，存在线程安全问题，<strong>加入volatile禁止指令重排序</strong></li>
</ul>
</blockquote>
<p>问题</p>
<blockquote>
<p>由于Synchronized保证作用范围内临界区的有序性，并不能禁止指令重排</p>
</blockquote>
<p>因为instance = new Singleton()这条语句实际上包含了<strong>三个操作：</strong></p>
<p>1.分配对象的内存空间；</p>
<p>2.初始化对象    new Singleton()；</p>
<p>3.设置instance指向刚分配的内存地址。 </p>
<blockquote>
<p>步骤2和步骤3可能会被重排序，流程变为1-&gt;3-&gt;2</p>
</blockquote>
<p>如果2和3进行了重排序的话，线程B进行判断if(instance==null)时就会为true，而实际上这个instance并没有初始化成功，将会读取到一个没有初始化完成的对象。</p>
<blockquote>
<p><strong>用volatile修饰</strong>的话就可以禁止2和3操作重排序，从而避免这种情况。<strong>volatile包含禁止指令重排序的语义，其具有有序性</strong>。</p>
</blockquote>
<h5 id="3-3-原子性"><a href="#3-3-原子性" class="headerlink" title="3.3 原子性"></a>3.3 原子性</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">                    counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启10个线程，每个线程都自加10000次，如果不出现线程安全的问题最终的结果应该就是：10*10000 = 100000;可是运行多次都是小于100000的结果，问题在于 <strong>volatile并不能保证原子性</strong></p>
<p>counter++这并不是一个原子操作，包含了三个步骤：1.读取变量counter的值；2.对counter加一；3.将新值赋值给变量counter。</p>
<p>如果线程A读取counter到工作内存后，其他线程对这个值已经做了自增操作后，那么线程A的这个值自然而然就是一个过期的值，因此，总结果必然会是小于100000的。</p>
<p>让volatile保证原子性，必须符合以下两条规则：</p>
<ol>
<li><strong>运算结果并不依赖于变量的当前值，或者能够确保只有一个线程修改变量的值；</strong></li>
<li><strong>变量不需要与其他的状态变量共同参与不变约束</strong></li>
</ol>
<h5 id="3-4-volatile-修饰数组和对象"><a href="#3-4-volatile-修饰数组和对象" class="headerlink" title="3.4 volatile 修饰数组和对象"></a>3.4 volatile 修饰数组和对象</h5><p>volatile 修饰对象或数组时，只能保证他们的<strong>引用地址的可见性</strong>，而不能保证其内部元素具有可见性。</p>
<p>但是如果对于同一个数组，用 volatile 修饰后，在一个线程改编数组中的值，在另一个线程中还是可以马上读取到更新的新值，原因是：</p>
<blockquote>
<p>当另一个线程读取 array 时，因为 array 的引用被 volatile 修饰，所以线程对所有变量都会从主内存去获取，当然也就包括数组的内部值（例如 array[0]）。 所以会让人产生误解，以为是volatile修饰的数组保证了其数组的可见性，其实不然。</p>
</blockquote>
<h4 id="4、double-checked-locking"><a href="#4、double-checked-locking" class="headerlink" title="4、double-checked locking"></a>4、double-checked locking</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance=<span class="keyword">null</span>;    <span class="comment">//保证 instance 在所有线程中同步</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span></span>&#123;&#125;    <span class="comment">//private 避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            Synchronized(LazySingleton.class)&#123;</span><br><span class="line">                <span class="comment">//getInstance 方法前加同步</span></span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双检锁模式特点</p>
<blockquote>
<ul>
<li>懒惰实例化</li>
<li>首次使用getInstance()，才会使用Synchronized加锁，后续使用无需加锁</li>
<li>第一个if是在同步代码块外，存在线程安全问题，<strong>加入volatile禁止指令重排序</strong></li>
</ul>
</blockquote>
<p>详见3.2</p>
<h4 id="5、synchronized关键字和volatile关键字的区别"><a href="#5、synchronized关键字和volatile关键字的区别" class="headerlink" title="5、synchronized关键字和volatile关键字的区别"></a>5、synchronized关键字和volatile关键字的区别</h4><ul>
<li><code>volatile</code>关键字是线程同步的轻量级实现，所以<code>volatile</code>性能比<code>synchronized</code>性能要好。但是<code>volatile</code>关键字只能用于变量而<code>synchronized</code>可以修饰方法和代码块。实际开发中<code>synchronized</code>比较常见。</li>
<li>多线程使用<code>volatile</code>关键字不会发生阻塞，而<code>synchronized</code>可能会发生阻塞。</li>
<li><code>volatile</code>关键字保证数据的可见性，但是不能保证数据的原子性。<code>synchronized</code>关键字两者都能保证。</li>
<li><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而<code>synchronized</code>关键字解决的是多个线程之间访问资源的同步性。</li>
</ul>
<h3 id="五、共享模型-无锁"><a href="#五、共享模型-无锁" class="headerlink" title="五、共享模型(无锁)"></a>五、共享模型(无锁)</h3><blockquote>
<p>无锁操作是使用**CAS(compare and swap)**又叫做比较交换来鉴别线程是否出现冲突</p>
<p>出现冲突就重试当前操作直到没有冲突为止。</p>
<p><strong>无锁特点：</strong></p>
</blockquote>
<ul>
<li>无锁操作效率高，非阻塞锁但不会进入阻塞状态，减少上下文切换，但会不断自旋cas操作而占用CPU资源</li>
<li>体现了<strong>无锁并发</strong>、<strong>无阻塞并发</strong>，但在竞争激烈时反而会影响效率</li>
</ul>
<h4 id="1、CAS"><a href="#1、CAS" class="headerlink" title="1、CAS"></a>1、CAS</h4><blockquote>
<p><strong>CAS是乐观锁，非阻塞锁</strong> compare and swap</p>
<ul>
<li><p>它认为在线程在共享资源时不会发生冲突，不会发生冲突自然就不会阻塞其他线程的操作，故线程也就不会出现阻塞</p>
</li>
<li><p>为了获取变量的最新值(内存地址V)，保证该变量的可见性，<strong>需要使用volatile修饰</strong></p>
</li>
</ul>
</blockquote>
<blockquote>
<p>synchronized 是悲观锁（阻塞锁），悲观地认为程序中的并发情况严重</p>
</blockquote>
<h5 id="1-1-操作过程"><a href="#1-1-操作过程" class="headerlink" title="1.1 操作过程"></a>1.1 操作过程</h5><p>3个基本操作数：内存地址V(可能被其他线程修改的值)，旧的期望值O(先前获取的值)，要修改的新值N</p>
<p>更新变量时，当变量的期望值与内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为N</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">i.compareAndSet(<span class="number">10</span>, <span class="number">3</span>)  <span class="comment">//false，不可修改</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-CAS的问题"><a href="#1-2-CAS的问题" class="headerlink" title="1.2 CAS的问题"></a>1.2 CAS的问题</h5><h6 id="1-2-1-ABA问题"><a href="#1-2-1-ABA问题" class="headerlink" title="1.2.1 ABA问题"></a>1.2.1 ABA问题</h6><p>CAS会检查旧值有无变化，比如一个旧值A变为了成B，然后再变成A，刚好在做CAS时检查发现旧值并没有变化依然为A，但是实际上的确发生了变化</p>
<p><strong>解决</strong>：添加一个版本号<code>AtomicStampedReference()</code>，原来的变化路径A-&gt;B-&gt;A就变成了1A-&gt;2B-&gt;3C。</p>
<h6 id="1-2-2-自旋时间过长"><a href="#1-2-2-自旋时间过长" class="headerlink" title="1.2.2 自旋时间过长"></a>1.2.2 自旋时间过长</h6><p>CAS是<strong>非阻塞</strong>同步，不会把线程挂起，会自旋进行下一次尝试，自旋时间过长会对性能消耗</p>
<h6 id="1-2-3-只能保证一个共享资源的原子操作"><a href="#1-2-3-只能保证一个共享资源的原子操作" class="headerlink" title="1.2.3 只能保证一个共享资源的原子操作"></a>1.2.3 只能保证一个共享资源的原子操作</h6><p>当对一个共享变量执行操作时CAS能保证其原子性，如果对多个共享变量进行操作,CAS就不能保证其原子性</p>
<p><strong>解决：</strong>用一个对象整合多个共享变量，atomic中提供<code>AtomicReference</code>来保证引用对象之间的原子性</p>
<h4 id="2、原子整数"><a href="#2、原子整数" class="headerlink" title="2、原子整数"></a>2、原子整数</h4><p>java并发包concurrent工具类</p>
<ul>
<li>AtomicBoolean</li>
<li>AtomicInteger</li>
<li>AtomicLong</li>
</ul>
<blockquote>
<p>例如i++操作，不是原子操作  1. 读取i的初始值 2.++  3.终值赋予</p>
<p>在 getAndIncrement()中，是原子操作</p>
<p><strong>保证基本类型操作的原子性</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造初始值</span></span><br><span class="line">AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//自增并获取++i</span></span><br><span class="line">System.out.println(i.incrementAndGet());</span><br><span class="line"><span class="comment">//i++</span></span><br><span class="line">System.out.println(i.getAndIncrement());</span><br><span class="line">System.out.println(i.get());</span><br><span class="line"></span><br><span class="line"><span class="comment">//先获取再加</span></span><br><span class="line">System.out.println(i.getAndAdd(<span class="number">5</span>));</span><br><span class="line"><span class="comment">//先加</span></span><br><span class="line">System.out.println(i.addAndGet(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//读取到值-&gt;设置的值</span></span><br><span class="line"><span class="comment">//使用Lambda表达式</span></span><br><span class="line">i.updateAndGet(value-&gt;value+<span class="number">10</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3、原子引用"><a href="#3、原子引用" class="headerlink" title="3、原子引用"></a>3、原子引用</h4><ul>
<li>AtomicReference</li>
<li>AtomicMarkableReference  记录有没有被更改过，boolean</li>
<li>AtomicStampedReference </li>
</ul>
<h5 id="3-1-AtomicReference"><a href="#3-1-AtomicReference" class="headerlink" title="3.1 AtomicReference"></a>3.1 AtomicReference</h5><blockquote>
<p>AtomicReference&lt;引用对象&gt; balance=new AtomicReference&lt;&gt;(引用对象参数)</p>
<p><strong>保护对象引用的原子性</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecimalAccounts</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;BigDecimal&gt; balance;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecimalAccounts</span><span class="params">(BigDecimal bigDecimal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance=<span class="keyword">new</span> AtomicReference&lt;&gt;(bigDecimal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-AtomicStampedReference"><a href="#3-2-AtomicStampedReference" class="headerlink" title="3.2 AtomicStampedReference"></a>3.2 AtomicStampedReference</h5><p><strong>添加多个版本号，解决ABA</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> AtomicStampedReference&lt;String&gt; ref=<span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="string">&quot;a&quot;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取初始值</span></span><br><span class="line">    String reference = ref.getReference();</span><br><span class="line">    <span class="comment">//获取版本号</span></span><br><span class="line">    <span class="keyword">int</span> stamp = ref.getStamp();</span><br><span class="line">    </span><br><span class="line">    ref.compareAndSet(reference,<span class="string">&quot;b&quot;</span>,stamp,stamp+<span class="number">1</span>);</span><br><span class="line">    System.out.println(ref.getReference());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-3-AtomicMarkableReference"><a href="#3-3-AtomicMarkableReference" class="headerlink" title="3.3 AtomicMarkableReference"></a>3.3 AtomicMarkableReference</h5><blockquote>
<p>返回比较成功与否的boolean值。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicMarkableReference ref=<span class="keyword">new</span> AtomicMarkableReference(bag,<span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">boolean</span> success=ref.compareAndSet(bag,<span class="keyword">new</span> bag(),<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>



<h4 id="4、原子数组"><a href="#4、原子数组" class="headerlink" title="4、原子数组"></a>4、原子数组</h4><ul>
<li>AtomicIntegerArray</li>
<li>AtomicLongArray</li>
<li>AtomicReferenceArray</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AtomicIntegerArray atomicIntegerArray = <span class="keyword">new</span> AtomicIntegerArray(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> length = atomicIntegerArray.length();</span><br><span class="line">atomicIntegerArray.set(<span class="number">1</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(atomicIntegerArray.get(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>



<h4 id="5、字段更新器"><a href="#5、字段更新器" class="headerlink" title="5、字段更新器"></a>5、字段更新器</h4><ul>
<li>AtomicReferenceFieldUpdater</li>
</ul>
<blockquote>
<p>保证对象成员变量，字段的线程安全性</p>
<p><strong>只能配合volatile修饰的字段</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line">&#125;</span><br><span class="line">Student stu=<span class="keyword">new</span> Student();</span><br><span class="line">AtomicReferenceFieldUpdater updater=</span><br><span class="line">   AtomicReferenceFieldUpdater.newUpdater(Student.class,String.class,<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">updater.compareAndSet(stu,<span class="keyword">null</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure>



<h4 id="6、？原子累加器"><a href="#6、？原子累加器" class="headerlink" title="6、？原子累加器"></a>6、？原子累加器</h4><blockquote>
<p>jdk8新增累加类 <code>LongAdder</code>，较与AtomicLong/…性能更好</p>
</blockquote>
<p>听不懂，以后再看</p>
<h3 id="六、不可变对象"><a href="#六、不可变对象" class="headerlink" title="六、不可变对象"></a>六、不可变对象</h3><h4 id="1、不可变设计"><a href="#1、不可变设计" class="headerlink" title="1、不可变设计"></a>1、不可变设计</h4><blockquote>
<p>vector、HashTable、Random、String、Integer、StringBuffer、DateTimeFormatter</p>
<p>变量使用final修饰</p>
</blockquote>
<blockquote>
<p>不可变对象可以保证线程安全</p>
<ul>
<li>它们每个方法是原子的</li>
<li><strong>多个方法的组成不是原子的</strong></li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        TemporalAccessor parse = dateTimeFormatter.parse(<span class="string">&quot;1911-04-03&quot;</span>);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">    &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><blockquote>
<p>当发生修改操作时，<strong>保护性拷贝</strong>，避免<strong>共享产生线程安全问题</strong></p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201004195902776.png" alt="image-20201004195902776" style="zoom:67%;" />



<h4 id="2、final原理"><a href="#2、final原理" class="headerlink" title="2、final原理"></a>2、final原理</h4><blockquote>
<p> 加入了<strong>写屏障保护</strong>，保证变量值的可见性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinal</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.分配内存空间</span></span><br><span class="line">    <span class="comment">//2.初始化0</span></span><br><span class="line">    <span class="comment">//3.赋值20</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201010152712727.png" alt="image-20201010152712727" style="zoom:80%;" />



<h3 id="七、线程池"><a href="#七、线程池" class="headerlink" title="七、线程池"></a>七、线程池</h3><h4 id="1、自定义线程池"><a href="#1、自定义线程池" class="headerlink" title="1、自定义线程池"></a>1、自定义线程池</h4><blockquote>
<p>基于生产消费者模式</p>
<p>Thread Pool  任务的消费者 &gt;&gt;&gt; Blocking Queue阻塞队列 &gt;&gt;&gt; main任务的生产者</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201005130109179.png" alt="image-20201005130109179" style="zoom: 67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程池对象</span></span><br><span class="line">        ThreadPool threadPool=<span class="keyword">new</span> ThreadPool(<span class="number">1</span>,<span class="number">1000</span>,TimeUnit.MILLISECONDS,<span class="number">1</span>,(queue,task)-&gt;&#123;</span><br><span class="line">            <span class="comment">//1、死等</span></span><br><span class="line"><span class="comment">//            queue.put(task);</span></span><br><span class="line">            <span class="comment">//2.带超时等待</span></span><br><span class="line"><span class="comment">//            queue.offer(task,500,TimeUnit.MILLISECONDS);</span></span><br><span class="line">            <span class="comment">//3.放弃任务执行</span></span><br><span class="line"><span class="comment">//            System.out.println(task);</span></span><br><span class="line">            <span class="comment">//4.让调用自己抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;任务执行失败&quot;</span>+task);        </span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j=i;</span><br><span class="line">            threadPool.execute(()-&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(j);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//拒绝策略</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RejectPolicy</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">reject</span><span class="params">(BlockingQueue&lt;T&gt; queue,T task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span></span>&#123;</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class="line">    <span class="comment">//线程集合</span></span><br><span class="line">    <span class="keyword">private</span> HashSet&lt;Worker&gt; workers=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心线程数,即线程池大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> coreSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取超时时间数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeOut;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeUnit timeUnit;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//拒绝策略</span></span><br><span class="line">    <span class="keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入一个任务,并执行任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.当任务数没有超过coreSize时，直接交给worker对象执行</span></span><br><span class="line">        <span class="comment">//2.当任务数超过coreSize时，加入任务队列暂存</span></span><br><span class="line">        <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">            <span class="keyword">if</span> (workers.size()&lt;coreSize)&#123;</span><br><span class="line">                Worker worker= <span class="keyword">new</span> Worker(task);</span><br><span class="line">                </span><br><span class="line">                System.out.println(<span class="string">&quot;新增任务&quot;</span>+worker);</span><br><span class="line">                <span class="comment">//添加到线程集合中</span></span><br><span class="line">                workers.add(worker);</span><br><span class="line">                </span><br><span class="line">                worker.start();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//1.队列满了就死等</span></span><br><span class="line"><span class="comment">//                taskQueue.put(task);</span></span><br><span class="line">                <span class="comment">//2.带超时等待</span></span><br><span class="line">                <span class="comment">//3.放弃任务执行</span></span><br><span class="line">                <span class="comment">//4.让调用自己抛出异常</span></span><br><span class="line">                <span class="comment">//5.让调用者自己执行</span></span><br><span class="line">                taskQueue.tryPut(rejectPolicy,task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPool</span><span class="params">(<span class="keyword">int</span> coreSize, <span class="keyword">long</span> timeOut, TimeUnit timeUnit,<span class="keyword">int</span> capacity,RejectPolicy&lt;Runnable&gt; 							rejectPolicy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coreSize = coreSize;</span><br><span class="line">        <span class="keyword">this</span>.timeOut = timeOut;</span><br><span class="line">        <span class="keyword">this</span>.timeUnit = timeUnit;</span><br><span class="line">        <span class="keyword">this</span>.taskQueue=<span class="keyword">new</span> BlockingQueue&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">this</span>.rejectPolicy=rejectPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Runnable task;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//执行任务</span></span><br><span class="line">            <span class="comment">//1.当task不为空，执行任务</span></span><br><span class="line">            <span class="comment">//2.当task执行完毕，在接着从任务队列中获取任务并执行</span></span><br><span class="line"><span class="comment">//            while(task !=null ||(task=taskQueue.take())!=null )&#123;</span></span><br><span class="line">            <span class="comment">//超时限制获取策略</span></span><br><span class="line">            <span class="keyword">while</span>(task !=<span class="keyword">null</span> ||(task=taskQueue.poll(timeOut,timeUnit))!=<span class="keyword">null</span> )&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;正在执行&quot;</span>+task);</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    task=<span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当任务队列的任务执行完毕时。从线程集合中移除</span></span><br><span class="line">            <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">                workers.remove(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阻塞队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1.任务队列(Deque双向队列)_</span></span><br><span class="line">    <span class="keyword">private</span> Deque&lt;T&gt; queue=<span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.锁，线程安全</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.生产者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition fullWaitSet=lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.消费者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> Condition emptyWaitSet=lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capcity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueue</span><span class="params">(<span class="keyword">int</span> capcity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capcity = capcity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带超时的阻塞获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将timeout转化未纳秒</span></span><br><span class="line">            <span class="keyword">long</span> nanos=unit.toNanos(timeout);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (nanos&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//返回是剩余时间</span></span><br><span class="line">                    nanos = emptyWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取队列第一个元素</span></span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            <span class="comment">//唤醒生产者条件变量</span></span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞任务获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">take</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emptyWaitSet.await();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取队列第一个元素</span></span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            <span class="comment">//唤醒生产者条件变量</span></span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带超时的阻塞添加</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T task,<span class="keyword">long</span> timeout,TimeUnit timeUnit)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将timeout转化为纳秒</span></span><br><span class="line">            <span class="keyword">long</span> nanos=timeUnit.toNanos(timeout);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (queue.size()==capcity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待加入任务队列&quot;</span>+task);</span><br><span class="line">                    <span class="keyword">if</span> (nanos&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;加入任务队列&quot;</span>+task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            <span class="comment">//唤醒消费者条件变量</span></span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T element)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size()==capcity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;等待加入任务队列&quot;</span>+element);</span><br><span class="line">                    fullWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;加入任务队列&quot;</span>+element);</span><br><span class="line">            queue.addLast(element);</span><br><span class="line">            <span class="comment">//唤醒消费者条件变量</span></span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.size();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryPut</span><span class="params">(RejectPolicy&lt;T&gt; rejectPolicy,T task)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断队列是否已满</span></span><br><span class="line">            <span class="keyword">if</span> (queue.size()==capcity)&#123;</span><br><span class="line">                rejectPolicy.reject(<span class="keyword">this</span>,task);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;加入任务队列&quot;</span>+task);</span><br><span class="line">                queue.addLast(task);</span><br><span class="line">                <span class="comment">//唤醒消费者条件变量</span></span><br><span class="line">                emptyWaitSet.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、ThreadPoolExecutor"><a href="#2、ThreadPoolExecutor" class="headerlink" title="2、ThreadPoolExecutor"></a>2、ThreadPoolExecutor</h4><img src="https://csn.damyoung.cn/image-20201005170916502.png" alt="image-20201005170916502" style="zoom:67%;" />



<blockquote>
<p>线程池的顶级接口是<code>Executor</code>,<strong>管理多个异步任务的执行，而无需程序员显式的管理线程的生命周期</strong>。</p>
<p>线程池的顶级接口是<code>Executor</code>,线程池接口是<code>ExecutorService</code></p>
</blockquote>
<h5 id="2-1-线程池状态"><a href="#2-1-线程池状态" class="headerlink" title="2.1  线程池状态"></a>2.1  线程池状态</h5><blockquote>
<p>使用int(4个字节) 的高3位(有符号位)来表示线程状态，低29位表示线程数量</p>
<p><strong>目的:</strong> 存储在一个原子变量ctl中，目的是将线程池状态与线程个数合二为一，这样就可以使用一次CAS原子操作进行赋值。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201005171216379.png" alt="image-20201005171216379" style="zoom:67%;" />

<h5 id="2-2-构造方法以及创建线程方法"><a href="#2-2-构造方法以及创建线程方法" class="headerlink" title="2.2 构造方法以及创建线程方法"></a>2.2 构造方法以及创建线程方法</h5><h6 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>corePoolSize 核心线程数目</li>
<li>maximumPoolSize 最大线程数</li>
<li>keepAliveTime  生存时间-针对救急线程</li>
<li>unit 时间单位-针对救急线程</li>
<li>workQueue 阻塞队列</li>
<li>threadFactory 线程工厂-可以为线程创建时起个好名字</li>
<li>handler 拒绝策略</li>
</ul>
<blockquote>
<p>ThreadPoolExecutor 线程池中存在核心线程和救急线程==&gt;最大线程数</p>
<ul>
<li><p>当**阻塞队列满(配合有界队列)**时，又有新任务，才会动用救急线程，救急线程有生存时间。</p>
</li>
<li><p>当救急线程也满时，才会执行<strong>拒绝策略</strong></p>
<p>jdk:</p>
<ul>
<li>AbortPolicy 抛出RejectExecutionException异常，默认策略</li>
<li>CallerRunsPolicy 让调用者运行任务</li>
<li>DiscardPolicy 放弃本次任务</li>
<li>DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之</li>
</ul>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201005174351695.png" alt="image-20201005174351695" style="zoom: 67%;" />

<h6 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h6><blockquote>
<p><strong>通过<code>Executor</code>框架的工具类<code>Executors</code>来实现</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger t=<span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r,<span class="string">&quot;myPool_t&quot;</span>+t.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong><code>Executors</code>返回线程池对象的弊端如下：</strong></p>
<ul>
<li><code>FixedThreadPool</code>和<code>SingleThreadExecutor</code>：允许请求的队列长度为<code>Integer.MAX_VALUE</code>，可能堆积大量的请求，从而导致OOM。</li>
<li><code>CacheThreadPool</code>和<code>ScheduledThreadPool</code>：允许创建的线程数量为<code>Integer.MAX_VALUE</code>，可能会创建大量线程，从而导致OOM</li>
</ul>
<h5 id="2-3-四种线程池"><a href="#2-3-四种线程池" class="headerlink" title="2.3 四种线程池"></a>2.3 四种线程池</h5><h6 id="2-3-newFixedThreadPool"><a href="#2-3-newFixedThreadPool" class="headerlink" title="2.3 newFixedThreadPool"></a>2.3 newFixedThreadPool</h6><blockquote>
<p>固定大小的线程池，适用于<strong>任务量已知，相对耗时</strong>的任务</p>
</blockquote>
<p>特点</p>
<ul>
<li>核心线程数==最大线程数(没有救急线程被创建)，因此也无需超时时间</li>
<li>阻塞队列是无界的，可以放任意数量的任务。</li>
<li>当某个线程执行出现异常而结束，线程池会补充一个新的线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger t=<span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Thread(r,<span class="string">&quot;myPool_t&quot;</span>+t.getAndIncrement());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="2-4-newCachedThreadPool"><a href="#2-4-newCachedThreadPool" class="headerlink" title="2.4 newCachedThreadPool"></a>2.4 newCachedThreadPool</h6><blockquote>
<p>核心线程数是0，最大线程数是Integer.MAX_VALUE。</p>
<ul>
<li>全部是救急线程(当线程空闲时，60s后会进行回收)</li>
<li>救急线程可以无限创建</li>
</ul>
<p>队列采用SynchronousQueue，没有容量，没有线程来取是放不进去的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>适用于<strong>任务数比较密集，每个任务执行时间短</strong></p>
</blockquote>
<h6 id="2-5-newSingleThreadExecutor"><a href="#2-5-newSingleThreadExecutor" class="headerlink" title="2.5 newSingleThreadExecutor"></a>2.5 newSingleThreadExecutor</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>保证所有任务的执行顺序按照任务的提交顺序执行</strong>，线程固定为1，多于1时，会放入<strong>无界队列</strong>排队。</p>
<p>任务执行完毕，这唯一的线程也不会被释放</p>
</blockquote>
<p><strong>区别</strong></p>
<ul>
<li>自己创建一个单线程串行执行，执行失败而终止而没有任何补救措施。而线程池还会创建新线程补救</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">executorService.execute(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>Executors.newSingleThreadExecutor 线程数始终为1，<strong>不能修改</strong><ul>
<li>应用装饰器模式，只对外暴露<code>ExecutorService</code>接口，不能调用<code>ThreadPoolExecutor</code>特有方法</li>
</ul>
</li>
<li>Executors.newFixedThreadPool(1)初始时为1，以后<strong>还可以修改</strong><ul>
<li>对外暴露的是<code>ThreadPoolExecutor</code>对象，强转后调用setCorePoolSize等方法进行修改。</li>
</ul>
</li>
</ul>
<h6 id="2-6-任务调度线程池"><a href="#2-6-任务调度线程池" class="headerlink" title="2.6 任务调度线程池"></a>2.6 任务调度线程池</h6><blockquote>
<p><strong>支持定时以及周期性执行任务的需求</strong></p>
</blockquote>
<p>Timer</p>
<blockquote>
<p>java.util.Timer</p>
<p><strong>实现定时功能</strong>，但由于所有的任务都是由同一个线程调度，因此所有任务都是<strong>串行执行</strong>的</p>
<p>同一个时间只能有一个任务在执行，前一个任务的延迟或异常都会影响到之后的任务。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer=<span class="keyword">new</span> Timer();</span><br><span class="line">TimerTask timerTask1 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Timer任务1&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">TimerTask timerTask2 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Timer任务2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">timer.schedule(timerTask1,<span class="number">1000</span>);</span><br><span class="line">timer.schedule(timerTask2,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>newScheduledThreadPool</p>
<p><strong>延时执行</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">scheduledExecutorService.schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;,<span class="number">1</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">scheduledExecutorService.schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>

<p><strong>定时执行</strong></p>
<blockquote>
<p>scheduleAtFixedRate   每间隔1s执行</p>
<p>以下例子每隔2s执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scheduledExecutorService.scheduleAtFixedRate(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//延时时间，时间间隔，时间单位</span></span><br><span class="line">&#125;,<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>scheeduleWithFixedRate 会在上一次任务执行完了之后再间隔1s执行</p>
<p>以下例子每隔3s执行</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">scheduledExecutorService.scheduleWithFixedDelay(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>



<h5 id="2-4-提交任务"><a href="#2-4-提交任务" class="headerlink" title="2.4 提交任务"></a>2.4 提交任务</h5><h6 id="2-4-1-execute"><a href="#2-4-1-execute" class="headerlink" title="2.4.1 execute"></a>2.4.1 execute</h6><blockquote>
<p>void execute(Runnable command)</p>
</blockquote>
<h6 id="2-4-2-submit"><a href="#2-4-2-submit" class="headerlink" title="2.4.2 submit"></a>2.4.2 submit</h6><blockquote>
<p>Funture&lt;&gt; submit(Callable c)</p>
<p>提交任务task,用<strong>返回值Future获得任务执行结果</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(future.get());</span><br></pre></td></tr></table></figure>

<h6 id="2-4-3-invokeAll"><a href="#2-4-3-invokeAll" class="headerlink" title="2.4.3 invokeAll"></a>2.4.3 invokeAll</h6><blockquote>
<p>提交tasks所有任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br></pre></td></tr></table></figure>

<p>带超时时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                              <span class="keyword">long</span> timeout, TimeUnit unit)</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">List&lt;Future&lt;String&gt;&gt; futures = executorService.invokeAll(Arrays.asList(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">));</span><br><span class="line">futures.forEach(future-&gt;&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h6 id="2-4-4-invokeAny"><a href="#2-4-4-invokeAny" class="headerlink" title="2.4.4 invokeAny"></a>2.4.4 invokeAny</h6><blockquote>
<p>提交tasks所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其他任务取消</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">Object invokeAny = executorService.invokeAny(Arrays.asList(</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;2&quot;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        () -&gt; &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">));</span><br><span class="line">System.out.println(invokeAny.toString()); <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h5 id="2-5-关闭线程池"><a href="#2-5-关闭线程池" class="headerlink" title="2.5 关闭线程池"></a>2.5 关闭线程池</h5><h6 id="2-5-1-shutdown"><a href="#2-5-1-shutdown" class="headerlink" title="2.5.1 shutdown"></a>2.5.1 shutdown</h6><blockquote>
<p>线程池状态变为    SHUTDOWN</p>
<ul>
<li>不会接收新任务</li>
<li>但已提交的任务会执行完</li>
<li>该方法不会阻塞调用线程的执行,仅会打断空闲线程</li>
</ul>
<p>void shutdown()</p>
</blockquote>
<h6 id="2-5-2-shutdownNow"><a href="#2-5-2-shutdownNow" class="headerlink" title="2.5.2 shutdownNow"></a>2.5.2 shutdownNow</h6><blockquote>
<p>线程池状态变为    STOP</p>
<ul>
<li>不会接收新任务</li>
<li>会将队列中的任务返回</li>
<li>并用 interrupt 的方式中断正在执行的任务</li>
</ul>
<p>List<Runnable> shutdownNow()</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;finish111&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Future&lt;String&gt; future1 = executorService.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;finish222&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Future&lt;String&gt; future2 = executorService.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;finish333&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;shutdown&quot;</span>);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line"><span class="comment">//        List&lt;Runnable&gt; runnables = executorService.shutdownNow();</span></span><br><span class="line"><span class="comment">//        System.out.println(runnables);</span></span><br></pre></td></tr></table></figure>



<h5 id="2-6-线程池处理线程异常"><a href="#2-6-线程池处理线程异常" class="headerlink" title="2.6 线程池处理线程异常"></a>2.6 线程池处理线程异常</h5><blockquote>
<ul>
<li>try-catch任务自身处理异常</li>
<li>使用Callable得到返回结果，会将异常信息<strong>封装在future对象中</strong></li>
</ul>
</blockquote>
<h4 id="3、Fork-join-线程池"><a href="#3、Fork-join-线程池" class="headerlink" title="3、Fork/join 线程池"></a>3、Fork/join 线程池</h4><blockquote>
<p>jdk1.7 的线程池实现</p>
<ul>
<li><p>体现分治思想，适用于能够进行<strong>任务拆分的cpu密集运算</strong>，默认创建与cpu核心数大小的线程池</p>
</li>
<li><p>任务拆分：将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解</p>
<p><strong>将每个任务的分解和合并交给不同的线程来完成，进一步提升运算效率</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ForkJoinPool pool=<span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">    System.out.println(pool.invoke(<span class="keyword">new</span> MyTask(<span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承RecursiveTask&lt;返回值类型&gt; 递归task</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        MyTask t1=<span class="keyword">new</span> MyTask(n-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//让一个线程执行此任务</span></span><br><span class="line">        <span class="comment">//拆分</span></span><br><span class="line">        t1.fork();</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        <span class="keyword">int</span> result=n+t1.join();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="八、J-U-C"><a href="#八、J-U-C" class="headerlink" title="八、J.U.C"></a>八、J.U.C</h3><blockquote>
<p>java.util.concurrent并发包</p>
</blockquote>
<h4 id="1、AQS"><a href="#1、AQS" class="headerlink" title="1、AQS"></a>1、AQS</h4><blockquote>
<p>AbstractQueuedSynchronizer</p>
</blockquote>
<blockquote>
<p><strong>同步器：</strong>用来构建<strong>阻塞式锁和其他同步组件</strong>的基本框架，通过<strong>FIFO等待队列</strong>来完成获取资源线程排队工作</p>
<p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于Monitor的WaitSet</p>
</blockquote>
<p><strong>特点</strong></p>
<blockquote>
<p><code>AQS</code>使用一个<code>int</code>成员变量来表示同步状态，通过内置的<code>FIFO</code>队列来完成获取资源线程的排队工作。<code>AQS</code>使用<code>CAS</code>对该同步状态进行原子操作实现对其值的修改。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;<span class="comment">//共享变量，使用volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>getState、setState、compareAndSetState这三个方法对同步状态（独占和共享）进行更改</p>
<p>通过<strong>getState,setState以及compareAndSetState</strong>这三个方法对同步状态进行更改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回同步状态的当前值</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 设置同步状态的值</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123; </span><br><span class="line">        state = newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原子地（CAS操作）将同步状态值设置为给定值update（如果当前同步状态的值等于expect（期望值））</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> STATE.compareAndSet(<span class="keyword">this</span>, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li>同步器提供的模板方法基本上分为3类：<ul>
<li>独占式获取与释放同步状态 ReentrantLock</li>
<li>共享式获取与释放同步状态,多个线程可同时执行 Semaphore CountdownLatch</li>
<li>查询同步队列中的等待线程情况。</li>
</ul>
</li>
</ul>
<h5 id="1-1-方法"><a href="#1-1-方法" class="headerlink" title="1.1 方法"></a>1.1 方法</h5><ul>
<li>tryAcquire(arg)  获取锁</li>
<li>tryRelease(arg) 释放锁</li>
</ul>
<h5 id="1-2-自定义锁"><a href="#1-2-自定义锁" class="headerlink" title="1.2 自定义锁"></a>1.2 自定义锁</h5><img src="http://qiniu.xiaoming.net.cn/AQS独占锁的实现" alt="AQS 独占锁的实现" style="zoom:80%;" />

<p><strong>AQS使用了模板方法模式，自定义同步器时需要重写下面几个AQS提供的模板方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isHeldExclusively()<span class="comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class="line">tryAcquire(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryRelease(<span class="keyword">int</span>)<span class="comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryAcquireShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line">tryReleaseShared(<span class="keyword">int</span>)<span class="comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAqs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyLock myLock=<span class="keyword">new</span> MyLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            myLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;lock1&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                myLock.unlock();</span><br><span class="line">                System.out.println(<span class="string">&quot;unlock1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            myLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;lock2&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                myLock.unlock();</span><br><span class="line">                System.out.println(<span class="string">&quot;unlock2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义不可重入锁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继承同步器类</span></span><br><span class="line">    <span class="comment">//独占锁</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MySync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>,<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="comment">//成功，加上了锁，并且设置 owner 为当前线程</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>); <span class="comment">//state被volatile,写屏障</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span>  <span class="comment">//是否持有独占锁</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState()==<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MySync sync=<span class="keyword">new</span> MySync();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用同步器</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//加锁,不成功会进入等待队列等待</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//加锁可打断</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//尝试加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//带超时时间的加锁	</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>,unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//创建条件变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、ReentrantLock"><a href="#2、ReentrantLock" class="headerlink" title="2、ReentrantLock"></a>2、ReentrantLock</h4><blockquote>
<p>见 3.7 ReentrantLock 和 十、锁</p>
</blockquote>
<h4 id="3、ReetrantReadWriteLock"><a href="#3、ReetrantReadWriteLock" class="headerlink" title="3、ReetrantReadWriteLock"></a>3、ReetrantReadWriteLock</h4><blockquote>
<p>读写锁，见 10.3 读写锁</p>
</blockquote>
<h5 id="3-1-应用于数据库缓存"><a href="#3-1-应用于数据库缓存" class="headerlink" title="3.1 应用于数据库缓存"></a>3.1 应用于数据库缓存</h5><blockquote>
<ul>
<li>对数据库的读写操作+上读写锁保护</li>
<li>构造HashMap集合，存储缓存。</li>
</ul>
</blockquote>
<p><strong>存在的问题：</strong></p>
<h6 id="1、先更新缓存"><a href="#1、先更新缓存" class="headerlink" title="1、先更新缓存"></a>1、先更新缓存</h6><blockquote>
<p>会出现在缓存拿到的都是旧数据</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201008132757774.png" alt="image-20201008132757774" style="zoom:67%;" />

<h6 id="2、先更新数据库"><a href="#2、先更新数据库" class="headerlink" title="2、先更新数据库"></a>2、先更新数据库</h6><img src="https://csn.damyoung.cn/image-20201008132813721.png" alt="image-20201008132813721" style="zoom:67%;" />

<h5 id="3-2-StampedLock"><a href="#3-2-StampedLock" class="headerlink" title="3.2 StampedLock"></a>3.2 StampedLock</h5><blockquote>
<p>进一步优化读性能，在使用时读锁、写锁都必须配合【戳】使用</p>
</blockquote>
<h4 id="4、线程安全集合类"><a href="#4、线程安全集合类" class="headerlink" title="4、线程安全集合类"></a>4、线程安全集合类</h4><blockquote>
<ul>
<li>遗留- vertor(list)、HashTable</li>
<li>修饰-SynchronizedMap、SynchronizedList(使用Collections方法修饰)-内部还是使用Synchronized</li>
<li>JUC<ul>
<li>Blocking类(实现基于锁，并提供用来阻塞的方法来保证线程安全)</li>
<li>CopyOnWrite类(适用于读多写少)、</li>
<li>Concurrent类-使用<strong>CAS优化</strong>,性能较好，但会存在<strong>弱一致性(可能会读取到旧数据)</strong>(遍历时、size)</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="4-1-ConcurrentHashMap"><a href="#4-1-ConcurrentHashMap" class="headerlink" title="4.1 ConcurrentHashMap"></a>4.1 ConcurrentHashMap</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Map</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>computeIfAbsent()  如果缺少key,则产生新value，并放入Map</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LongAdder value=<span class="keyword">new</span> ConcurrentHashMap&lt;String,LongAdder&gt;().computeIfAbsent( ,(key)-&gt;<span class="keyword">new</span> LongAdder());</span><br><span class="line">value.increment();</span><br></pre></td></tr></table></figure>



<p><strong>原理</strong></p>
<h6 id="4-1-1-HashMap并发死链"><a href="#4-1-1-HashMap并发死链" class="headerlink" title="4.1.1 HashMap并发死链"></a>4.1.1 HashMap并发死链</h6><blockquote>
<p>在jdk7下的，多线程环境下使用非线程安全的map集合，扩容之后产生的<strong>并发死链</strong>问题</p>
<ul>
<li>hashMap根据哈希算法计算数据存储的桶位置，桶位置相同的形成链表<ul>
<li>jdk7-新加入放在第一个</li>
<li>jdk8-新加入放在最后个</li>
</ul>
</li>
<li>多线程形成并发死链问题，在某个桶链表形成环形链表。</li>
</ul>
</blockquote>
<h5 id="4-2-LinkedBlockingQueue"><a href="#4-2-LinkedBlockingQueue" class="headerlink" title="4.2 LinkedBlockingQueue"></a>4.2 LinkedBlockingQueue</h5><blockquote>
<p>Dummy无值，只是个占位节点</p>
</blockquote>
<h6 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h6><img src="https://csn.damyoung.cn/image-20201008221014801.png" alt="image-20201008221014801" style="zoom:67%;" />

<h6 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h6><h6 id="加锁分析"><a href="#加锁分析" class="headerlink" title="加锁分析"></a>加锁分析</h6><blockquote>
<p><strong>使用Dummy占位符和俩把锁</strong></p>
<ul>
<li>用一把锁：同一时刻，最多只允许有一个线程(生产者和消费者二选一)执行</li>
<li>俩把锁： 同一时刻，可以允许俩个线程同时执行(一个生产者与一个消费者)<ul>
<li>生产者与生产者仍然串行</li>
<li>消费者与消费者仍然串行</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>线程安全分析</strong></p>
<blockquote>
<p>putLock保证last节点的线程，takeLock保证head节点的线程安全</p>
</blockquote>
<ul>
<li>节点大于2(包括Dummy占位节点)，俩把锁保证入队与出队没有竞争</li>
<li>等于2(一个Dummy节点，一个正常节点)，仍然是俩把锁锁住俩个对象，不会竞争</li>
<li>等于1，take线程会被notEmpty条件阻塞，有竞争，会阻塞。</li>
</ul>
<h5 id="4-3-ArrayBlockingQueue"><a href="#4-3-ArrayBlockingQueue" class="headerlink" title="4.3 ArrayBlockingQueue"></a>4.3 ArrayBlockingQueue</h5><ul>
<li><p>Linked支持有界，Array强制有界</p>
</li>
<li><p>Array需要提前初始化Node数组，入队Node是提前创建好的。</p>
<p>Linked是懒惰的，入队会生成新的Node</p>
</li>
<li><p>Linked俩把锁，Array一把锁。</p>
</li>
</ul>
<h5 id="4-4-ConcurrentLinkedQueue"><a href="#4-4-ConcurrentLinkedQueue" class="headerlink" title="4.4 ConcurrentLinkedQueue"></a>4.4 ConcurrentLinkedQueue</h5><blockquote>
<p>类似LinkedBlockingQueue，<strong>都是使用俩把【锁】,使用的CAS实现，应用于并发要求更多的场景</strong></p>
</blockquote>
<blockquote>
<p>应用于Tomcat的Connector结构。</p>
</blockquote>
<h5 id="4-5-CopyOnWriterArrayList"><a href="#4-5-CopyOnWriterArrayList" class="headerlink" title="4.5 CopyOnWriterArrayList"></a>4.5 CopyOnWriterArrayList</h5><img src="https://csn.damyoung.cn/image-20201008224232404.png" alt="image-20201008224232404" style="zoom:67%;" />

<blockquote>
<p><strong>写入时拷贝</strong>，<strong>增删改即写操作</strong>会将底层数组拷贝一份，更改操作在新数组上执行</p>
<p>这时不影响其他线程的<strong>并发读，读写分离(并发 读写)</strong></p>
<ul>
<li>读写操作，读操作都未加锁</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201008224318927.png" alt="image-20201008224318927" style="zoom:67%;" />



<h4 id="5、Semaphore"><a href="#5、Semaphore" class="headerlink" title="5、Semaphore"></a>5、Semaphore</h4><blockquote>
<p>信号量，用来限制能<strong>同时访问共享资源</strong>的<strong>线程</strong>上限</p>
<p><strong>ps：</strong>限制线程数，而不是限制资源数(Tomcat LimitLatch)。</p>
</blockquote>
<blockquote>
<p>也是实现AQS同步器</p>
<p>Semaphore 有两种模式，公平模式和非公平模式。</p>
<ul>
<li>公平模式： 调用<code>acquire</code>的顺序就是获取许可证的顺序，遵循<code>FIFO</code>；</li>
<li>非公平模式： 抢占式的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Semaphore对象(限制线程数,fair?)</span></span><br><span class="line">Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//添加许可，默认一次只用掉一个信号量，也可以参数传多个  </span></span><br><span class="line">            semaphore.acquire();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;running...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;end&quot;</span>);</span><br><span class="line">            <span class="comment">//释放许可</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;&quot;</span>+i).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6、CountdownLatch"><a href="#6、CountdownLatch" class="headerlink" title="6、CountdownLatch"></a>6、CountdownLatch</h4><blockquote>
<p>用来进行线程同步协作，等待所有线程完成倒计时</p>
<p>其中构造方法用来初始化等待计数值，await()等待计数归零，countDown() 用来让计数–</p>
</blockquote>
<h5 id="6-1-使用"><a href="#6-1-使用" class="headerlink" title="6.1 使用"></a>6.1 使用</h5><blockquote>
<p>内部维护了一个计数器<code>cnt</code>，每次调用<code>countDown()</code>方法会让计数器的值减1，减到0的时候，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务,那些之前调用<code>await()</code>方法而在等待的线程就会被唤醒。</p>
</blockquote>
<p><strong>不足</strong></p>
<p><code>CountDownLatch</code>是一次性的，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当<code>CountDownLatch</code>使用完毕后，它不能再次被使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CountDownLatch latch=<span class="keyword">new</span> CountDownLatch(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;t1.begin..&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;t1.end&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;t2.begin..&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;t2.end&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;t3.begin..&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;t3.end..&quot;</span>);</span><br><span class="line">&#125;).start();</span><br><span class="line">System.out.println(<span class="string">&quot;waiting..&quot;</span>);</span><br><span class="line">latch.await();</span><br><span class="line">System.out.println(<span class="string">&quot;..end&quot;</span>);</span><br></pre></td></tr></table></figure>

<h5 id="6-2-配合线程池使用"><a href="#6-2-配合线程池使用" class="headerlink" title="6.2 配合线程池使用"></a>6.2 配合线程池使用</h5><blockquote>
<p>等待多个远程调用结束</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch=<span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">Random r=<span class="keyword">new</span> Random();</span><br><span class="line">String[] all =<span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;<span class="number">10</span> ; j++) &#123;</span><br><span class="line">    <span class="keyword">int</span> k=j;</span><br><span class="line">    pool.execute(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(r.nextInt(<span class="number">100</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            all[k]=i+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">            <span class="comment">//在同一行变化。</span></span><br><span class="line">            System.out.print(<span class="string">&quot;\r&quot;</span>+ Arrays.toString(all));</span><br><span class="line">        &#125;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">latch.await();</span><br><span class="line">System.out.println(<span class="string">&quot;游戏开始&quot;</span>);</span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure>



<h4 id="7、Cyclicbarrier"><a href="#7、Cyclicbarrier" class="headerlink" title="7、Cyclicbarrier"></a>7、Cyclicbarrier</h4><blockquote>
<p>循环栅栏，用来进行线程协作，等待线程满足某个计数。</p>
<ul>
<li>计数可以恢复，无需重新创建对象</li>
<li>存在的问题：<strong>线程数和计数值要一致</strong></li>
</ul>
<p>构造时设置计数个数， await()计数-1</p>
<p><code>CyclicBarrier</code>有两个构造函数，其中<code>parties</code>指示计数器的初始值，<code>barrierAction</code>在所有线程都到达屏障的时候会执行一次。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">CyclicBarrier barrier=<span class="keyword">new</span> CyclicBarrier(<span class="number">2</span>,()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;task1,task2,finish..&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//若线程数为3</span></span><br><span class="line"><span class="comment">//task1,taks2,task1</span></span><br><span class="line"><span class="comment">//由于task1(1s) task2(2s),会导致是俩次task1减去计数。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    pool.submit(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;t1.begin..&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">//计数-1</span></span><br><span class="line">            barrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;t1.end&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    pool.submit(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;t2.begin..&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            barrier.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;t2.end&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">pool.shutdown();</span><br></pre></td></tr></table></figure>



<h4 id="8、CyclicBarrier和CountDownLatch的区别"><a href="#8、CyclicBarrier和CountDownLatch的区别" class="headerlink" title="8、CyclicBarrier和CountDownLatch的区别"></a>8、CyclicBarrier和CountDownLatch的区别</h4><ul>
<li><p><code>CountDownLatch</code>是计数器，只能使用一次，而<code>CyclicBarrier</code>计数器提供了<code>reset</code>方法，可以多次使用。</p>
</li>
<li><p><code>CountDownLatch</code>的设计思想强调的是一个（多个）线程等待其他线程执行完成后才能执行</p>
<p><code>CyclicBarrier</code>则是强调要多个线程都到达某一个条件，才能一起执行后续步骤。</p>
</li>
</ul>
<h4 id="9、FutureTask"><a href="#9、FutureTask" class="headerlink" title="9、FutureTask"></a>9、FutureTask</h4><p><code>Callable</code>接口它可以有返回值，返回值通过<code>Future</code>进行封装。<code>FutureTask</code>实现了<code>RunnableFuture</code>接口，该接口继承自<code>Runnable</code>和<code>Future</code>接口，这使得<code>FutureTask</code>既可以当做一个任务执行，也可以有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>FutureTask</code>适用于<strong>异步获取执行结果或取消执行任务</strong>的场景。当一个任务需要执行很久时，就可以使用<code>FutureTask</code>进行封装，主线程在完成自己的任务后再回来获取结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    result += i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread computeThread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        computeThread.start();</span><br><span class="line"></span><br><span class="line">        Thread otherThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;other task is running...&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        otherThread.start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="九、多线程设计模式"><a href="#九、多线程设计模式" class="headerlink" title="九、多线程设计模式"></a>九、多线程设计模式</h3><h4 id="1、俩阶段终止模式"><a href="#1、俩阶段终止模式" class="headerlink" title="1、俩阶段终止模式"></a>1、俩阶段终止模式</h4><h5 id="1-1-interrupt"><a href="#1-1-interrupt" class="headerlink" title="1.1 interrupt"></a>1.1 interrupt</h5><ul>
<li>当出现打断标志时，会将中断标志置为true</li>
<li>sleep时被打断，会抛出<code>interruptException</code>,并需要重新设置打断标志，在下次while循环中退出</li>
</ul>
<img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20201008224824308.png" alt="image-20201008224824308" style="zoom:67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorInterrupt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwpPhaseTermination twpPhaseTermination = <span class="keyword">new</span> TwpPhaseTermination();</span><br><span class="line">        twpPhaseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;设置中断标志&quot;</span>);</span><br><span class="line">        twpPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwpPhaseTermination</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">boolean</span> interrupted = Thread.currentThread().isInterrupted();</span><br><span class="line">                <span class="keyword">if</span> (interrupted)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;中断标志为true,中断线程&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//中断标志为false.进入睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">//在sleep时被打断会抛出异常</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//重新设置标志,抛出异常时标志会消失，需要重新设置</span></span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;中断线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-volatile"><a href="#1-2-volatile" class="headerlink" title="1.2 volatile"></a>1.2 volatile</h5><blockquote>
<p><strong>利用volatile的可见性进行改进</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwpPhaseTermination</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (stop)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;标志为true,中断线程&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//中断标志为false.进入睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">//在sleep时被打断会抛出异常</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stop=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;中断线程&quot;</span>);</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、同步保护性暂停"><a href="#2、同步保护性暂停" class="headerlink" title="2、同步保护性暂停"></a>2、同步保护性暂停</h4><blockquote>
<p>Guarded Suspension ，<strong>用在一个线程等待另一个线程的结果</strong></p>
<ul>
<li>有<strong>一个结果</strong>从一个线程传递到另一个线程，让他们关联同一个<code>GuardedObject</code></li>
<li>有结果<strong>不断</strong>的从一个线程传递到另一个线程，使用消息队列(生产者消费者)</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201009210302949.png" alt="image-20201009210302949" style="zoom:67%;" />

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GuardObject g=<span class="keyword">new</span> GuardObject();</span><br><span class="line">        <span class="comment">//等待线程2结果</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程1开始&quot;</span>);</span><br><span class="line">            <span class="comment">//等待结果</span></span><br><span class="line">            System.out.println(g.get());</span><br><span class="line">        &#125;,<span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程2开始&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            g.complete(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;线程2执行complete&quot;</span>);</span><br><span class="line">        &#125;,<span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuardObject</span></span>&#123;</span><br><span class="line">    <span class="comment">//结果</span></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="comment">//获取结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="comment">//没有结果</span></span><br><span class="line">            <span class="keyword">while</span> (response==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//产生结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(Object response)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.response=response;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3、生产者-消费者模式"><a href="#3、生产者-消费者模式" class="headerlink" title="3、生产者/消费者模式"></a>3、生产者/消费者模式</h4><img src="https://csn.damyoung.cn/image-20201003095739174.png" alt="image-20201003095739174" style="zoom:80%;" />

<blockquote>
<ul>
<li>生产者负责产生结果数据，不关心数据该如何处理。消费者专心处理结果数据</li>
<li>消息队列有<strong>容量限制</strong>，满时不会再加入数据，空时不会再消耗数据</li>
<li>JDK各种阻塞队列，采用的就是这种模式</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *  生产者消费者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConConsumDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageQueue messageQueue=<span class="keyword">new</span> MessageQueue(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> id=i;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                messageQueue.put(<span class="keyword">new</span> Message(id,<span class="string">&quot;值&quot;</span>+id));</span><br><span class="line">            &#125;,<span class="string">&quot;生产者&quot;</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//消费者</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(messageQueue.take());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span></span>&#123;</span><br><span class="line">    <span class="comment">//消息队列集合,实现双向队列</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Message&gt; linkedList=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">//队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查队列是否为空</span></span><br><span class="line">        <span class="keyword">synchronized</span> (linkedList)&#123;</span><br><span class="line">            <span class="keyword">while</span> (linkedList.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    linkedList.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Message message = linkedList.removeFirst();</span><br><span class="line">            <span class="comment">//唤醒put中wait</span></span><br><span class="line">            linkedList.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存入消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (linkedList)&#123;</span><br><span class="line">            <span class="comment">//检查队列已经满</span></span><br><span class="line">            <span class="keyword">while</span> (linkedList.size()==capacity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    linkedList.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            linkedList.addLast(message);</span><br><span class="line">            linkedList.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(<span class="keyword">int</span> id, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、同步之顺序控制"><a href="#4、同步之顺序控制" class="headerlink" title="4、同步之顺序控制"></a>4、同步之顺序控制</h4><h5 id="4-1-wait-notify"><a href="#4-1-wait-notify" class="headerlink" title="4.1 wait/notify"></a>4.1 wait/notify</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object lock=<span class="keyword">new</span> Object();</span><br><span class="line"><span class="comment">//表示t2是否运行过</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> t2runned=<span class="keyword">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!t2runned)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">            t2runned=<span class="keyword">true</span>;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br></pre></td></tr></table></figure>

<h5 id="4-2-park-unpark"><a href="#4-2-park-unpark" class="headerlink" title="4.2 park/unpark"></a>4.2 park/unpark</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    LockSupport.park();</span><br><span class="line">    System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    LockSupport.unpark(t1);</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>

<h5 id="4-4-await-signal"><a href="#4-4-await-signal" class="headerlink" title="4.4 await/signal"></a>4.4 await/signal</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReentrantLock lock=<span class="keyword">new</span> ReentrantLock();</span><br><span class="line">Condition condition = lock.newCondition();</span><br><span class="line">Thread t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        condition.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        condition.signal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"></span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure>



<h4 id="5、交替输出"><a href="#5、交替输出" class="headerlink" title="5、交替输出"></a>5、交替输出</h4><h5 id="wait-notify"><a href="#wait-notify" class="headerlink" title="wait/notify"></a>wait/notify</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WaitNotify waitNotify=<span class="keyword">new</span> WaitNotify(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            waitNotify.print(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            waitNotify.print(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            waitNotify.print(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str,<span class="keyword">int</span> waitFlag,<span class="keyword">int</span> nextFlag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;loopNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span> (flag!=waitFlag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">//改变等待标记</span></span><br><span class="line">                flag=nextFlag;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">//循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaitNotify</span><span class="params">(<span class="keyword">int</span> flag, <span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="await-signal"><a href="#await-signal" class="headerlink" title="await/signal"></a>await/signal</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AwaitSignal</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AwaitSignal</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str   打印的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> current   条件变量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next  下个条件变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str,Condition current,Condition next)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;loopNumber; i++) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AwaitSignal awaitSignal=<span class="keyword">new</span> AwaitSignal(<span class="number">5</span>);</span><br><span class="line">Condition a=awaitSignal.newCondition();</span><br><span class="line">Condition b=awaitSignal.newCondition();</span><br><span class="line">Condition c=awaitSignal.newCondition();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    awaitSignal.print(<span class="string">&quot;a&quot;</span>,a,b);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    awaitSignal.print(<span class="string">&quot;b&quot;</span>,b,c);</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    awaitSignal.print(<span class="string">&quot;c&quot;</span>,c,a);</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于一开始都进入等待</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">awaitSignal.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    a.signal();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    awaitSignal.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="park-unpark"><a href="#park-unpark" class="headerlink" title="park/unpark"></a>park/unpark</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class ParkUnpark&#123;</span><br><span class="line">    &#x2F;&#x2F;循环次数</span><br><span class="line">    private int loopNumber;</span><br><span class="line"></span><br><span class="line">    public ParkUnpark(int loopNumber) &#123;</span><br><span class="line">        this.loopNumber &#x3D; loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void print(String str,Thread next)&#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt;loopNumber; i++) &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            LockSupport.unpark(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Thread t1;</span><br><span class="line"><span class="keyword">static</span> Thread t2;</span><br><span class="line"><span class="keyword">static</span> Thread t3;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ParkUnpark parkUnpark=<span class="keyword">new</span> ParkUnpark(<span class="number">5</span>);</span><br><span class="line">    t1=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        parkUnpark.print(<span class="string">&quot;a&quot;</span>,t2);</span><br><span class="line">    &#125;);</span><br><span class="line">    t2=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        parkUnpark.print(<span class="string">&quot;b&quot;</span>,t3);</span><br><span class="line">    &#125;);</span><br><span class="line">    t3=<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">        parkUnpark.print(<span class="string">&quot;c&quot;</span>,t1);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t3.start();</span><br><span class="line">    LockSupport.unpark(t1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6、犹豫模式"><a href="#6、犹豫模式" class="headerlink" title="6、犹豫模式"></a>6、犹豫模式</h4><blockquote>
<p>balking模式用于在一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程无需再做，直接返回</p>
<p>存在读写操作，需要保证原子性，<strong>不能使用volatile(适用于只有一个写操作)</strong></p>
<p>为了提高性能，尽量使得临界区的代码少。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动监控线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (starting) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        starting = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      monitor = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;标志为true,中断线程&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//中断标志为false.进入睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">//在sleep时被打断会抛出异常</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitor.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7、工作模式"><a href="#7、工作模式" class="headerlink" title="7、工作模式"></a>7、工作模式</h4><blockquote>
<p>让有限的工作线程来轮流异步处理无限多的任务</p>
</blockquote>
<h5 id="7-1-饥饿"><a href="#7-1-饥饿" class="headerlink" title="7.1 饥饿"></a>7.1 饥饿</h5><blockquote>
<p><strong>线程数量不足导致的饥饿，常出现在固定大小的线程池中</strong></p>
<p>不同的任务类型应该使用不同的线程池，这样能够避免饥饿，并能提高效率</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">pool.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理点餐&quot;</span>);</span><br><span class="line">    Future&lt;String&gt; f = pool.submit(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cook&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pool.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理点餐&quot;</span>);</span><br><span class="line">    Future&lt;String&gt; f1=pool.submit(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cook&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(f1.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<blockquote>
<p>不同的任务类型使用不同的线程池</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点餐线程池</span></span><br><span class="line">ExecutorService pool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cook线程池</span></span><br><span class="line">ExecutorService cookPool= Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">pool.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理点餐&quot;</span>);</span><br><span class="line">    Future&lt;String&gt; f = cookPool.submit(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cook&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(f.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pool.execute(()-&gt;&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;处理点餐&quot;</span>);</span><br><span class="line">    Future&lt;String&gt; f1=cookPool.submit(()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;cook&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(f1.get());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="7-2-池大小"><a href="#7-2-池大小" class="headerlink" title="7.2 池大小"></a>7.2 池大小</h5><h6 id="CPU密集运算"><a href="#CPU密集运算" class="headerlink" title="CPU密集运算"></a>CPU密集运算</h6><blockquote>
<p>cpu核数+1实现最优的CPU利用率。</p>
<p>+1是保证当线程故障或暂停时，额外线程能够顶上，保证CPU时钟周期不被浪费。</p>
</blockquote>
<h6 id="IO密集运算"><a href="#IO密集运算" class="headerlink" title="IO密集运算"></a>IO密集运算</h6><h3 id="十、锁"><a href="#十、锁" class="headerlink" title="十、锁"></a>十、锁</h3><blockquote>
<p>用于优化锁，见于3.5 Synchronized优化</p>
</blockquote>
<p>锁一共有4种状态，级别从低到高依次是：<strong>无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态</strong>，这几个状态会随着竞争情况逐渐升级。<strong>锁可以升级但不能降级</strong>，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p>
<h4 id="（1）公平锁和非公平锁"><a href="#（1）公平锁和非公平锁" class="headerlink" title="（1）公平锁和非公平锁"></a>（1）公平锁和非公平锁</h4><p>公平锁：是指多个线程按照申请锁的顺序来获取锁</p>
<p>非公平锁：是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程优先获取锁</p>
<p><strong>非公平锁一上来就尝试占用锁，若占用失败，就采用公平锁的方式到末尾排队</strong></p>
<blockquote>
<p><strong>公平锁 VS 非公平锁</strong></p>
</blockquote>
<p>1、公平锁每次获取到的锁为同步队列中的<strong>第一个节点</strong>，<strong>保证请求资源时间上的绝对顺序</strong>，</p>
<p>​    非公平锁有可能刚释放锁的线程下次继续获取该锁，则有可能导致其他线程永远无法获取到锁，<strong>造成“饥饿”现象</strong>。</p>
<img src="https://csn.damyoung.cn/image-20201007191641779.png" alt="image-20201007191641779" style="zoom:67%;" />

<p>​    </p>
<p>2、公平锁为了保证时间上的绝对顺序，需要频繁的<strong>上下文切换</strong>，而非公平锁会降低一定的上下文切换，降低性能开销。</p>
<p>​        因此，ReentrantLock默认选择的是非公平锁，则是为了减少一部分上下文切换，<strong>保证了系统更大的吞吐量</strong>。</p>
<h4 id="（2）递归锁"><a href="#（2）递归锁" class="headerlink" title="（2）递归锁"></a>（2）递归锁</h4><p>递归锁（可重入锁ReentrantLock）</p>
<blockquote>
<ul>
<li><p>表示该锁能够支持一个线程对资源的重复加锁。</p>
</li>
<li><p>该锁的还支持获取锁时的公平和非公平性选择。</p>
</li>
<li><p>如果一个锁不支持可重入，那当一个线程调用它的lock()方法获取锁之后，如果再次调用lock()方法，则该线程将会被自己所阻塞。</p>
</li>
</ul>
</blockquote>
<p>synchronized关键字隐式的支持重进入，比如一个synchronized修饰的递归方法，在方法执行时，执行线程在获取了锁之后仍能连续多次地获得该锁。ReentrantLock虽然没能像synchronized关键字一样支持隐式的重进入，但是在调用lock()方法时，已经获取到锁的线程，能够再次调用lock()方法获取锁而不被阻塞。</p>
<h5 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h5><p>重进入是指任意线程在获取到锁之后能够再次获取该锁而不会被锁所阻塞，该特性的实现需要解决以下两个问题。</p>
<ul>
<li><strong>线程再次获取锁</strong>。锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是，则再次成功获取。</li>
<li><strong>锁的最终释放</strong>。线程重复n次获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。锁的最终释放要求锁对于获取进行计数自增，计数表示当前锁被重复获取的次数，而锁被释放时，计数自减，当计数等于0时表示锁已经成功释放。</li>
</ul>
<h4 id="（3）读写锁"><a href="#（3）读写锁" class="headerlink" title="（3）读写锁"></a>（3）读写锁</h4><blockquote>
<p>ReentrantReadWriteLock</p>
</blockquote>
<blockquote>
<ul>
<li>读写锁用的<strong>同一个Sync同步器，因此等待队列、state等也是同一个</strong><ul>
<li>写锁占state低16位，读锁占用高16位</li>
</ul>
</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201008134833759.png" alt="image-20201008134833759" style="zoom:67%;" />

<ul>
<li>拥有ReadLock和WriteLock俩个内部类、Syn内部类</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201011110445480.png" alt="image-20201011110445480" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201011110514236.png" alt="image-20201011110514236" style="zoom: 80%;" />



<h5 id="3-1-独占锁"><a href="#3-1-独占锁" class="headerlink" title="3.1 独占锁"></a>3.1 独占锁</h5><p>这些锁在同一时刻只允许<strong>一个线程</strong>进行访问</p>
<h5 id="3-2-共享锁"><a href="#3-2-共享锁" class="headerlink" title="3.2 共享锁"></a>3.2 共享锁</h5><p>这些锁在同一时刻可以被多个线程所持有</p>
<h5 id="3-3-读写锁"><a href="#3-3-读写锁" class="headerlink" title="3.3 读写锁"></a>3.3 读写锁</h5><p>ReentrantReadWriteLock其读锁是共享锁(并发)，其写锁是独占锁(互斥)</p>
<blockquote>
<ul>
<li><p>读锁的共享锁可保证<strong>并发读</strong>是非常高效的，但读写、写读、写写的过程是互斥的</p>
</li>
<li><p>读写锁在同一时刻可以允许<strong>多个读线程</strong>访问，但是在<strong>写线程</strong>访问时，所有的读线程和其他写线程均被阻塞。</p>
</li>
<li><p>读写锁维护了一对锁，一个读锁和一个写锁，通过<strong>分离读锁和写锁</strong>，使得<strong>并发性</strong>相比一般的排他锁有了很大提升。</p>
</li>
</ul>
</blockquote>
<p>读写锁主要有以下三个特性：</p>
<ul>
<li><strong>公平性选择</strong>：支持非公平性（默认）和公平性锁获取方式，吞吐量还是非公平优于公平；</li>
<li><strong>重入性</strong>：支持重入<ul>
<li>读锁获取后能再次获取</li>
<li>写锁获取之后能够再次获取写锁，同时也能够获取读锁</li>
<li>但不支持锁升级，即在读锁下再次获取写锁</li>
</ul>
</li>
<li><strong>锁降级</strong>：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁</li>
<li><strong>读锁不支持条件变量</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock reentrantReadWriteLock=<span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"><span class="comment">//读锁对象</span></span><br><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock.ReadLock readLock=reentrantReadWriteLock.readLock();</span><br><span class="line"><span class="comment">//写锁对象</span></span><br><span class="line"><span class="keyword">private</span> ReentrantReadWriteLock.WriteLock writeLock=reentrantReadWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取读锁&quot;</span>);</span><br><span class="line">    readLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读取&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        readLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取写锁&quot;</span>);</span><br><span class="line">    writeLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;写入&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        writeLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="（4）乐观锁"><a href="#（4）乐观锁" class="headerlink" title="（4）乐观锁"></a>（4）乐观锁</h4><p>CAS是什么</p>
<p>（1）<strong>CAS是乐观锁，非阻塞锁</strong> compare and swap</p>
<p>它认为在线程在共享资源时不会发生冲突，不会发生冲突自然就不会阻塞其他线程的操作，故线程也就不会出现阻塞</p>
<p>无锁操作是使用**CAS(compare and swap)**又叫做比较交换来鉴别线程是否出现冲突，出现冲突就重试当前操作直到没有冲突为止。</p>
<p>（2）synchronized 是悲观锁（阻塞锁），悲观地认为程序中的并发情况严重</p>
<p>2、操作过程</p>
<p>3个基本操作数：内存地址V，旧的期望值O，要修改的新值N</p>
<p>更新变量时，但变量的期望值与内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为N</p>
<p>3、CAS的问题</p>
<p>（1）ABA问题</p>
<p>CAS会检查旧值有无变化，比如一个旧值A变为了成B，然后再变成A，刚好在做CAS时检查发现旧值并没有变化依然为A，但是实际上的确发生了变化</p>
<p><strong>解决</strong>：添加一个版本号，原来的变化路径A-&gt;B-&gt;A就变成了1A-&gt;2B-&gt;3C。</p>
<p>（2）自旋时间过长</p>
<p>CAS是非阻塞同步，不会把线程挂起，会自旋进行下一次尝试，自旋时间过长会对性能消耗</p>
<p>（3）只能保证一个共享的原子操作</p>
<p>当对一个共享变量执行操作时CAS能保证其原子性，如果对多个共享变量进行操作,CAS就不能保证其原子性</p>
<p><strong>解决：</strong>用一个对象整合多个共享变量，atomic中提供AtomicReference来保证引用对象之间的原子性</p>
<h4 id="（5）自旋锁"><a href="#（5）自旋锁" class="headerlink" title="（5）自旋锁"></a>（5）自旋锁</h4><p>轻量级锁失败后，虚拟机为了避免线程真实地在操作系统层面挂起，还会进行一项称为自旋锁的优化手段。这是基于在大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程可能会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前的线程可以获得锁，因此虚拟机会让当前想要获取锁的线程做几个空循环(这也是称为自旋的原因)，一般不会太久，可能是50个循环或100循环，在经过若干次循环后，如果得到锁，就顺利进入临界区。如果还不能获得锁，那就会将线程在操作系统层面挂起，这就是自旋锁的优化方式，这种方式确实也是可以提升效率的。最后没办法也就只能升级为重量级锁了。</p>
<h4 id="（6）轻量级锁"><a href="#（6）轻量级锁" class="headerlink" title="（6）轻量级锁"></a>（6）轻量级锁</h4><p>倘若偏向锁失败，虚拟机并不会立即升级为重量级锁，它还会尝试使用一种称为轻量级锁的优化手段(1.6之后加入的)，此时Mark Word 的结构也变为轻量级锁的结构。轻量级锁能够提升程序性能的依据是“对绝大部分的锁，在整个同步周期内都不存在竞争”，注意这是经验数据。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一锁的场合，就会导致轻量级锁膨胀为重量级锁。</p>
<p><img src="https://csn.damyoung.cn/1113901-20190703154344750-1101311912.png" alt="img"></p>
<h2 id="二、线程通信"><a href="#二、线程通信" class="headerlink" title="二、线程通信"></a>二、线程通信</h2><h3 id="1、通信与同步"><a href="#1、通信与同步" class="headerlink" title="1、通信与同步"></a>1、通信与同步</h3><p>线程通信指线程之间以何种机制来交换信息，两种 <strong>共享内存</strong>和<strong>消息传递</strong></p>
<p>（1）在<strong>共享内存</strong>的并发模型里，线程之间共享程序的公共状态</p>
<p>​        线程之间通过写-读内存中的公共状态来<strong>隐式</strong>进行通信</p>
<p>​        典型的共享内存通信方式就是通过<strong>共享对象进行通信</strong></p>
<p>（2）在<strong>消息传递</strong>的并发模型里，线程之间没有公共状态，</p>
<p>​        线程之间必须通过明确的发送消息来<strong>显式</strong>进行通信</p>
<p>​        在java中典型的消息传递方式就是wait()和notify()</p>
<p><strong>线程同步</strong>是指程序用于控制不同线程之间操作发生相对顺序的机制。</p>
<p>（1）在共享内存并发模型里，同步是显式进行的。</p>
<p>​        程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。</p>
<p>（2）在消息传递的并发模型里，由于消息的发送必须在消息的接收之前</p>
<p>​        因此同步是隐式进行的。</p>
<p>java内存模型是<strong>共享内存的并发模型</strong>，线程之间主要通过读-写共享变量来完成隐式通信</p>
<h3 id="2、可见性和竞争"><a href="#2、可见性和竞争" class="headerlink" title="2、可见性和竞争"></a>2、可见性和竞争</h3><p>当对象和变量存储到计算机的各个内存区域时，必然会面临一些问题</p>
<ol>
<li>共享对象对各个线程的可见性</li>
<li>共享对象的竞争现象</li>
</ol>
<h4 id="（2）竞争"><a href="#（2）竞争" class="headerlink" title="（2）竞争"></a>（2）竞争</h4><p>如果多个线程共享一个对象，如果它们同时修改这个共享对象，这就产生了竞争现象。</p>
<p>线程A和线程B共享一个对象obj。假设线程A从主存读取Obj.count变量到自己的CPU缓存，同时，线程B也读取了Obj.count变量到它的CPU缓存，并且这两个线程都对Obj.count做了加1操作。此时，Obj.count加1操作被执行了两次，不过都在不同的CPU缓存中。</p>
<p>要解决竞争现象我们可以使用<strong>synchronized</strong>代码块。synchronized代码块可以保证同一个时刻只能有一个线程进入代码竞争区，synchronized代码块也能保证代码块中所有变量都将会从主存中读，当线程退出代码块时，对所有变量的更新将会flush到主存，不管这些变量是不是volatile类型的。</p>
<h3 id="3、重排序"><a href="#3、重排序" class="headerlink" title="3、重排序"></a>3、重排序</h3><p>指令重排序是指编译器和处理器为了提高性能对指令进行重新排序</p>
<ol>
<li>编译器优化重排序：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li>
<li>指令级并行的重排序：如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li>
<li>内存系统的重排序：处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li>
</ol>
<p>1属于编译器重排序，而2和3统称为处理器重排序。这些重排序会导致线程安全的问题，JMM确保在不同的编译器和不同的处理器平台之上，通过插入特定类型的<code>Memory Barrier</code>来禁止特定类型的编译器重排序和处理器重排序，为上层提供一致的内存可见性保证。</p>
<p><strong>编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序，即不会重排序</strong></p>
<p>数据依赖性是指<strong>如果两个操作访问同一个变量，且这两个操作有一个为写操作，此时这两个操作就存在数据依赖性</strong></p>
]]></content>
      <categories>
        <category>javaSe</category>
      </categories>
      <tags>
        <tag>javaSe</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud Alibaba</title>
    <url>/2021/02/04/SpringCloud%20Alibaba/</url>
    <content><![CDATA[<h1 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h1><p><img src="https://csn.damyoung.cn/image-20210201172218049.png" alt="image-20210201172218049"></p>
<p>git地址<a href="http://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md">http://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</a></p>
<a id="more"></a>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="服务注册和配置中心Nacos"><a href="#服务注册和配置中心Nacos" class="headerlink" title="服务注册和配置中心Nacos"></a>服务注册和配置中心Nacos</h1><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>Naming Configuration service 一个易于使用的动态服务发现，配置和服务管理平台，用于构建云本机应用程序。替代Eureka做服务注册中心，替代Config做服务配置中心</p>
<p>官网<a href="https://github.com/alibaba/Nacos">https://github.com/alibaba/Nacos</a></p>
<p><img src="https://csn.damyoung.cn/image-20210201174946053.png" alt="image-20210201174946053"></p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>cloudalibaba-provider-payment9001</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201202924740.png" alt="image-20210201202924740"></p>
<p><img src="https://csn.damyoung.cn/image-20210201211349320.png" alt="image-20210201211349320"></p>
<h4 id="拷贝虚拟端口映射"><a href="#拷贝虚拟端口映射" class="headerlink" title="拷贝虚拟端口映射"></a>拷贝虚拟端口映射</h4><p><img src="https://csn.damyoung.cn/image-20210201211708949.png" alt="image-20210201211708949"></p>
<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><p><img src="https://csn.damyoung.cn/image-20210201211822353.png" alt="image-20210201211822353"></p>
<h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>nacos整合了Ribbon，自带负载均衡</p>
<p><img src="https://csn.damyoung.cn/image-20210201212137369.png" alt="image-20210201212137369"></p>
<p>cloudalibaba-consumer-nacos-order83</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL+<span class="string">&quot;/payment/nacos/&quot;</span>+id,String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201213156245.png" alt="image-20210201213156245"></p>
<p><img src="https://csn.damyoung.cn/image-20210201213310567.png" alt="image-20210201213310567"></p>
<p><img src="https://csn.damyoung.cn/image-20210201213317677.png" alt="image-20210201213317677"></p>
<h3 id="服务注册中心对比"><a href="#服务注册中心对比" class="headerlink" title="服务注册中心对比"></a>服务注册中心对比</h3><p><img src="https://csn.damyoung.cn/image-20210201213513739.png" alt="image-20210201213513739"></p>
<p><img src="https://csn.damyoung.cn/image-20210201213537568.png" alt="image-20210201213537568"></p>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>cloudalibaba-config-nacos-client3377</p>
<p><img src="https://csn.damyoung.cn/image-20210201214240955.png" alt="image-20210201214240955"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line"><span class="comment">#        group: DEV_GROUP</span></span><br><span class="line"><span class="comment">#        namespace: 7d8f0f5a-6a53-4785-9686-dd460158e5d4</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nacos端配置文件DataId的命名规则是：</span></span><br><span class="line"><span class="comment">#$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment">#本案例的DataID是:nacos-config-client-dev.yaml</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClietnMain3377</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClietnMain3377.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//支持Nacos的动态刷新功能。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@RefreshScope</code>springcloud原生注解，实现配置的自动更新</p>
<h3 id="配置匹配规则"><a href="#配置匹配规则" class="headerlink" title="配置匹配规则"></a>配置匹配规则</h3><p><a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201225825019.png" alt="image-20210201225825019"></p>
<p><img src="https://csn.damyoung.cn/image-20210201225852865.png" alt="image-20210201225852865"></p>
<p><img src="https://csn.damyoung.cn/image-20210201225952308.png" alt="image-20210201225952308"></p>
<p><img src="https://csn.damyoung.cn/image-20210201230016253.png" alt="image-20210201230016253"></p>
<p><img src="https://csn.damyoung.cn/image-20210201230040731.png" alt="image-20210201230040731"></p>
<p><img src="https://csn.damyoung.cn/image-20210202000902295.png" alt="image-20210202000902295"></p>
<h3 id="自带动态刷新"><a href="#自带动态刷新" class="headerlink" title="自带动态刷新"></a>自带动态刷新</h3><p><img src="https://csn.damyoung.cn/image-20210202001027340.png" alt="image-20210202001027340"></p>
<h2 id="分类配置"><a href="#分类配置" class="headerlink" title="分类配置"></a>分类配置</h2><h3 id="多环境多项目管理"><a href="#多环境多项目管理" class="headerlink" title="多环境多项目管理"></a>多环境多项目管理</h3><p><img src="https://csn.damyoung.cn/image-20210202220942214.png" alt="image-20210202220942214"></p>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>Namespace+Group+Data ID</p>
<p><img src="https://csn.damyoung.cn/image-20210202221153895.png" alt="image-20210202221153895"></p>
<p><img src="https://csn.damyoung.cn/image-20210202221341882.png" alt="image-20210202221341882"></p>
<p><img src="https://csn.damyoung.cn/image-20210202221126870.png" alt="image-20210202221126870"></p>
<p>同一个data Id，不同group</p>
<p><img src="https://csn.damyoung.cn/image-20210202222515068.png" alt="image-20210202222515068"></p>
<p><img src="https://csn.damyoung.cn/image-20210202222631243.png" alt="image-20210202222631243"></p>
<p><img src="https://csn.damyoung.cn/image-20210202223029493.png" alt="image-20210202223029493"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#指定yaml格式的配置</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">cc621bf9-289e-4a2e-b5f6-aa2aab60cdd6</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line"><span class="comment">#    active: dev  #表示开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span>  <span class="comment">#表示测试环境</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#nacos端配置文件DataId的命名规则是：</span></span><br><span class="line"><span class="comment">#$&#123;spring.application.name&#125;-$&#123;spring.profile.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment">#本案例的DataID是:nacos-config-client-dev.yaml</span></span><br></pre></td></tr></table></figure>

<h2 id="Nacos集群和持久化配置"><a href="#Nacos集群和持久化配置" class="headerlink" title="Nacos集群和持久化配置"></a>Nacos集群和持久化配置</h2><p><img src="https://csn.damyoung.cn/image-20210202224112220.png" alt="image-20210202224112220"></p>
<h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p>
<p><img src="https://csn.damyoung.cn/image-20210202223659093.png" alt="image-20210202223659093"></p>
<p>默认Nacos使用嵌入式数据库实现数据的存储，所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的；为了解决这个问题，Nacos采用了<strong>集中式存储的方式来支持集群化部署，目前只支持MySql的存储</strong></p>
<h4 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h4><p>Nacos默认自带的是嵌入式数据库derby</p>
<p><img src="https://csn.damyoung.cn/image-20210202224434838.png" alt="image-20210202224434838"></p>
<h4 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h4><p><img src="https://csn.damyoung.cn/image-20210202224940680.png" alt="image-20210202224940680"></p>
<h4 id="mysql数据库配置"><a href="#mysql数据库配置" class="headerlink" title="mysql数据库配置"></a>mysql数据库配置</h4><h5 id="sql脚本"><a href="#sql脚本" class="headerlink" title="sql脚本"></a>sql脚本</h5><p><a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</a></p>
<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp application.properties application.properties.init --备份</span><br><span class="line"></span><br><span class="line">vim application.properties.init</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210202233044347.png" alt="image-20210202233044347"></p>
<h4 id="配置cluster-conf"><a href="#配置cluster-conf" class="headerlink" title="配置cluster.conf"></a>配置cluster.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp cluster.conf.example cluster.conf</span><br><span class="line"></span><br><span class="line">vim cluster.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210202233606236.png" alt="image-20210202233606236"></p>
<p><img src="https://csn.damyoung.cn/image-20210202233813507.png" alt="image-20210202233813507"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nacos|grep -v grep|wc -l --查看启动nacos</span><br></pre></td></tr></table></figure>

<h1 id="熔断和限流Sentinel"><a href="#熔断和限流Sentinel" class="headerlink" title="熔断和限流Sentinel"></a>熔断和限流Sentinel</h1><p><a href="https://github.com/alibaba/Sentinel/wiki">https://github.com/alibaba/Sentinel/wiki</a></p>
<p><img src="https://csn.damyoung.cn/image-20210203002134346.png" alt="image-20210203002134346"></p>
<p>服务雪崩、服务降级、服务熔断、服务限流</p>
<p><img src="https://csn.damyoung.cn/image-20210203002240175.png" alt="image-20210203002240175"></p>
<p><a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a> 下载</p>
<p>java -jar sentinel-dashboard-1.7.0.jar</p>
<p><img src="https://csn.damyoung.cn/image-20210203003323061.png" alt="image-20210203003323061"></p>
<p><img src="https://csn.damyoung.cn/image-20210203003406410.png" alt="image-20210203003406410"></p>
<h2 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h2><blockquote>
<p>sentinel采用懒加载，执行一次访问即可<a href="http://localhost:8401/testA">http://localhost:8401/testA</a></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210203194724755.png" alt="image-20210203194724755"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        springcloud alibaba sentinel 后续持久化--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        openfeign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        springcloud alibaba sentinel--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloudalibaba-sentinel-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8080</span> <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line"><span class="comment">#        默认8719端口，假如被占用会自动从8719开始依次+1扫描。直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(Thread.currentThread().getName()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;...testB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;------testB&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210203201514861.png" alt="image-20210203201514861"></p>
<h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p>资源名：唯一名称，默认请求路径</p>
<p>针对来源：Sentinel可以针对调用者进行限流，填写微服务名，默认default</p>
<p>阈值类型</p>
<ul>
<li>QPS(每秒请求数量)：当调用该api的QPS达到阈值时，进行限流</li>
<li>线程数：当调用该api的线程数达到阈值时进行限流</li>
</ul>
<p>流控模式</p>
<ul>
<li>直接：api达到限流条件时，直接限流</li>
<li>关联：当关联的资源达到阈值时，就限流自己</li>
<li>链路：只记录指定链路上的流量(指定资源从入口资源进来的流量，如果达到阈值，就进行限流)</li>
</ul>
<p>流控效果</p>
<ul>
<li>快速失败：直接失败，跑异常</li>
<li>Warm up：根据codeFactor(冷加载因子，默认3)的值，从阈值/codeFactor，经过预热时长，才达到设置的QPS阈值</li>
<li>排队等待</li>
</ul>
<h3 id="直接快速失败"><a href="#直接快速失败" class="headerlink" title="直接快速失败"></a>直接快速失败</h3><h4 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h4><p><img src="https://csn.damyoung.cn/image-20210203202131283.png" alt="image-20210203202131283"></p>
<p><img src="https://csn.damyoung.cn/image-20210203202211174.png" alt="image-20210203202211174"></p>
<h4 id="线程数"><a href="#线程数" class="headerlink" title="线程数"></a>线程数</h4><p><img src="https://csn.damyoung.cn/image-20210203203126702.png" alt="image-20210203203126702"></p>
<h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p><img src="https://csn.damyoung.cn/image-20210203203926784.png" alt="image-20210203203926784"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204127837.png" alt="image-20210203204127837"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204208656.png" alt="image-20210203204208656"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204320762.png" alt="image-20210203204320762"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204441287.png" alt="image-20210203204441287"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204718927.png" alt="image-20210203204718927"></p>
<p><img src="https://csn.damyoung.cn/image-20210203204702277.png" alt="image-20210203204702277"></p>
<h3 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h3><h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><h3 id="预热"><a href="#预热" class="headerlink" title="预热"></a>预热</h3><p>秒杀系统在开启的瞬间，会有很多流量上来，很有可能把系统打死，预热方式就是把为了保护系统，可慢慢把流量放进来，慢慢的把阈值增长到设置的阈值</p>
<p><img src="https://csn.damyoung.cn/image-20210203205103893.png" alt="image-20210203205103893"></p>
<p><img src="https://csn.damyoung.cn/image-20210203205306608.png" alt="image-20210203205306608"></p>
<h3 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h3><p><img src="https://csn.damyoung.cn/image-20210203205607252.png" alt="image-20210203205607252"></p>
<p><img src="https://csn.damyoung.cn/image-20210203205629517.png" alt="image-20210203205629517"></p>
<h2 id="熔断降级"><a href="#熔断降级" class="headerlink" title="熔断降级"></a>熔断降级</h2><p><a href="http://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">http://github.com/alibaba/Sentinel/wiki/熔断降级</a></p>
<p><img src="https://csn.damyoung.cn/image-20210203205810825.png" alt="image-20210203205810825"></p>
<p><img src="https://csn.damyoung.cn/image-20210203205906791.png" alt="image-20210203205906791"></p>
<p><img src="https://csn.damyoung.cn/image-20210203205918850.png" alt="image-20210203205918850"></p>
<p><img src="https://csn.damyoung.cn/image-20210203205939045.png" alt="image-20210203205939045"></p>
<p>Sentinel断路器是没有半开状态</p>
<p><img src="https://csn.damyoung.cn/image-20210203210055780.png" alt="image-20210203210055780"></p>
<h3 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h3><p><img src="https://csn.damyoung.cn/image-20210204194822358.png" alt="image-20210204194822358"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span> );</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(<span class="string">&quot;测试D&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204195240843.png" alt="image-20210204195240843"></p>
<p><img src="https://csn.damyoung.cn/image-20210204195811172.png" alt="image-20210204195811172"></p>
<h3 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h3><p><img src="https://csn.damyoung.cn/image-20210204200037378.png" alt="image-20210204200037378"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testE 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204200218433.png" alt="image-20210204200218433"></p>
<h3 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h3><p>异常数是按照分钟统计的</p>
<p><img src="https://csn.damyoung.cn/image-20210204200327159.png" alt="image-20210204200327159"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testE 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204200458434.png" alt="image-20210204200458434"></p>
<h2 id="热点key限流"><a href="#热点key限流" class="headerlink" title="热点key限流"></a>热点key限流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span></span>&#123;</span><br><span class="line">    <span class="comment">//int age = 10/0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204201742114.png" alt="image-20210204201742114"></p>
<p>方法testHotKey里面第一个参数只要QPS超过每秒1次，马上降级处理；</p>
<p>如果没有兜底方法，异常会被打印到前台</p>
<h3 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h3><p>热点参数的注意点，参数必须是基本类型或者String</p>
<p><img src="https://csn.damyoung.cn/image-20210204202214005.png" alt="image-20210204202214005"></p>
<p><img src="https://csn.damyoung.cn/image-20210204202257530.png" alt="image-20210204202257530"></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><img src="https://csn.damyoung.cn/image-20210204202556381.png" alt="image-20210204202556381"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;,required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;,required = false)</span> String p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span> <span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//sentinel系统默认的提示：Blocked by Sentinel (flow limiting)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;------deal_testHotKey,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p><a href="https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%B3%BB%E7%BB%9F%E8%87%AA%E9%80%82%E5%BA%94%E9%99%90%E6%B5%81</a></p>
<p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>
<p>系统规则支持以下的模式：</p>
<ul>
<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>
<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>
<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>
<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护</li>
</ul>
<h2 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="@SentinelResource"></a>@SentinelResource</h2><h3 id="按资源名称限流"><a href="#按资源名称限流" class="headerlink" title="按资源名称限流"></a>按资源名称限流</h3><p><img src="https://csn.damyoung.cn/image-20210204203134381.png" alt="image-20210204203134381"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cloud-api-commons&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;handleException&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按资源名称限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName()+<span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204203901101.png" alt="image-20210204203901101"></p>
<p><img src="https://csn.damyoung.cn/image-20210204203919956.png" alt="image-20210204203919956"></p>
<p><img src="https://csn.damyoung.cn/image-20210204203928416.png" alt="image-20210204203928416"></p>
<h3 id="按Url限流"><a href="#按Url限流" class="headerlink" title="按Url限流"></a>按Url限流</h3><blockquote>
<p>加了斜杆/</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按url限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204204309347.png" alt="image-20210204204309347"></p>
<p><img src="https://csn.damyoung.cn/image-20210204204341751.png" alt="image-20210204204341751"></p>
<h3 id="自定义限流处理逻辑"><a href="#自定义限流处理逻辑" class="headerlink" title="自定义限流处理逻辑"></a>自定义限流处理逻辑</h3><p><img src="https://csn.damyoung.cn/image-20210204204459804.png" alt="image-20210204204459804"></p>
<p><img src="https://csn.damyoung.cn/image-20210204204512422.png" alt="image-20210204204512422"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot;,</span></span><br><span class="line"><span class="meta">        blockHandlerClass = CustomerBlockHandler.class,</span></span><br><span class="line"><span class="meta">        blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按客戶自定义&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客戶自定义,global handlerException----1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">4444</span>,<span class="string">&quot;按客戶自定义,global handlerException----2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204205109766.png" alt="image-20210204205109766"></p>
<h3 id="更多注解属性"><a href="#更多注解属性" class="headerlink" title="更多注解属性"></a>更多注解属性</h3><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81</a></p>
<p><img src="https://csn.damyoung.cn/image-20210204205313122.png" alt="image-20210204205313122"></p>
<p><img src="https://csn.damyoung.cn/image-20210204205331443.png" alt="image-20210204205331443"></p>
<h2 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h2><blockquote>
<p>sentinel整合ribbon+openFeign+fallback</p>
</blockquote>
<h3 id="Ribbon系列"><a href="#Ribbon系列" class="headerlink" title="Ribbon系列"></a>Ribbon系列</h3><p><img src="https://csn.damyoung.cn/image-20210204205513896.png" alt="image-20210204205513896"></p>
<h4 id="9003"><a href="#9003" class="headerlink" title="9003"></a>9003</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9003.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        hashMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">&quot;28a8c1e3bc2742d8848569891fb42181&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">&quot;bba8c1e3bc2742d8848569891ac32182&quot;</span>));</span><br><span class="line">        hashMap.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">&quot;6ua8c1e3bc2742d8848569891xt92183&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Payment payment = hashMap.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;from mysql,serverPort:  &quot;</span>+serverPort,payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="84"><a href="#84" class="headerlink" title="84"></a>84</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud ailibaba sentinel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#配置Sentinel dashboard地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment">#默认8719端口，假如被占用会自动从8719开始依次+1扫描,直至找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CircleBreakerController84"><a href="#CircleBreakerController84" class="headerlink" title="CircleBreakerController84"></a>CircleBreakerController84</h4><h5 id="没有配置"><a href="#没有配置" class="headerlink" title="没有配置"></a>没有配置</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span> <span class="comment">//没有配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    CommonResult&lt;Payment&gt; result = restTemplate.getForObject(SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span>+id,CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (<span class="string">&quot;IllegalArgumentException,非法参数异常....&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException (<span class="string">&quot;NullPointerException,该ID没有对应记录,空指针异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fallback管运行异常，blockHandler管配置违规</p>
<p><img src="https://csn.damyoung.cn/image-20210204211652125.png" alt="image-20210204211652125"></p>
<p>没有配置，直接返回error页面</p>
<p><img src="https://csn.damyoung.cn/image-20210204211918969.png" alt="image-20210204211918969"></p>
<h5 id="配置fallback"><a href="#配置fallback" class="headerlink" title="配置fallback"></a>配置fallback</h5><blockquote>
<p>只处理运行异常，不管配置违规</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback = &quot;handlerFallback&quot;)</span> <span class="comment">//fallback只负责业务异常</span></span><br></pre></td></tr></table></figure>

<p>兜底方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本例是fallback</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span>  Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;兜底异常handlerFallback,exception内容  &quot;</span>+e.getMessage(),payment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204212201371.png" alt="image-20210204212201371"></p>
<h5 id="只配置blockHandler"><a href="#只配置blockHandler" class="headerlink" title="只配置blockHandler"></a>只配置blockHandler</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,blockHandler = &quot;blockHandler&quot;)</span> <span class="comment">//blockHandler只负责sentinel控制台配置违规</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204213012372.png" alt="image-20210204213012372"></p>
<p>点俩次</p>
<p><img src="https://csn.damyoung.cn/image-20210204213032795.png" alt="image-20210204213032795"></p>
<h5 id="俩种都配置"><a href="#俩种都配置" class="headerlink" title="俩种都配置"></a>俩种都配置</h5><p><img src="https://csn.damyoung.cn/image-20210204213126954.png" alt="image-20210204213126954"></p>
<h5 id="异常忽略"><a href="#异常忽略" class="headerlink" title="异常忽略"></a>异常忽略</h5><blockquote>
<p>运行异常会被抛出(配置<code>IllegalArgumentException</code>出现会出现error页面而不进入兜底方法)</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210204213259723.png" alt="image-20210204213259723"></p>
<h3 id="Feign系列"><a href="#Feign系列" class="headerlink" title="Feign系列"></a>Feign系列</h3><p><img src="https://csn.damyoung.cn/image-20210204213718955.png" alt="image-20210204213718955"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud openfeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain84</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain84.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;nacos-payment-provider&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;服务降级返回&quot;</span>,<span class="keyword">new</span> Payment(id,<span class="string">&quot;errorSerial&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//==================OpenFeign</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204214622324.png" alt="image-20210204214622324"></p>
<p>测试84调用9003，此时故意关闭9003微服务提供者</p>
<p><img src="https://csn.damyoung.cn/image-20210204214742428.png" alt="image-20210204214742428"></p>
<h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化</p>
<p>将限流配置规则持久化进Nacos保存，只要刷新840某个rest地址，sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除，针对8401上sentinel的流控规则持续有效</p>
<p>cloudalibaba-sentinel-service8401为例，重启配置会再刷新！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        springcloud alibaba sentinel 后续持久化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#        添加nacos数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">cloud:</span></span><br><span class="line">		<span class="attr">sentinel:</span>	</span><br><span class="line">			<span class="attr">datasource:</span></span><br><span class="line">        		<span class="attr">ds1:</span></span><br><span class="line">          			<span class="attr">nacos:</span></span><br><span class="line">            			<span class="attr">serverAddr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">            			<span class="attr">dataId:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">            			<span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            			<span class="attr">dataType:</span> <span class="string">json</span></span><br><span class="line">            			<span class="attr">ruleType:</span> <span class="string">FLOW</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210204220703573.png" alt="image-20210204220703573"></p>
<p><img src="https://csn.damyoung.cn/image-20210204220716944.png" alt="image-20210204220716944"></p>
<p><img src="https://csn.damyoung.cn/image-20210204221035935.png" alt="image-20210204221035935"></p>
<p>测试</p>
<p><img src="https://csn.damyoung.cn/image-20210204221110662.png" alt="image-20210204221110662"></p>
<p>停止8401</p>
<p><img src="https://csn.damyoung.cn/image-20210204221136932.png" alt="image-20210204221136932"></p>
<p>重启8401</p>
<p><img src="https://csn.damyoung.cn/image-20210204221209168.png" alt="image-20210204221209168"></p>
<h1 id="Seate处理分布式事务"><a href="#Seate处理分布式事务" class="headerlink" title="Seate处理分布式事务"></a>Seate处理分布式事务</h1><h2 id="分布式问题"><a href="#分布式问题" class="headerlink" title="分布式问题"></a>分布式问题</h2><blockquote>
<p>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用，就会产生分布式事务问题</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210204221711342.png" alt="image-20210204221711342"></p>
<p><img src="https://csn.damyoung.cn/image-20210204221635201.png" alt="image-20210204221635201"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>seata是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务</p>
<p>我们只需要使用一个注解<code>@GlobalTransactional</code>注解解决分布式事务问题！！！！</p>
<p>官网<a href="http://seata.io/zh-cn">http://seata.io/zh-cn</a></p>
<p>下载<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p>
<h3 id="Transaction-ID"><a href="#Transaction-ID" class="headerlink" title="Transaction ID"></a>Transaction ID</h3><p>全局事务ID</p>
<h3 id="三组件"><a href="#三组件" class="headerlink" title="三组件"></a>三组件</h3><p>TC (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>
<p>TM (Transaction Manager) - 事务管理器：定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>
<p>RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>
<h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><p><img src="https://csn.damyoung.cn/image-20210205103929876.png" alt="image-20210205103929876"></p>
<p><img src="https://csn.damyoung.cn/image-20210205104523353.png" alt="image-20210205104523353"></p>
<h2 id="安装seata"><a href="#安装seata" class="headerlink" title="安装seata"></a>安装seata</h2><p><img src="https://csn.damyoung.cn/image-20210205104829079.png" alt="image-20210205104829079"></p>
<p><img src="https://csn.damyoung.cn/image-20210205105626507.png" alt="image-20210205105626507"></p>
<p><img src="https://csn.damyoung.cn/image-20210205104924446.png" alt="image-20210205104924446"></p>
<p><img src="https://csn.damyoung.cn/image-20210205115951285.png" alt="image-20210205115951285"></p>
<p><img src="https://csn.damyoung.cn/image-20210205105157797.png" alt="image-20210205105157797"></p>
<p>建库seata，建表db_store.sql;</p>
<p>指明注册中心为nacos，及修改nacos连接信息</p>
<p>创建seata/logs/seata_gc.log，添加mysql8驱动jar包到bin目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">driverClassName &#x3D; &quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;serverTimezone&#x3D;UTC&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210205105740447.png" alt="image-20210205105740447"></p>
<p><img src="https://csn.damyoung.cn/image-20210205120152477.png" alt="image-20210205120152477"></p>
<h2 id="账户-库存-账户业务数据库准备"><a href="#账户-库存-账户业务数据库准备" class="headerlink" title="账户/库存/账户业务数据库准备"></a>账户/库存/账户业务数据库准备</h2><blockquote>
<p>先启动Nacos后启动Seata！！！</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210205122006674.png" alt="image-20210205122006674"></p>
<p><img src="https://csn.damyoung.cn/image-20210205122151086.png" alt="image-20210205122151086"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE seata_order;</span><br><span class="line">USE seata_order;</span><br><span class="line">CREATE TABLE t_order(</span><br><span class="line">    id BIGINT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT PRIMARY KEY ,</span><br><span class="line">    user_id BIGINT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    product_id BIGINT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">    count INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    money DECIMAL(<span class="number">11</span>,<span class="number">0</span>) DEFAULT NULL COMMENT <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line">    status INT(<span class="number">1</span>) DEFAULT NULL COMMENT <span class="string">&#x27;订单状态：0创建中，1已完结&#x27;</span></span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=<span class="number">7</span> CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE seata_storage;</span><br><span class="line">USE seata_storage;</span><br><span class="line">CREATE TABLE t_storage(</span><br><span class="line">    id BIGINT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT PRIMARY KEY ,</span><br><span class="line">    product_id BIGINT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line">    total INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;总库存&#x27;</span>,</span><br><span class="line">    used INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;已用库存&#x27;</span>,</span><br><span class="line">    residue INT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;剩余库存&#x27;</span></span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=<span class="number">7</span> CHARSET=utf8;</span><br><span class="line">INSERT INTO t_storage(id, product_id, total, used, residue) VALUES(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">CREATE DATABASE seata_account;</span><br><span class="line">USE seata_account;</span><br><span class="line">CREATE TABLE t_account(</span><br><span class="line">    id BIGINT(<span class="number">11</span>) NOT NULL AUTO_INCREMENT PRIMARY KEY ,</span><br><span class="line">    user_id BIGINT(<span class="number">11</span>) DEFAULT NULL COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">    total DECIMAL(<span class="number">10</span>,<span class="number">0</span>) DEFAULT NULL COMMENT <span class="string">&#x27;总额度&#x27;</span>,</span><br><span class="line">    used DECIMAL(<span class="number">10</span>,<span class="number">0</span>) DEFAULT NULL COMMENT <span class="string">&#x27;已用额度&#x27;</span>,</span><br><span class="line">    residue DECIMAL(<span class="number">10</span>,<span class="number">0</span>) DEFAULT <span class="number">0</span> COMMENT <span class="string">&#x27;剩余可用额度&#x27;</span></span><br><span class="line">)ENGINE=InnoDB AUTO_INCREMENT=<span class="number">7</span> CHARSET=utf8;</span><br><span class="line">INSERT INTO t_account(id, user_id, total, used, residue) VALUES(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1000</span>,<span class="number">0</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210205122517376.png" alt="image-20210205122517376"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="string">`undo_log`</span> (</span><br><span class="line">  <span class="string">`id`</span> BIGINT(<span class="number">20</span>) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`branch_id`</span> BIGINT(<span class="number">20</span>) NOT NULL,</span><br><span class="line">  <span class="string">`xid`</span> VARCHAR(<span class="number">100</span>) NOT NULL,</span><br><span class="line">  <span class="string">`context`</span> VARCHAR(<span class="number">128</span>) NOT NULL,</span><br><span class="line">  <span class="string">`rollback_info`</span> LONGBLOB NOT NULL,</span><br><span class="line">  <span class="string">`log_status`</span> INT(<span class="number">11</span>) NOT NULL,</span><br><span class="line">  <span class="string">`log_created`</span> DATETIME NOT NULL,</span><br><span class="line">  <span class="string">`log_modified`</span> DATETIME NOT NULL,</span><br><span class="line">  <span class="string">`ext`</span> VARCHAR(<span class="number">100</span>) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (<span class="string">`id`</span>),</span><br><span class="line">  UNIQUE KEY <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>,<span class="string">`branch_id`</span>)</span><br><span class="line">) ENGINE=INNODB AUTO_INCREMENT=<span class="number">1</span> DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>



<p><img src="https://csn.damyoung.cn/image-20210205122909980.png" alt="image-20210205122909980"></p>
<h2 id="订单-库存-账户业务微服务准备"><a href="#订单-库存-账户业务微服务准备" class="headerlink" title="订单/库存/账户业务微服务准备"></a>订单/库存/账户业务微服务准备</h2><p>下订单-减库存-扣余额-改订单状态</p>
<p><img src="https://csn.damyoung.cn/image-20210205151312123.png" alt="image-20210205151312123"></p>
<p><img src="https://csn.damyoung.cn/image-20210205152124208.png" alt="image-20210205152124208"></p>
<h3 id="seate-order-service2001"><a href="#seate-order-service2001" class="headerlink" title="seate-order-service2001"></a>seate-order-service2001</h3><p><img src="https://csn.damyoung.cn/image-20210205161253666.png" alt="image-20210205161253666"></p>
<h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><blockquote>
<p>seata要改成使用的版本</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="comment">#自定义事务组名称需要与seata-server中的对应</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:8848</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_order</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<h4 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态：0创建中，1已完结</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String  message;</span><br><span class="line">    <span class="keyword">private</span> T       data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1 新建订单</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 修改订单状态，从零改为1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.pojo.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;count&quot;</span> <span class="attr">property</span>=<span class="string">&quot;count&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order (id,user_id,product_id,count,money,status)</span><br><span class="line">        values (null,#&#123;userId&#125;,#&#123;productId&#125;,#&#123;count&#125;,#&#123;money&#125;,0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update t_order set status = 1</span><br><span class="line">        where user_id=#&#123;userId&#125; and status = #&#123;status&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><blockquote>
<p>feign远程调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单-&gt;调用库存服务扣减库存-&gt;调用账户服务扣减账户余额-&gt;修改订单状态</span></span><br><span class="line"><span class="comment">     * 简单说：下订单-&gt;扣库存-&gt;减余额-&gt;改状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;,rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;开始新建订单&quot;</span>);</span><br><span class="line">        <span class="comment">//1 新建订单</span></span><br><span class="line">        orderMapper.create(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 扣减库存</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存，做扣减Count&quot;</span>);</span><br><span class="line">        storageService.decrease(order.getProductId(),order.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用库存，做扣减end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 扣减账户</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户，做扣减Money&quot;</span>);</span><br><span class="line">        accountService.decrease(order.getUserId(),order.getMoney());</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;订单微服务开始调用账户，做扣减end&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4 修改订单状态，从零到1,1代表已经完成</span></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态开始&quot;</span>);</span><br><span class="line">        orderMapper.update(order.getUserId(),<span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;修改订单状态结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;-----&gt;下订单结束了，O(∩_∩)O哈哈~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Order order)</span></span>&#123;</span><br><span class="line">        orderService.create(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> dmYang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021/2/5 15:46</span></span><br><span class="line"><span class="comment"> *  使用Seata对数据源进行代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSourceProxy);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">        sqlSessionFactoryBean.setTransactionFactory(<span class="keyword">new</span> SpringManagedTransactionFactory());</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&#123;&quot;com.example.mapper&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span><span class="comment">//取消数据源的自动创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataOrderMainApp2001</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataOrderMainApp2001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="resources"><a href="#resources" class="headerlink" title="resources"></a>resources</h4><p><img src="https://csn.damyoung.cn/image-20210205161815080.png" alt="image-20210205161815080"></p>
<p><img src="https://csn.damyoung.cn/image-20210205161830639.png" alt="image-20210205161830639"></p>
<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p><img src="https://csn.damyoung.cn/image-20210205164318136.png" alt="image-20210205164318136"></p>
<p><img src="https://csn.damyoung.cn/image-20210205165853631.png" alt="image-20210205165853631"></p>
<p><img src="https://csn.damyoung.cn/image-20210205165937890.png" alt="image-20210205165937890"></p>
<p><img src="https://csn.damyoung.cn/image-20210205170002483.png" alt="image-20210205170002483"></p>
<p><img src="https://csn.damyoung.cn/image-20210205170029675.png" alt="image-20210205170029675"></p>
<p><img src="https://csn.damyoung.cn/image-20210205170051752.png" alt="image-20210205170051752"></p>
<h2 id="Seata原理"><a href="#Seata原理" class="headerlink" title="Seata原理"></a>Seata原理</h2><p><img src="https://csn.damyoung.cn/image-20210205170428944.png" alt="image-20210205170428944"></p>
<p><img src="https://csn.damyoung.cn/image-20210205170609746.png" alt="image-20210205170609746"></p>
<h3 id="AT模式如何做到对业务的无侵入"><a href="#AT模式如何做到对业务的无侵入" class="headerlink" title="AT模式如何做到对业务的无侵入"></a>AT模式如何做到对业务的无侵入</h3><p><a href="http://seata.io/zh-cn/docs/dev/mode/at-mode.html">http://seata.io/zh-cn/docs/dev/mode/at-mode.html</a></p>
<p><img src="https://csn.damyoung.cn/image-20210205170700906.png" alt="image-20210205170700906"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud</title>
    <url>/2021/01/28/SpringCloud/</url>
    <content><![CDATA[<h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>Spring Cloud是分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体</p>
<p><a href="https://start.spring.io/actuator/info">https://start.spring.io/actuator/info</a> 查看springcloud适配版本号</p>
<table>
<thead>
<tr>
<th>服务注册中心</th>
<th>服务调用</th>
<th>服务降级/熔断</th>
<th>服务网关</th>
<th>服务配置</th>
<th>服务总线</th>
<th>消息驱动</th>
<th>分布式请求链路跟踪</th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>Ribbon(LoadBalancer)</td>
<td>Hystrix</td>
<td>Zuul(弃用)</td>
<td>Config</td>
<td>Bus</td>
<td>RabbirMq</td>
<td>zipkin</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>openFeign</td>
<td>SpringCloudAlibaba Sentinel</td>
<td>gateWay</td>
<td>Nacos</td>
<td>Nacos</td>
<td>RocketMq</td>
<td></td>
</tr>
<tr>
<td>Consul</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>Kafka</td>
<td></td>
</tr>
<tr>
<td>Nacos</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="微服务模块编写"><a href="#微服务模块编写" class="headerlink" title="微服务模块编写"></a>微服务模块编写</h2><blockquote>
<p>没有指定端口号默认是80</p>
</blockquote>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>建module</li>
<li>改pom</li>
<li>写yml</li>
<li>主启动springboot Application</li>
<li>业务类</li>
</ol>
<blockquote>
<p>浏览器对post请求不太支持，用postman工具模拟，浏览器一般使用get请求进行数据浏览</p>
</blockquote>
<p>创建子模块cloud-api-commons,用于整合重复pojo</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p>自动热部署devtools</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>adding plugin to 父工程pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210121172154744.png" alt="image-20210121172154744"></p>
<blockquote>
<ul>
<li>crtl+shrit+alt+/</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210121173147260.png" alt="image-20210121173147260"></p>
<h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><p><code>RestTemplate</code>是便捷访问 restful服务模板类，是spring提供用于访问 Rest服务的 客户端模板工具类</p>
<ul>
<li><code>restTemplate.getForObject(url,requestMap,ResponseBean.class)</code>代表Rest请求地址、请求参数、Http响应转换成的对象类</li>
</ul>
<h2 id="服务编写约定"><a href="#服务编写约定" class="headerlink" title="服务编写约定"></a>服务编写约定</h2><blockquote>
<p>在pom.xml中均有</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自己定义的api通用包，可以使用payment支付Entity--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h1><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h4><p>SpringCloud封装了Netflix公司开发的 Eureka 模块来实现 服务治理</p>
<p>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，<strong>管理</strong>比较复杂，所以需要使用<strong>服务治理</strong>，管理服务与服务之间依赖关系，可以实现<strong>服务调用、负载均衡、容错</strong>等，实现<strong>服务发现与注册</strong></p>
<h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><p>Eureka采用CS设计架构，<code>Eureka Server </code>作为服务注册功能的服务器，它是<strong>服务注册中心</strong>。</p>
<p>而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持<strong>心跳连接</strong>，这样系统的维护人员就可以通过<code>Eureka Server </code>来监控系统各个微服务是否正常运行</p>
<p>在服务注册与发现中，有一个注册中心，当服务器启动时，会把当前自己服务器的信息比如 服务地址通讯地址等以<strong>别名方式注册</strong>到注册中心上，另一方(消费者/服务提供者),以该别名的方式去注册中心上获取到实际的服务通讯地址，然后在实现本地RPC调用</p>
<p>RPC远程调用框架核心设计中心思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何rpc远程框架中，都会有一个注册中心(存放服务地址相关信息(接口地址))</p>
<p><img src="https://csn.damyoung.cn/image-20210122210303331.png" alt="image-20210122210303331"></p>
<h4 id="俩个组件"><a href="#俩个组件" class="headerlink" title="俩个组件"></a>俩个组件</h4><p>Eureka包含俩个组件：<code>Eureka Server</code> 和 <code>Eureka Client</code></p>
<p><code>Eureka Server</code>提供服务注册服务，每个微服务节点通过配置启动后，会在<code>Eureka Server</code>中进行注册，这样<code>Eureka Server</code>中的服务注册表将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到</p>
<p><code>Eureka Client</code> 通过注册中心进行访问，是一个Java客户端，用于简化<code>Eureka Server</code>的交互，客户端同时也具备一个内置的、使用轮询(<code>round-robin</code>)负载算法的负载均衡器。在应用启动后，将会向<code>Eureka Server</code>发送心跳(默认周期为30秒)。如果<code>Eureka Server</code>在多个心跳周期没有接收到某个节点的心跳，<code>Eureka Server</code>将会从服务注册表中把这个服务节点移除(默认90秒)</p>
<h4 id="访问注册中心"><a href="#访问注册中心" class="headerlink" title="访问注册中心"></a>访问注册中心</h4><blockquote>
<p>通过<code>Eureka Server</code>注册中心配置文件指定的<code>eureka.client.server-url.defaultZone=&quot; &quot;</code></p>
</blockquote>
<p>例如:<a href="http://localhost:7001得到注册信息">http://localhost:7001得到注册信息</a></p>
<h3 id="构建单机Eureka"><a href="#构建单机Eureka" class="headerlink" title="构建单机Eureka"></a>构建单机Eureka</h3><p><img src="https://csn.damyoung.cn/image-20210125001252598.png" alt="image-20210125001252598"></p>
<h4 id="Eureaka-Server7001"><a href="#Eureaka-Server7001" class="headerlink" title="Eureaka Server7001"></a>Eureaka Server7001</h4><blockquote>
<p>主启动类中的<code>@EnableEurekaServer</code>注解表明这是Eureka服务端</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka server--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#    false表示自己端就是注册中心，我的职责就是维护服务实例</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#    设置与Eureka Server交互的地址查询服务和注册服务都需要依赖地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ServiceProvider8001"><a href="#ServiceProvider8001" class="headerlink" title="ServiceProvider8001"></a>ServiceProvider8001</h4><blockquote>
<p>主启动类中的<code>@EnableEurekaClient</code>注解表明这是Eureka服务端</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Payment8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Eureka Client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyBatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line"><span class="comment">#    微服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mappers/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.pojo</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    是否从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line"><span class="comment">#    单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210125001031943.png" alt="image-20210125001031943"></p>
<h4 id="ServiceConsumer80"><a href="#ServiceConsumer80" class="headerlink" title="ServiceConsumer80"></a>ServiceConsumer80</h4><blockquote>
<p>同样指定<code>@EnableEurekaClient</code></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    是否从EurekaServer抓取已有的注册信息,默认为true;单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210125002352273.png" alt="image-20210125002352273"></p>
<h3 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h3><p>微服务RPC远程服务调用最核心的是：高可用，注册中心只有一个，出现故障就会整个服务环境不可用</p>
<p>解决：搭建Eureka注册中心集群，实现<strong>负载均衡+故障容错</strong></p>
<h4 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h4><ul>
<li><p>服务注册：将服务信息注册进注册中心</p>
</li>
<li><p>服务发现：从注册中心获取服务信息</p>
</li>
</ul>
<p>实质：存key服务命令，取value调用地址</p>
<h4 id="Service-Provider"><a href="#Service-Provider" class="headerlink" title="Service Provider"></a>Service Provider</h4><ol>
<li>先启动Eureka注册中心</li>
<li>启动服务提供者payment支付服务</li>
<li>支付服务启动会将自身信息(比如服务地址以别名方式注册进Eureka)</li>
<li>消费者order服务在需要调用接口时，使用服务别名去 注册中心获取实际的RPC远程调用地址</li>
<li>消费者获得调用后，底层实际是利用httpClient技术实现远程调用</li>
<li>消费者获得服务地址后会缓存在本地jvm内存中，默认每隔30秒更新一次服务地址</li>
</ol>
<h4 id="集群环境"><a href="#集群环境" class="headerlink" title="集群环境"></a>集群环境</h4><blockquote>
<p>互相注册，相互守望</p>
</blockquote>
<ol>
<li>修改配置文件C:/Windows/System32/drivers/etc/hosts</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20210125115823993.png" alt="image-20210125115823993"></p>
<ol start="2">
<li>Eureka Server配置文件配置</li>
</ol>
<blockquote>
<p>若是3台以上Eureka Server</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#    false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#    false表示自己端就是注册中心，我的职责就是维护服务实例</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#    设置与Eureka Server交互的地址查询服务和注册服务都需要依赖地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka服务端的实例名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line"><span class="comment">#    eureka服务端的实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#    false表示自己端就是注册中心，我的职责就是维护服务实例</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#    设置与Eureka Server交互的地址查询服务和注册服务都需要依赖地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210125172301120.png" alt="image-20210125172301120"></p>
<h4 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h4><ol>
<li><p>启动EurekaServer7001/7002</p>
</li>
<li><p>再启动服务提供者8001，以及服务消费者80；可以在web页面看到微服务已经被注册</p>
</li>
<li><p>服务提供者：<a href="http://localhost//payment/get/31">http://localhost//payment/get/31</a></p>
<p>服务消费者：<a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></p>
</li>
</ol>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h5 id="服务提供者集群8001-8002"><a href="#服务提供者集群8001-8002" class="headerlink" title="服务提供者集群8001/8002"></a>服务提供者集群8001/8002</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    是否从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line"><span class="comment">#    单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">createPayment</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">    log.info(<span class="string">&quot;*****插入结果:&quot;</span>+result);</span><br><span class="line">    <span class="keyword">if</span> (result&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;插入数据库成功,serverPort:&quot;</span>+serverPort,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;插入数据库失败&quot;</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="服务消费者order80"><a href="#服务消费者order80" class="headerlink" title="服务消费者order80"></a>服务消费者order80</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static final String PAYMENT_URL=&quot;http://localhost:8001&quot;;</span></span><br><span class="line"><span class="comment">//    微服务名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL=<span class="string">&quot;http://cloud-payment-service&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@LoadBalanced</code>注解赋予<code>RestTemplate</code>负载均衡的能力</p>
<h3 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="主机名称"><a href="#主机名称" class="headerlink" title="主机名称"></a>主机名称</h4><h5 id="服务名称修改"><a href="#服务名称修改" class="headerlink" title="服务名称修改"></a>服务名称修改</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line"><span class="comment">#    表示是否将自己注册进EurekaServer默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    是否从EurekaServer抓取已有的注册信息,默认为true</span></span><br><span class="line"><span class="comment">#    单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210126111619308.png" alt="image-20210126111619308"></p>
<h5 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h5><p><img src="https://csn.damyoung.cn/image-20210126111703365.png" alt="image-20210126111703365"></p>
<h4 id="访问信息有ip显示"><a href="#访问信息有ip显示" class="headerlink" title="访问信息有ip显示"></a>访问信息有ip显示</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">instance:</span></span><br><span class="line">  <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">  <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h3><p>对于注册进eureka的微服务，可以使用服务发现来获得该服务信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">    <span class="keyword">for</span> (String service : services) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;***element:&quot;</span>+service);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;cloud-payment-service&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">        log.info(instance.getServiceId()+<span class="string">&quot;\t&quot;</span>+instance.getHost()+<span class="string">&quot;\t&quot;</span>+instance.getPort()+<span class="string">&quot;\t&quot;</span>+instance.getUri());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主启动类配置<code>@EnableDiscoveryClient</code></p>
<p><a href="http://localhost:8001/payment/discovery">http://localhost:8001/payment/discovery</a></p>
<p><img src="https://csn.damyoung.cn/image-20210126203428491.png" alt="image-20210126203428491"></p>
<h3 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护，一旦进入保护模式</p>
<p>Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务</p>
<p>在Eureka Server的首页看到以下这段提示，则说明Eureka进入保护模式</p>
<p><img src="https://csn.damyoung.cn/image-20210126204034184.png" alt="image-20210126204034184"></p>
<h4 id="失效原因"><a href="#失效原因" class="headerlink" title="失效原因"></a>失效原因</h4><p>某时刻某个微服务不可用了，Eureka不会立即清理，依旧会对该微服务的信息进行保存</p>
<p>属于CAP中AP分支</p>
<h5 id="自我保护"><a href="#自我保护" class="headerlink" title="自我保护"></a>自我保护</h5><p>为了防止 <code>Eureka Client</code> 可以正常运行，但与<code>Eureka Server</code>网络不通情况下，<code>Eureka Server</code>不会立即将<code>Eureka client</code>清除</p>
<h4 id="禁止自我保护"><a href="#禁止自我保护" class="headerlink" title="禁止自我保护"></a>禁止自我保护</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line"><span class="comment">#    关闭自我保护机制，保证不可用服务被及时剔除</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line"><span class="comment">#    Eureka客户端向服务端发送心跳的时间间隔,单位为秒(默认是30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#    Eureka服务端在收到最后一次心跳后等待时间上限,单位为秒(默认是90秒),超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h2><p>zookeeper是一个分布式协调工具，可以实现注册中心功能</p>
<p>关闭Linux服务器防火墙启动zookeeper服务器，zookeeper服务器取代Eureka服务器，zk作为服务注册中心</p>
<p>zookeeper是临时节点</p>
<h3 id="Zookeeper注册中心"><a href="#Zookeeper注册中心" class="headerlink" title="Zookeeper注册中心"></a>Zookeeper注册中心</h3><h4 id="linux下运行"><a href="#linux下运行" class="headerlink" title="linux下运行"></a>linux下运行</h4><p>打开zookeeperServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/root/apache-zookeeper-<span class="number">3.6</span><span class="number">.2</span>-bin/bin/zkServer.sh start</span><br></pre></td></tr></table></figure>

<p>打开zookeeperClient，进入<code>/root/apache-zookeeper-3.6.2-bin/bin</code>目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">./zkCli.sh start</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210129101517305.png" alt="image-20210129101517305"></p>
<h4 id="验证zookeeperCli下目录"><a href="#验证zookeeperCli下目录" class="headerlink" title="验证zookeeperCli下目录"></a>验证zookeeperCli下目录</h4><blockquote>
<p>仅有[zookeeper]目录</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210129101701257.png" alt="image-20210129101701257"></p>
<h3 id="服务提供者8004"><a href="#服务提供者8004" class="headerlink" title="服务提供者8004"></a>服务提供者8004</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line"><span class="comment">#      zookeeper服务端口</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springCloud with zookeeper:&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主启动类"><a href="#主启动类" class="headerlink" title="主启动类"></a>主启动类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Payment8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证是否已经注册进zookeeper"><a href="#验证是否已经注册进zookeeper" class="headerlink" title="验证是否已经注册进zookeeper"></a>验证是否已经注册进zookeeper</h3><ol>
<li>打开 localhost:8004/payment/payment/zk</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20210129101952982.png" alt="image-20210129101952982"></p>
<ol start="2">
<li><p>zookeeperCli</p>
<blockquote>
<p>可以看出 services已经注册进zookeeper中</p>
</blockquote>
</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20210129102103239.png" alt="image-20210129102103239"></p>
<ol start="3">
<li>转json工具 tool.lu/json</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20210129102218869.png" alt="image-20210129102218869"></p>
<h3 id="服务消费者80"><a href="#服务消费者80" class="headerlink" title="服务消费者80"></a>服务消费者80</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先排除自带的zookeeper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line"><span class="comment">#  注册到zookeeper地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//使得zkorder80具有负载均衡能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZkController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL=<span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://csn.damyoung.cn/image-20210129115521784.png" alt="image-20210129115521784"></p>
<p><img src="https://csn.damyoung.cn/image-20210129115534524.png" alt="image-20210129115534524"></p>
<h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><blockquote>
<p>官网<a href="https://consul.io/intro/index.html">https://consul.io/intro/index.html</a></p>
<p>下载<a href="https://consul.io/downloads.html">https://consul.io/downloads.html</a></p>
<p>中文文档：<a href="https://springcloud.cc/spring-cloud-consul.html">https://springcloud.cc/spring-cloud-consul.html</a></p>
</blockquote>
<p>开源的分布式服务发现和配置管理系统，Go语言编写</p>
<p>提供了微服务系统中的<strong>服务治理、配置中心、控制总线</strong>等功能，这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，Consul提供了一种完整的服务网格解决方案</p>
<p>具有很多优点，包括：基于raft协议，比较简洁；支持健康检查，同时支持Http和DNS协议，支持跨数据中心的WLAN集群，提供图形界面，跨平台，支持Linux,Mac，Windows</p>
<h3 id="安装并运行consul"><a href="#安装并运行consul" class="headerlink" title="安装并运行consul"></a>安装并运行consul</h3><ol>
<li><p>下载运行consul.exe(在路径上cmd)</p>
</li>
<li><p>使用开发模式启动</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">consul agent -dev <span class="comment">//开发者模式启动</span></span><br><span class="line">consul --version <span class="comment">//查看版本号</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打开consul Web服务页面 <a href="http://localhost:8500/">http://localhost:8500</a></li>
</ol>
<h3 id="服务提供者8006"><a href="#服务提供者8006" class="headerlink" title="服务提供者8006"></a>服务提供者8006</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentConsulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springCloud with consul:&quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Payment8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210129155916581.png" alt="image-20210129155916581"></p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210129160006140.png" alt="image-20210129160006140"></p>
<h3 id="服务消费者80-1"><a href="#服务消费者80-1" class="headerlink" title="服务消费者80"></a>服务消费者80</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderConsulMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//使得zkorder80具有负载均衡能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210129161328409.png" alt="image-20210129161328409"></p>
<p><img src="https://csn.damyoung.cn/image-20210129161338018.png" alt="image-20210129161338018"></p>
<h2 id="三个注册中心异同"><a href="#三个注册中心异同" class="headerlink" title="三个注册中心异同"></a>三个注册中心异同</h2><table>
<thead>
<tr>
<th>组件名</th>
<th>语言</th>
<th>CAP</th>
<th>服务健康检查</th>
<th>对外暴露接口</th>
<th>springCloud集成</th>
</tr>
</thead>
<tbody><tr>
<td>Eureka</td>
<td>Java</td>
<td>AP</td>
<td>可配支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td>Consul</td>
<td>Go</td>
<td>CP</td>
<td>支持</td>
<td>HTTP/DNS</td>
<td>已集成</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>Java</td>
<td>CP</td>
<td>支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
</tbody></table>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><p><img src="https://csn.damyoung.cn/image-20210129174144364.png" alt="image-20210129174144364"></p>
<ul>
<li>Consistency强一致性</li>
<li>Availability可用性</li>
<li>Partition tolerance分区容错性</li>
</ul>
<p>CAP理论关注粒度是数据，而不是整体系统设计的策略</p>
<p>最多只能同时较好的满足俩个</p>
<p>核心：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，因此，根据CAP原理将NoSql数据库分成满足CA原则、满足CP原则和满足AP原则三大类</p>
<ol>
<li>CA-单点集群，满足一致性和可用性的系统，通常在可扩展性上不太强大</li>
<li>CP-满足一致性和分区容错性的系统，通常性能不是特别高</li>
<li>AP-满足可用性和分区容错性的系统，通常可能对一致性要求低一些</li>
</ol>
<h3 id="AP架构"><a href="#AP架构" class="headerlink" title="AP架构"></a>AP架构</h3><blockquote>
<p>Eureka</p>
</blockquote>
<p>当网络分区出现后，为了保证可用性，系统B可以返回旧值，保证系统的可用性</p>
<p>结论：违背了一致性C的要求，只满足可用性和分区容错，即AP</p>
<p><img src="https://csn.damyoung.cn/1597384508291.png" alt="1597384508291"></p>
<h3 id="CP架构"><a href="#CP架构" class="headerlink" title="CP架构"></a>CP架构</h3><blockquote>
<p>Zookeeper/Consul</p>
</blockquote>
<p>当网络分区出现后，为了保证一致性，就必须拒接请求，否则无法保证一致性</p>
<p>结论：违背了可用性A的要求，只满足一致性和分区容错，即CP</p>
<p><img src="https://csn.damyoung.cn/1597384554249.png"></p>
<h1 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h1><blockquote>
<p>都是使用在client端，即有“消费者”需求的模块中</p>
</blockquote>
<h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><blockquote>
<p>提前启动eureka集群环境(5个模块)</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210129205442752.png" alt="image-20210129205442752"></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套客户端，<strong>负载均衡的工具</strong></p>
<p>Ribbon是Netflix发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等，简单来说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等)去连接这些机器，我们很容易使用Ribbon实现自定义的负载均衡算法</p>
<p>官网-github.com/Netflix/ribbon</p>
<p><strong>LB负载均衡(load Balance)是什么？</strong></p>
<p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA(高可用)</p>
<p>常用的负载均衡有软件Niginx,LVS，硬件F5等</p>
<p><strong>Ribbon本地负载均衡客户端和Nginx服务端负载均衡的区别</strong></p>
<p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求，即负载均衡是由服务端实现的</p>
<p>Ribbon本地负载均衡，在调用微服务接口时，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术</p>
<p>**集中式:**即在服务消费方和提供方之间使用独立的LB设施(可以是硬件，如F5，也可以是软件nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方</p>
<p><strong>进程内：</strong>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从地址中选择出一个合适的服务器</p>
<p>Ribbon属于进程内LB，它只是一个类库，集成与消费方进程，消费方通过它来获取到服务提供方的地址</p>
<p><img src="https://csn.damyoung.cn/image-20210129223513191.png" alt="image-20210129223513191"></p>
<p><strong>Ribbon在工作时分成两步</strong></p>
<ol>
<li><p>先选择EurekaServer,它优先选择在同一个区域内<strong>负载较少</strong>的server</p>
</li>
<li><p>再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址</p>
<p>其中Ribbon提供多种策略算法：比如轮询、随机、根据响应时间加权</p>
</li>
</ol>
<p>上面在eureka时，确实实现了负载均衡机制，那是因为eureka-client包里面自带着ribbon</p>
<p><img src="https://csn.damyoung.cn/image-20210129223916168.png" alt="image-20210129223916168"></p>
<p>Ribbon就是<strong>负载均衡+restTemplate</strong>实现RPC远程调用，实际上不止eureka的jar包有，zookeeper的jar包，还有consul的jar包都包含，就是上面使用的服务调用</p>
<h3 id="RestTemplate-1"><a href="#RestTemplate-1" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p><code>getForObject()</code>返回对象为响应体中数据转化成的对象，基本上可以理解为json</p>
<p><code>getForEntity()</code>返回对象为<code>ResponseEntity</code>对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/getForEntity/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity=restTemplate.getForEntity(PAYMENT_URL+<span class="string">&quot;/payment/get/&quot;</span>+id,CommonResult.class);</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line">        log.info(entity.getStatusCode()+<span class="string">&quot;\t&quot;</span>+entity.getHeaders());</span><br><span class="line">        <span class="comment">//返回请求体</span></span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>,<span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="核心组件IRule"><a href="#核心组件IRule" class="headerlink" title="核心组件IRule"></a>核心组件IRule</h3><h4 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h4><p>iRule:根据特点算法中从服务列表中选取一个要访问的服务</p>
<p><img src="https://csn.damyoung.cn/image-20210129230137208.png" alt="image-20210129230137208"></p>
<h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p>官方文档明确作出警告，这个自定义配置类不能放在<code>@ComponentScan</code>所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了</p>
<blockquote>
<p>@SpringBootApplication注解会扫描当前包或者当前包的子包</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210129230506177.png" alt="image-20210129230506177"></p>
<p><img src="https://csn.damyoung.cn/image-20210129230910321.png" alt="image-20210129230910321"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;cloud-payment-service&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h3><h4 id="轮询算法"><a href="#轮询算法" class="headerlink" title="轮询算法"></a>轮询算法</h4><p>rest接口第几次请求数%服务器集群总数量=实际调用服务器位置下标，每次服务重启动rest接口计数从1开始</p>
<p><img src="https://csn.damyoung.cn/image-20210130104951315.png" alt="image-20210130104951315"></p>
<h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>RoundRobinRule.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ILoadBalancer采用何种负载均衡算法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">//可达服务</span></span><br><span class="line">                List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">                <span class="comment">//总服务数</span></span><br><span class="line">                List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">                <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">                <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line">                <span class="keyword">if</span> (upCount != <span class="number">0</span> &amp;&amp; serverCount != <span class="number">0</span>) &#123;</span><br><span class="line"> 					<span class="comment">//求余方法 得到实际调用服务器下标	</span></span><br><span class="line">                    <span class="keyword">int</span> nextServerIndex = <span class="keyword">this</span>.incrementAndGetModulo(serverCount);</span><br><span class="line">                    <span class="comment">//根据轮询下标得到服务器对象</span></span><br><span class="line">                    server = (Server)allServers.get(nextServerIndex);</span><br><span class="line">                    <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Thread.yield();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (server.isAlive() &amp;&amp; server.isReadyToServe()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> server;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        server = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">             log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span> + lb);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> server;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求余</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> current;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        current = <span class="keyword">this</span>.nextServerCyclicCounter.get();</span><br><span class="line">        next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.nextServerCyclicCounter.compareAndSet(current, next));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>服务接口+调用</p>
<p>官网<a href="http://github.com/spring-cloud/spring-cloud-openfeign">http://github.com/spring-cloud/spring-cloud-openfeign</a></p>
<p>Feign是一个声明式WebService客户端，Feign旨在使编写Web Service客户端更加简单，<strong>只需要创建一个接口并在接口上添加注解即可</strong></p>
<p>前面使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行<strong>封装一些客户端类</strong>来包装这些依赖服务的调用，所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。</p>
<p>在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解即可)，即可<strong>完成对服务提供方的接口绑定</strong>，简化了使用SpringCloud Ribbon时，自动封装服务调用客户端的开发量。</p>
<p><strong>Feign集成了Ribbon</strong></p>
<p>利用了Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要<strong>定义服务绑定接口且以声明式的方法</strong>，简单的实现了服务调用</p>
<p>它的使用方法是定义一个服务接口然后在上面添加注解，Feign也支持可拔插式的编码器和解码器，SpringCloud对Fegin进行封装，使其支持了SpringMVC标准注解和HttpMessageConverters。Fegin可以与Eureka和Ribbon组合使用以支持负载均衡</p>
<h4 id="Fegin和OpenFeign"><a href="#Fegin和OpenFeign" class="headerlink" title="Fegin和OpenFeign"></a>Fegin和OpenFeign</h4><p><img src="https://csn.damyoung.cn/image-20210130114057764.png" alt="image-20210130114057764"></p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><img src="https://csn.damyoung.cn/image-20210130114401837.png" alt="image-20210130114401837"></p>
<h4 id="创建cloud-consumer-feign-order80"><a href="#创建cloud-consumer-feign-order80" class="headerlink" title="创建cloud-consumer-feign-order80"></a>创建cloud-consumer-feign-order80</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaulZone:</span> <span class="string">http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//使用feign激活开启</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-payment-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="超时控制"><a href="#超时控制" class="headerlink" title="超时控制"></a>超时控制</h3><p>默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待，直接返回报错，为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制</p>
<p>yml开启配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置feign客户端超时时间(openFeign默认支持ribbon</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="comment">#  指的是建立连接后从服务器读取到可用资源的时间</span></span><br><span class="line">  <span class="attr">ReadTimeOut:</span> <span class="number">5000</span></span><br><span class="line"><span class="comment">#  指的是建立连接所用的时间，适用于网络状况正常的情况下,俩端连接所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeOut:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<h3 id="日志打印"><a href="#日志打印" class="headerlink" title="日志打印"></a>日志打印</h3><p>Feign提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解Feign中http请求的细节</p>
<p>对feign接口的调用情况进行监控和输出</p>
<p><img src="https://csn.damyoung.cn/image-20210130143652171.png" alt="image-20210130143652171"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line"><span class="comment">#    feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.example.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><blockquote>
<p>服务降级，服务熔断，接近实时的监控</p>
</blockquote>
<p>官网：<a href="https://github.com/Netflix/Hystrix/wiki/How-To-Use">https://github.com/Netflix/Hystrix/wiki/How-To-Use</a></p>
<blockquote>
<p>分布式系统面临的问题？</p>
<p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败</p>
</blockquote>
<p><strong>服务雪崩</strong></p>
<p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的”<strong>扇出</strong>“，如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的”雪崩效应”</p>
<p>对于高 流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和，比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。</p>
<h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>Hysrix是一个用于处理分布式系统的<strong>延迟和容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</p>
<p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控(雷士熔断保险丝)，向调用方法返回一个符合预期的、可处理的备选响应(FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>服务器忙，请稍后再试，不让客户端等待并立即返回一个友好提示，fallback</p>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断触发服务降级</li>
<li>线程池/信号量打满也会导致服务降级</li>
</ul>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>类比保险丝达到最大服务访问后，直接拒绝访问，拉闸停电，然后调用服务降级的方法并返回友好提示</p>
<p>服务降级==&gt;进而熔断==&gt;恢复调用链路</p>
<h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>cloud-provider-hystrix-payment8001</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        hystrix--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        Eureka Client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+<span class="string">&quot; payment_OK,id &quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">                <span class="string">&quot; paymentInfo_TimeOut,id &quot;</span>+id+<span class="string">&quot;耗时3秒钟&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfoTimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上module均ok，从正确-&gt;错误-&gt;降级熔断-&gt;恢复</p>
<h2 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h2><p>使用 Jmeter高并发压力测试，开启Jmeter，来20000并发量访问<code>payment_TimeOut</code></p>
<p>再来一个访问`<a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p>
<p>结果：俩个都在加载中，tomcat默认工作线程被打满，</p>
<p><img src="https://csn.damyoung.cn/image-20210130202002902.png" alt="image-20210130202002902"></p>
<p><img src="https://csn.damyoung.cn/image-20210130202027028.png" alt="image-20210130202027028"></p>
<p><img src="https://csn.damyoung.cn/image-20210130202410989.png" alt="image-20210130202410989"></p>
<h2 id="增加消费服务"><a href="#增加消费服务" class="headerlink" title="增加消费服务"></a>增加消费服务</h2><p>cloud-consumer-feign-hystrix-order80</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>使用Jmeter高并发测试，同上</p>
<p>结果：8001同一层次的其他接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕</p>
<p>​            80此时调用8001，客户端访问响应缓慢，转圈圈</p>
<p><strong>正因为有上述故障或不佳表现，才有我们降级/容错/限流等技术诞生</strong></p>
<p><strong>超时：</strong>导致服务器变慢(转圈)，超时不再等待</p>
<p><strong>出错：</strong>宕机或程序运行出错，出错要有兜底</p>
<p><strong>解决：</strong>对方服务(8001)超时，调用者(80)不能一直卡死等待，必须要有服务降级</p>
<p>​            对方服务(8001)down机，调用者(80)不能一直卡死等待，必须要有服务降级</p>
<p>​            对方服务(8001)OK，调用者(80)自己出故障或由自我要求(自己等待时间小于服务提供者)，自己处理降级</p>
<h2 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h2><h3 id="8001"><a href="#8001" class="headerlink" title="8001"></a>8001</h3><p>设置自身调用超时时间的峰值，峰值内可以正常运行，超过需要有兜底的方法处理，作服务降级fallback </p>
<p><code>@HystrixCommand</code>一旦调用服务方法失败并抛出错误信息后，会自动调用<code>@HystrixCommand</code>标注好的fallbackMethod调用类中的指定方法</p>
<p>cloud-provider-hystrix-payment8001</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">    //3000ms为峰值,超出则调用兜底方法</span></span><br><span class="line"><span class="meta">    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">        <span class="string">&quot; paymentInfo_TimeOut,id &quot;</span>+id+<span class="string">&quot;耗时3秒钟&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">        <span class="string">&quot; paymentInfo_TimeoutHandler,id &quot;</span>+id+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>超时时间超过峰值时间3秒，到达兜底方法</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20210130221930193.png" alt="image-20210130221930193"></p>
<ul>
<li>制造异常  <code>int a=10/0</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeoutHandler&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">           //3000ms为峰值,超出则调用兜底方法</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfoTimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">                <span class="string">&quot; paymentInfo_TimeOut,id &quot;</span>+id+<span class="string">&quot;耗时3秒钟&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeoutHandler</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池: &quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">                <span class="string">&quot; 系统繁忙,请稍后再试,id &quot;</span>+id+<span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210130222508860.png" alt="image-20210130222508860"></p>
<p><strong>结论：</strong>当前服务不可用，做服务降级，兜底方案都是<code>paymentInfo_TimeOutHandler</code></p>
<h3 id="80"><a href="#80" class="headerlink" title="80"></a>80</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;我是消费者80,对方支付系统繁忙请10秒后再试,┭┮﹏┭┮&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ol>
<li>每个业务方法对应一个兜底方法，代码冗杂</li>
</ol>
<p><strong>解决：</strong>global fallback</p>
<p><code>@DefaultProperties(defaultFallback=&quot; &quot;)</code>通用和独享的各自分开，避免了代码膨胀，合理减少了代码量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span> <span class="comment">//3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//2</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是global fallback</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;global异常处理信息，请稍后重试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>代码耦合度高</li>
</ol>
<p>未来遇到的异常:运行、超时、宕机</p>
<p>修改cloud-consumer-feign-hystrix-order80</p>
<p>根据cloud-consumer-feign-hystrix-order80已经有的PaymentHystrixService接口，重新新建一个类(PaymentFallBackService)实现该接口，统一为接口里面的方法进行异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---fallback,ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---fallback,timeout&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p><img src="https://csn.damyoung.cn/image-20210130230131490.png" alt="image-20210130230131490"></p>
<ul>
<li>关闭payment8001,默认服务端宕机，但是我们做了服务降级处理，让客户端在服务端不可用时也会获得提示信息而不会挂起耗死服务器</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20210130230205943.png" alt="image-20210130230205943"></p>
<h2 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h2><p>熔断机制就是应对雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息</p>
<p>当检测到该节点微服务调用响应正常后，恢复调用链路</p>
<p>在SpringCloud框架中，熔断机制通过Hystrix实现，Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制，熔断机制的注解是<code>@HystrixCommand</code></p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>修改cloud-provider-hystrix-payment8001</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">        //是否开启断路器</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">        //请求次数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">        //时间窗口数</span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),</span></span><br><span class="line"><span class="meta">        //失败率达到多少后跳闸    </span></span><br><span class="line"><span class="meta">        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (id&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;**id 不能为负数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//==UUID.randomUUID()</span></span><br><span class="line">    String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">    <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;\t调用成功,流水号&quot;</span>+serialNumber;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;id  不能为负数,请稍后再试 id  &quot;</span>+id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务熔断</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id)</span></span>&#123;</span><br><span class="line">    String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">    log.info(<span class="string">&quot;**result&quot;</span>+result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131105838125.png" alt="image-20210131105838125"></p>
<p><img src="https://csn.damyoung.cn/image-20210131105849878.png" alt="image-20210131105849878"></p>
<p><img src="https://csn.damyoung.cn/image-20210131110123521.png" alt="image-20210131110123521"></p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态</p>
<p>熔断关闭：熔断关闭不会对服务进行熔断</p>
<p>熔断半开：部分请求更具规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断</p>
<p><img src="https://csn.damyoung.cn/image-20210131155127250.png" alt="image-20210131155127250"></p>
<p>断路器开启或者关闭的条件</p>
<p><img src="https://csn.damyoung.cn/image-20210131155150279.png" alt="image-20210131155150279"></p>
<p>断路器开启之后</p>
<p><img src="https://csn.damyoung.cn/image-20210131155323521.png" alt="image-20210131155323521"></p>
<p>ALL配置</p>
<h2 id="服务监控hystrixDashboard"><a href="#服务监控hystrixDashboard" class="headerlink" title="服务监控hystrixDashboard"></a>服务监控hystrixDashboard</h2><p><img src="https://csn.damyoung.cn/image-20210131155607319.png" alt="image-20210131155607319"></p>
<p>新建cloud-consumer-hystrix-dashboard9001</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboardMain9001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboardMain9001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131160327319.png" alt="image-20210131160327319"></p>
<h3 id="被监控"><a href="#被监控" class="headerlink" title="被监控"></a>被监控</h3><ul>
<li><p>被监控服务需要导入 actuator </p>
</li>
<li><p>主启动类加上配置</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">     *ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class="line"><span class="comment">     *只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet();</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动一个eureka或eureka集群，9001监控8001，填写监控地址</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20210131160924167.png" alt="image-20210131160924167"></p>
<ul>
<li><a href="http://localhost:8001/payment/circuit/11">http://localhost:8001/payment/circuit/11</a></li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20210131161113450.png" alt="image-20210131161113450"></p>
<ul>
<li><a href="http://localhost:8001/payment/circuit/-1">http://localhost:8001/payment/circuit/-1</a></li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20210131161145648.png" alt="image-20210131161145648"></p>
<p><img src="https://csn.damyoung.cn/image-20210131161223417.png" alt="image-20210131161223417"></p>
<p><img src="https://csn.damyoung.cn/image-20210131161251367.png" alt="image-20210131161251367"></p>
<p><img src="https://csn.damyoung.cn/image-20210131161306629.png" alt="image-20210131161306629"></p>
<h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><h2 id="zuul"><a href="#zuul" class="headerlink" title="zuul"></a>zuul</h2><h2 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h2><p>目标提供统一的路由方式且基于Fiter链的方式提供了网关基本的功能，例如安全，监控/指标，限流</p>
<p>SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架</p>
<p>反向代理，鉴权，流量控制，熔断，日志监控</p>
<p><img src="https://csn.damyoung.cn/image-20210131162234865.png" alt="image-20210131162234865"></p>
<p>异步非阻塞模型</p>
<p><img src="https://csn.damyoung.cn/image-20210131162442894.png" alt="image-20210131162442894"></p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210131162636791.png" alt="image-20210131162636791"></p>
<h3 id="三大核心"><a href="#三大核心" class="headerlink" title="三大核心"></a>三大核心</h3><p>路由：路由是构建网关的基本模块，它由ID，目标URI，一系列断言和过滤器组成，如果断言为true则匹配该路由</p>
<p>断言predicate：参考jdk8的java.util.function.Predicate开发人员可以匹配http请求中的所有内容(请求头或请求参数)，如果请求与断言相匹配进行路由</p>
<p>过滤filter：指的是spring框架中gatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改</p>
<p><img src="https://csn.damyoung.cn/image-20210131163241209.png" alt="image-20210131163241209"></p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>路由转发+执行过滤器链</p>
<p><img src="https://csn.damyoung.cn/image-20210131163429189.png" alt="image-20210131163429189"></p>
<p><img src="https://csn.damyoung.cn/image-20210131163439079.png" alt="image-20210131163439079"></p>
<h3 id="入门配置"><a href="#入门配置" class="headerlink" title="入门配置"></a>入门配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cloud-gateway</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GatewayMain9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9527网关配置"><a href="#9527网关配置" class="headerlink" title="9527网关配置"></a>9527网关配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span> <span class="comment">#路由的id,没有固定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131170644311.png" alt="image-20210131170644311"></p>
<p><img src="https://csn.damyoung.cn/image-20210131170945062.png" alt="image-20210131170945062"></p>
<p><img src="https://csn.damyoung.cn/image-20210131170956754.png" alt="image-20210131170956754"></p>
<h3 id="网关俩种配置"><a href="#网关俩种配置" class="headerlink" title="网关俩种配置"></a>网关俩种配置</h3><ol>
<li><p>yml，如上</p>
</li>
<li><p>注入bean</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line">        routes.route(<span class="string">&quot;path_route1&quot;</span>,</span><br><span class="line">                r-&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131171849431.png" alt="image-20210131171849431"></p>
<p><img src="https://csn.damyoung.cn/image-20210131171856957.png" alt="image-20210131171856957"></p>
<h3 id="微服务名实现动态路由"><a href="#微服务名实现动态路由" class="headerlink" title="微服务名实现动态路由"></a>微服务名实现动态路由</h3><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能</p>
<p>通过微服务名，服务负载均衡</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">9527</span></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: Cloud-gateway</span><br><span class="line">  cloud:</span><br><span class="line">    gateway:</span><br><span class="line">#      开启从注册中心动态创建路由的功能，利用 微服务名 进行路由</span><br><span class="line">      discovery:</span><br><span class="line">        locator:</span><br><span class="line">          enabled: <span class="keyword">true</span></span><br><span class="line">      routes:</span><br><span class="line">        - id: payment_routh #路由的id,没有固定规则但要求唯一,建议配合服务名</span><br><span class="line">#          uri: http://localhost:8001 #匹配后提供服务的路由地址</span><br><span class="line">          uri: lb:<span class="comment">//cloud-payment-service</span></span><br><span class="line">          predicates:</span><br><span class="line">            - Path=/payment/get<span class="comment">/** #断言，路径相匹配的进行路由</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">        - id: payment_routh2</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001</span></span><br><span class="line"><span class="comment">          uri: lb://cloud-payment-service</span></span><br><span class="line"><span class="comment">          predicates:</span></span><br><span class="line"><span class="comment">            - Path=/payment/lb/**</span></span><br><span class="line"><span class="comment">#              开启动态路由</span></span><br><span class="line"><span class="comment">eureka:</span></span><br><span class="line"><span class="comment">  instance:</span></span><br><span class="line"><span class="comment">    hostname: cloud-gateway-service</span></span><br><span class="line"><span class="comment">  client:</span></span><br><span class="line"><span class="comment">    register-with-eureka: true</span></span><br><span class="line"><span class="comment">    fetch-registry: true</span></span><br><span class="line"><span class="comment">    service-url:</span></span><br><span class="line"><span class="comment">      defaultZone: http://eureka7001.com:7001/eureka</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131180649911.png" alt="image-20210131180649911"></p>
<p><img src="https://csn.damyoung.cn/image-20210131180620736.png" alt="image-20210131180620736"></p>
<p><img src="https://csn.damyoung.cn/image-20210131180628156.png" alt="image-20210131180628156"></p>
<h3 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h3><p>Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理</p>
<p><img src="https://csn.damyoung.cn/image-20210131180753194.png" alt="image-20210131180753194"></p>
<h4 id="After-Before-Between"><a href="#After-Before-Between" class="headerlink" title="After/Before/Between"></a>After/Before/Between</h4><blockquote>
<p>在设置时间之后才能访问</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210131194217153.png" alt="image-20210131194217153"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(ZonedDateTime.now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#            - Before=2021-01-31T19:42:00.569+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment">#            - After=2021-01-31T19:42:00.569+08:00[Asia/Shanghai]</span></span><br><span class="line"><span class="comment">#            - Between=2021-01-31T19:42:00.569+08:00[Asia/Shanghai],2021-01-31T19:44:00.569+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

<h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><blockquote>
<p>curl作为测试</p>
<p><a href="http://localhost:9527/payment/get/31">http://localhost:9527/payment/get/31</a> –cookie “username=zzyy”</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210131194601805.png" alt="image-20210131194601805"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Cookie=username,zzyy</span></span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131195306258.png" alt="image-20210131195306258"></p>
<h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span> <span class="comment">#请求头要有X-Request-Id属性并且值为整数的正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="string">curl</span> <span class="string">http://localhost:9527/payment/lb</span> <span class="string">-H</span> <span class="string">&quot;X-Request-Id:123&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>路由过滤器可用于修改进入的http请求和返回的http响应，路由过滤器只能指定路由进行使用，SpringCloud Gateway内置了多种路由过滤器，他们都由GatewayFilter工厂类产生</p>
<p><strong>生命周期：</strong>pre、post</p>
<p><strong>种类：</strong>GatewayFilter、GlobalFilter (n种)</p>
<h4 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h4><blockquote>
<p>全局日志记录，统一网关鉴权</p>
<p>implements GlobalFilter,Ordered</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGatewayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;come in==== MyLogGateWayFilter&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname==<span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;====用户名为null,非法用户┭┮﹏┭┮&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131202526177.png" alt="image-20210131202526177"></p>
<p><img src="https://csn.damyoung.cn/image-20210131202637738.png" alt="image-20210131202637738"></p>
<h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>微服务意外着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p>
<p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置</p>
<p><img src="https://csn.damyoung.cn/image-20210131205040760.png" alt="image-20210131205040760"></p>
<p> SpringCloud Config分为服务端和客户端</p>
<p>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供配置信息，加密/解密信息等访问接口</p>
<p>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容</p>
<p><strong>作用</strong></p>
<ul>
<li><p>集中管理配置文件</p>
</li>
<li><p>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/bata/release</p>
</li>
<li><p>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</p>
</li>
<li><p>当配置发生变化时，服务不需要重启即可感知到配置的变化并应用新的配置</p>
</li>
<li><p>将配置信息以rest接口的形式暴露(post/curl访问刷新即可)</p>
</li>
</ul>
<p>SpringCloud Config默认使用git来存储配置文件,使用的是http/https访问的形式</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>创建github repository</p>
<p><img src="https://csn.damyoung.cn/image-20210131212121409.png" alt="image-20210131212121409"></p>
<p><img src="https://csn.damyoung.cn/image-20210131212224156.png" alt="image-20210131212224156"></p>
<h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>创建配置中心模块cloud-config-center-3344，即为cloud配置中心模块cloudConfig Center</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        config配置server服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">git@github.com:dmYang-only/springcloud-config.git</span> <span class="comment">#GitHub上面的git仓库名字</span></span><br><span class="line">          <span class="comment">####搜索目录</span></span><br><span class="line">          <span class="attr">search-paths:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131215953415.png" alt="image-20210131215953415"></p>
<p><img src="https://csn.damyoung.cn/image-20210131221758571.png" alt="image-20210131221758571"></p>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>cloud-config-client-3355,创建<code>bootstrap.yml</code>配置文件</p>
<p><img src="https://csn.damyoung.cn/image-20210131222749789.png" alt="image-20210131222749789"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        config配置server服务端--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：main分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/main/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址k</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131224044869.png" alt="image-20210131224044869"></p>
<p><img src="https://csn.damyoung.cn/image-20210131224119878.png" alt="image-20210131224119878"></p>
<p><img src="https://csn.damyoung.cn/image-20210131224245525.png" alt="image-20210131224245525"></p>
<p><strong>存在问题：</strong></p>
<p>分布式配置的动态刷新问题</p>
<p><img src="https://csn.damyoung.cn/image-20210131224742641.png" alt="image-20210131224742641"></p>
<h3 id="动态刷新"><a href="#动态刷新" class="headerlink" title="动态刷新"></a>动态刷新</h3><p><img src="https://csn.damyoung.cn/image-20210131224943520.png" alt="image-20210131224943520"></p>
<p>3355客户端</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210131225605591.png" alt="image-20210131225605591"></p>
<p>需要运维人员发送post请求刷新3355</p>
<p><img src="https://csn.damyoung.cn/image-20210131225714671.png" alt="image-20210131225714671"></p>
<p><img src="https://csn.damyoung.cn/image-20210131225728695.png" alt="image-20210131225728695"></p>
<p>成功实现了客户端3355刷新到最新配置内容-避免了服务重启</p>
<p><img src="https://csn.damyoung.cn/image-20210131225918816.png" alt="image-20210131225918816"></p>
<h1 id="消息总线"><a href="#消息总线" class="headerlink" title="消息总线"></a>消息总线</h1><p>分布式自动刷新配置功能</p>
<h2 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h2><p>SpringCloud Bus配合SpringCloud Config使用可以实现配置的动态刷新</p>
<p>Bus支持俩种消息代理：RabbitMQ和kafka</p>
<p><img src="https://csn.damyoung.cn/image-20210131230319685.png" alt="image-20210131230319685"></p>
<p>SpringCloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以作微服务间的通信通道</p>
<p><img src="https://csn.damyoung.cn/image-20210131234652872.png" alt="image-20210131234652872"></p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>安装见 linux-rabbitmq安装</p>
<p>访问<a href="http://42.192.130.130:15672/">http://42.192.130.130:15672</a></p>
<p><img src="https://csn.damyoung.cn/image-20210201003956704.png" alt="image-20210201003956704"></p>
<h3 id="Bus动态刷新全局广播"><a href="#Bus动态刷新全局广播" class="headerlink" title="Bus动态刷新全局广播"></a>Bus动态刷新全局广播</h3><p><img src="https://csn.damyoung.cn/image-20210131235048007.png" alt="image-20210131235048007"></p>
<p><img src="https://csn.damyoung.cn/image-20210131235613392.png" alt="image-20210131235613392"></p>
<p><img src="https://csn.damyoung.cn/image-20210131235730290.png" alt="image-20210131235730290"></p>
<p><img src="https://csn.damyoung.cn/image-20210131235754061.png" alt="image-20210131235754061"></p>
<p>选择第二种设计思想，第一种不可行原因</p>
<p><img src="https://csn.damyoung.cn/image-20210131235923580.png" alt="image-20210131235923580"></p>
<p>3344</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        添加消息总线RabbitMq支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span>   </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置,暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure>

<p>3355/3366</p>
<p>pom.xml同上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> 	<span class="attr">rabbitmq:</span></span><br><span class="line">    	<span class="attr">host:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span></span><br><span class="line">    	<span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">   		<span class="attr">xusername:</span> <span class="string">guest</span></span><br><span class="line">    	<span class="attr">password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<p><img src="https://csn.damyoung.cn/image-20210201090843728.png" alt="image-20210201090843728"></p>
<p><img src="https://csn.damyoung.cn/image-20210201090905242.png" alt="image-20210201090905242"></p>
<p><img src="https://csn.damyoung.cn/image-20210201090919944.png" alt="image-20210201090919944"></p>
<p><img src="https://csn.damyoung.cn/image-20210201090934601.png" alt="image-20210201090934601"></p>
<p>修改version=4</p>
<p><img src="https://csn.damyoung.cn/image-20210201091013112.png" alt="image-20210201091013112"></p>
<p><img src="https://csn.damyoung.cn/image-20210201091026330.png" alt="image-20210201091026330"></p>
<p>发送post请求，实现一次发送，处处生效</p>
<p><img src="https://csn.damyoung.cn/image-20210201091300917.png" alt="image-20210201091300917"></p>
<p><img src="https://csn.damyoung.cn/image-20210201091327317.png" alt="image-20210201091327317"></p>
<p>达到一次修改，广播通知，处处生效</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210201092035061.png" alt="image-20210201092035061"></p>
<h3 id="Bus动态刷新顶点通知"><a href="#Bus动态刷新顶点通知" class="headerlink" title="Bus动态刷新顶点通知"></a>Bus动态刷新顶点通知</h3><p>不想全部通知，只想定点通知，只通知3355</p>
<p>指定具体某个实例生效而不是全部，<a href="http://localhost:3344/actuator/bus-refresh/applicationName:port">http://localhost:3344/actuator/bus-refresh/applicationName:port</a></p>
<p>/bus-refresh请求不再发送到具体的服务实例上，而是发送给config server并通过destination参数类指定需要更新配置的服务或实例</p>
<p>案例：只通知3355,不通知3366</p>
<p><img src="https://csn.damyoung.cn/image-20210201092008497.png" alt="image-20210201092008497"></p>
<p><img src="https://csn.damyoung.cn/image-20210201092055910.png" alt="image-20210201092055910"></p>
<p><img src="https://csn.damyoung.cn/image-20210201092215444.png" alt="image-20210201092215444"></p>
<h1 id="消息驱动"><a href="#消息驱动" class="headerlink" title="消息驱动"></a>消息驱动</h1><p>springCloud Stream 屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型</p>
<p>官网：<a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p>
<p>中文：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<p><img src="https://csn.damyoung.cn/image-20210201101647228.png" alt="image-20210201101647228"></p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="标准MQ"><a href="#标准MQ" class="headerlink" title="标准MQ"></a>标准MQ</h3><p>生产者/消费者之间靠消息媒介传递消息内容-Message</p>
<p>消息必须走特定的通道-消息通道MessageChannel</p>
<p>消息通道MessageChannel的子接口SubscribableChannel,由MessageHandler消息处理器所订阅</p>
<p><img src="https://csn.damyoung.cn/image-20210201102208490.png" alt="image-20210201102208490"></p>
<h3 id="CloudStream"><a href="#CloudStream" class="headerlink" title="CloudStream"></a>CloudStream</h3><blockquote>
<p>Stream中的消息通信方式遵循了发布-订阅模式</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20210201102710222.png" alt="image-20210201102710222"></p>
<p>中间件的差异性导致我们实际项目开发给我们造成一定的困扰，如果用了俩种消息队列的其中一种，后面的业务需求，我们想往另外一种消息队列进行迁移，这时候无疑是一个灾难性的，一大堆东西都要重新推到重新做，因为它跟我们的系统耦合了，这时候springcloud Stream给我们提供一种解耦合的方式</p>
<p><img src="https://csn.damyoung.cn/image-20210201103014600.png" alt="image-20210201103014600"></p>
<p><img src="https://csn.damyoung.cn/image-20210201103129111.png" alt="image-20210201103129111"></p>
<p><img src="https://csn.damyoung.cn/image-20210201103427696.png" alt="image-20210201103427696"></p>
<p>Binder：很方便的连接中间件，屏蔽差异</p>
<p>Channel：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过channel对队列进行配置</p>
<p>source和sink：简单可理解为参照对象是springcloud stream自身，从stream发布消息就是输出，接收消息就是输入</p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><img src="https://csn.damyoung.cn/image-20210201103840324.png" alt="image-20210201103840324"></p>
<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><ol>
<li>RabbitMq环境</li>
<li>三个子模块</li>
</ol>
<p><img src="https://csn.damyoung.cn/image-20210201103936754.png" alt="image-20210201103936754"></p>
<h3 id="消息驱动之生产者"><a href="#消息驱动之生产者" class="headerlink" title="消息驱动之生产者"></a>消息驱动之生产者</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        stream rabbitmq --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">            <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8801.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201105616678.png" alt="image-20210201105616678"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> dmYang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021/2/1 10:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//定义消息的推送管道</span></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output; <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        log.info(<span class="string">&quot;serial=====: &quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider iMessageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iMessageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201111018848.png" alt="image-20210201111018848"></p>
<p><img src="https://csn.damyoung.cn/image-20210201112236864.png" alt="image-20210201112236864"></p>
<p><img src="https://csn.damyoung.cn/image-20210201112347845.png" alt="image-20210201112347845"></p>
<p><img src="https://csn.damyoung.cn/image-20210201112249929.png" alt="image-20210201112249929"></p>
<p><img src="https://csn.damyoung.cn/image-20210201112259845.png" alt="image-20210201112259845"></p>
<h3 id="消息驱动之消费者-2"><a href="#消息驱动之消费者-2" class="headerlink" title="消息驱动之消费者(2)"></a>消息驱动之消费者(2)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="number">42.192</span><span class="number">.130</span><span class="number">.130</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8802</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8802.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;消费者1号---&gt;接受到的消息: &quot;</span>+message.getPayload()+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;端口号port:  &quot;</span>+serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20210201113410698.png" alt="image-20210201113410698"></p>
<p><img src="https://csn.damyoung.cn/image-20210201113322885.png" alt="image-20210201113322885"></p>
<p><img src="https://csn.damyoung.cn/image-20210201113350085.png" alt="image-20210201113350085"></p>
<h3 id="消息重复消费问题"><a href="#消息重复消费问题" class="headerlink" title="消息重复消费问题"></a>消息重复消费问题</h3><p>clone一份运行8803</p>
<p><img src="https://csn.damyoung.cn/image-20210201114103407.png" alt="image-20210201114103407"></p>
<p><img src="https://csn.damyoung.cn/image-20210201114311618.png" alt="image-20210201114311618"></p>
<p><img src="https://csn.damyoung.cn/image-20210201114440853.png" alt="image-20210201114440853"></p>
<p><img src="https://csn.damyoung.cn/image-20210201114623617.png" alt="image-20210201114623617"></p>
<p><img src="https://csn.damyoung.cn/image-20210201114635363.png" alt="image-20210201114635363"></p>
<p><strong>发送消息，存在重复消费问题，8802/8803均存在消费信息</strong></p>
<p><img src="https://csn.damyoung.cn/image-20210201114539858.png" alt="image-20210201114539858"></p>
<blockquote>
<p>不同组是可以全面消费的(重复消费)，同一组内会发生竞争关系，只有其中一个可以消费</p>
</blockquote>
<h3 id="消费分组"><a href="#消费分组" class="headerlink" title="消费分组"></a>消费分组</h3><blockquote>
<p>默认分组group，组流水号不一样，被认为不同组，可以消费</p>
</blockquote>
<p>自定会配置分组，自定义配置分为同一个组，解决重复消费</p>
<p><img src="https://csn.damyoung.cn/image-20210201115038245.png" alt="image-20210201115038245"></p>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p><img src="https://csn.damyoung.cn/image-20210201115218784.png" alt="image-20210201115218784"></p>
<p><img src="https://csn.damyoung.cn/image-20210201115324955.png" alt="image-20210201115324955"></p>
<p><img src="https://csn.damyoung.cn/image-20210201115344213.png" alt="image-20210201115344213"></p>
<h4 id="同一组"><a href="#同一组" class="headerlink" title="同一组"></a>同一组</h4><p><img src="https://csn.damyoung.cn/image-20210201115637565.png" alt="image-20210201115637565"></p>
<p><img src="https://csn.damyoung.cn/image-20210201115712882.png" alt="image-20210201115712882"></p>
<p><img src="https://csn.damyoung.cn/image-20210201115731822.png" alt="image-20210201115731822"></p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p><img src="https://csn.damyoung.cn/image-20210201115810712.png" alt="image-20210201115810712"></p>
<p><img src="https://csn.damyoung.cn/image-20210201115911317.png" alt="image-20210201115911317"></p>
<p>8802去除分组group配置并停机，8801还是发送消息，8802重启后并无得到消息，消息丢失；8803(无去除分组配置)重启后，仍会消费信息</p>
<h1 id="分布式请求链路跟踪"><a href="#分布式请求链路跟踪" class="headerlink" title="分布式请求链路跟踪"></a>分布式请求链路跟踪</h1><p>springcloud sleuth提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin</p>
<p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求的失败</p>
<p><img src="https://csn.damyoung.cn/image-20210201163450436.png" alt="image-20210201163450436"></p>
<h2 id="搭建zipkin"><a href="#搭建zipkin" class="headerlink" title="搭建zipkin"></a>搭建zipkin</h2><p>springcloud从F版起已不需要自己搭建Zipkin Server了，只需调用jar包</p>
<p><a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p>
<p><img src="https://csn.damyoung.cn/image-20210201164350681.png" alt="image-20210201164350681"></p>
<p><img src="https://csn.damyoung.cn/image-20210201164523023.png" alt="image-20210201164523023"></p>
<p><img src="https://csn.damyoung.cn/image-20210201164543873.png" alt="image-20210201164543873"></p>
<p><img src="https://csn.damyoung.cn/image-20210201164741257.png" alt="image-20210201164741257"></p>
<p>trace：类似于树结构的span集合，表示一条调用链路，存在唯一标识</p>
<p>span：表示调用链路来源，通俗的理解span就是一次请求信息</p>
<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>cloud-provider-payment8001服务提供者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        包含了sleuth+zipkin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line"><span class="comment">#      采样率介于0到1之间，则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi, I am paymentZipkin server fallback&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cloud-consumer-order80 服务消费者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span>+<span class="string">&quot;/payment/zipkin&quot;</span>,String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<p><img src="https://csn.damyoung.cn/image-20210201170446021.png" alt="image-20210201170446021"></p>
<p><img src="https://csn.damyoung.cn/image-20210201170703653.png" alt="image-20210201170703653"></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>thymeleaf</title>
    <url>/2021/04/03/Thymeleaf/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Thymeleaf是用来开发Web和独立环境项目的服务器端的 Java 模板引擎</p>
<p>Spring官方支持的服务的渲染模板中包含<code>Thymeleaf</code>和<code>Freemaker</code>等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</p>
<a id="more"></a>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>支持html原型，在html标签增加额外的属性达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时<code>Thymeleaf</code> 标签会动态地替换掉静态内容，使页面动态显示</li>
<li>与SpringBoot完美整合，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。</li>
</ol>
<h1 id="整合SpringBoot"><a href="#整合SpringBoot" class="headerlink" title="整合SpringBoot"></a>整合SpringBoot</h1><ol>
<li>pom.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>yml</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span> <span class="comment">#关闭Thymeleaf的缓存</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hhhhh&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>html</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HELLO<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span>hsjk<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何<strong>解析</strong>model中的数据。</p>
<h2 id="添加model"><a href="#添加model" class="headerlink" title="添加model"></a>添加model</h2><ol>
<li>将模型数据添加到model</li>
<li>返回 .html 前缀</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;test2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setAge(<span class="number">21</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;Jackson&quot;</span>);</span><br><span class="line">    user.setFriend(<span class="keyword">new</span> User(<span class="string">&quot;李小龙&quot;</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h2><ol>
<li>解析<code> $&#123;user.name&#125;</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>Thymeleaf中所有的表达式都需要写在”指令”中，指令是HTML5中的自定义属性，在Thymeleaf中所有指令都是以<code>th:</code>开头。因为表达式<code>$&#123;user.name&#125;</code>是写在自定义属性中，因此在静态环境下，表达式的内容会被当做是普通字符串，浏览器会自动忽略这些指令，这样就不会报错了。</p>
<p>如果我们不经过SpringMVC，而是直接用浏览器打开编写的页面：在静态环境下,th指令不会被识别，但是也不会报错，而是显示<span>标签的缺省默认值：”请跟我来”</p>
<p>指令的设计，正是Thymeleaf的高明之处，也是它优于其它模板引擎的原因。动静结合的设计，使得无论是前端开发人员还是后端开发人员可以完美契合。</p>
<p><strong>注意</strong></p>
<ol>
<li><p>如果浏览器不支持Html5怎么办？</p>
<p>如果不支持这种<code>th:</code>的命名空间写法，那么可以把<code>th:text</code>换成 <code>data-th-text</code>，Thymeleaf也可以兼容。</p>
</li>
<li><p><code>th:text</code>指令出于安全考虑，会把表达式读取到的值进行处理，防止html的注入。</p>
<p>例如，<code>&lt;p&gt;你好&lt;/p&gt;</code>将会被格式化输出为<code>$lt;p$gt;你好$lt;/p$lt;</code>。如果想要不进行格式化输出，而是要输出原始内容，则使用<code>th:utext</code>来代替.</p>
</li>
</ol>
<h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>当数据量比较多的时候，频繁的写<code>user.</code>就会非常麻烦。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Age: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span>21<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>friend: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;friend.name&#125;&quot;</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先在 <code>h2</code>上 用 <code>th:object=&quot;$&#123;user&#125;&quot;</code>获取user的值，并且保存</li>
<li>然后，在<code>h2</code>内部的任意元素上，可以通过 <code>*&#123;属性名&#125;</code>的方式，来获取user中的属性，这样就省去了大量的<code>user.</code>前缀了</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>ognl表达式本身就支持方法调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>FirstName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name.split(&#x27; &#x27;)[0]&#125;&quot;</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>LastName: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name.split(&#x27; &#x27;)[1]&#125;&quot;</span>&gt;</span>Li<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里我们调用了name（是一个字符串）的split方法。</li>
</ul>
<h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用<code>#对象名</code>来引用。</p>
<ul>
<li>一些环境相关对象</li>
</ul>
<table>
<thead>
<tr>
<th>对象</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>#ctx</code></td>
<td>获取Thymeleaf自己的Context对象</td>
</tr>
<tr>
<td><code>#requset</code></td>
<td>如果是web程序，可以获取HttpServletRequest对象</td>
</tr>
<tr>
<td><code>#response</code></td>
<td>如果是web程序，可以获取HttpServletReponse对象</td>
</tr>
<tr>
<td><code>#session</code></td>
<td>如果是web程序，可以获取HttpSession对象</td>
</tr>
<tr>
<td><code>#servletContext</code></td>
<td>如果是web程序，可以获取HttpServletContext对象</td>
</tr>
</tbody></table>
<ul>
<li>Thymeleaf提供的全局对象：</li>
</ul>
<table>
<thead>
<tr>
<th>对象</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>#dates</code></td>
<td>处理java.util.date的工具对象</td>
</tr>
<tr>
<td><code>#calendars</code></td>
<td>处理java.util.calendar的工具对象</td>
</tr>
<tr>
<td><code>#numbers</code></td>
<td>用来对数字格式化的方法</td>
</tr>
<tr>
<td><code>#strings</code></td>
<td>用来处理字符串的方法</td>
</tr>
<tr>
<td><code>#bools</code></td>
<td>用来判断布尔值的方法</td>
</tr>
<tr>
<td><code>#arrays</code></td>
<td>用来护理数组的方法</td>
</tr>
<tr>
<td><code>#lists</code></td>
<td>用来处理List集合的方法</td>
</tr>
<tr>
<td><code>#sets</code></td>
<td>用来处理set集合的方法</td>
</tr>
<tr>
<td><code>#maps</code></td>
<td>用来处理map集合的方法</td>
</tr>
</tbody></table>
<p>ps：我们在环境变量中添加日期类型对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;test3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show3</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;today&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello3&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在页面中处理(根据today变量属性值，再根据dates对象进行格式化)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  今天是: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(today,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span>2018-04-25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h2><p>有的时候，我们需要在指令中填写基本类型如：字符串、数值、布尔等，并不希望被Thymeleaf解析为变量，这个时候称为字面值。</p>
<h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>使用一对<code>&#39;</code>引用的内容就是字符串字面值了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  你正在观看 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;thymeleaf&#x27;&quot;</span>&gt;</span>template<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 的字符串常量值.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>th:text</code>中的thymeleaf并不会被认为是变量，而是一个字符串</p>
<h3 id="数字字面值"><a href="#数字字面值" class="headerlink" title="数字字面值"></a>数字字面值</h3><p>数字不需要任何特殊语法， 写的什么就是什么，而且可以直接进行算术运算</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>今年是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;2018&quot;</span>&gt;</span>1900<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>两年后将会是 <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;2018 + 2&quot;</span>&gt;</span>1902<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔字面值"><a href="#布尔字面值" class="headerlink" title="布尔字面值"></a>布尔字面值</h3><p>布尔类型的字面值是true或false：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    你填的是true</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里引用了一个<code>th:if</code>指令，跟vue中的<code>v-if</code>类似</p>
<h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>我们经常会用到普通字符串与表达式拼接的情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;欢迎您:&#x27; + $&#123;user.name&#125; + &#x27;!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>字符串字面值需要用<code>&#39;&#39;</code>，拼接起来非常麻烦，Thymeleaf对此进行了简化，使用一对<code>|</code>即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;|欢迎您:$&#123;user.name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>需要注意：<code>$&#123;&#125;</code>内部的是通过OGNL表达式引擎解析的，外部的才是通过Thymeleaf的引擎解析，因此运算符尽量放在<code>$&#123;&#125;</code>外进行。</p>
<h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p>支持的算术运算符：<code>+ - * / %</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>         //21</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;%2 == 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  //false</span><br></pre></td></tr></table></figure>

<h3 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h3><p>支持的比较运算：<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code> ，但是<code>&gt;</code>, <code>&lt;</code>不能直接使用，因为xml会解析为标签，要使用别名。</p>
<p>注意 <code>==</code> and <code>!=</code>不仅可以比较数值，类似于equals的功能。</p>
<p>可以使用的<strong>别名</strong>：<code>gt (&gt;), lt (&lt;), ge (&gt;=), le (&lt;=), not (!). Also eq (==), neq/ne (!=).</code></p>
<h3 id="条件运算"><a href="#条件运算" class="headerlink" title="条件运算"></a>条件运算</h3><h4 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.sex&#125; ? &#x27;男&#x27;:&#x27;女&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 <code>表达式 ?: 默认值</code>简写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125; ?: &#x27;二狗&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>当前面的表达式值为null时，就会使用后面的默认值。</strong></p>
<p>注意：<code>?:</code>之间没有空格。</p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>循环也是非常频繁使用的需求，我们使用<code>th:each</code>指令来完成：</p>
<p>假如有用户的集合：users在Context中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>${users} 是要遍历的集合，可以是以下类型：<ul>
<li>Iterable，实现了Iterable接口的类</li>
<li>Enumeration，枚举</li>
<li>Interator，迭代器</li>
<li>Map，遍历得到的是Map.Entry</li>
<li>Array，数组及其它一切符合数组结果的对象</li>
</ul>
</li>
</ul>
<p>在迭代的同时，我们也可以获取迭代的状态对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user,stat : $&#123;users&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>&gt;</span>Onions<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.age&#125;&quot;</span>&gt;</span>2.41<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="start对象"><a href="#start对象" class="headerlink" title="start对象"></a>start对象</h3><p><strong>stat对象</strong>包含以下属性：</p>
<ul>
<li>index，从0开始的角标</li>
<li>count，元素的个数，从1开始</li>
<li>size，总元素个数</li>
<li>current，当前遍历到的元素</li>
<li>even/odd，返回是否为奇偶，boolean值</li>
<li>first/last，返回是否为第一或最后，boolean值</li>
</ul>
<h2 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h2><p>有了<code>if和else</code>，我们能实现一切功能，Thymeleaf中使用<code>th:if</code> 或者 <code>th:unless</code> ，两者的意思恰好相反。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;user.age&#125; &gt; 24&quot;</span>&gt;</span>老油条<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果表达式的值为<strong>true</strong>，则标签会渲染到页面，否则不进行渲染。</p>
<p>以下情况被认定为true：</p>
<ul>
<li>表达式值为true</li>
<li>表达式值为非0数值</li>
<li>表达式值为非0字符</li>
<li>表达式值为字符串，但不是<code>&quot;false&quot;</code>,<code>&quot;no&quot;</code>,<code>&quot;off&quot;</code></li>
<li>表达式不是布尔、字符串、数字、字符中的任何一种</li>
</ul>
<p>其它情况包括null都被认定为false</p>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><p>这里要使用两个指令：<code>th:switch</code> 和 <code>th:case</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span>&gt;</span>用户是管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;manager&#x27;&quot;</span>&gt;</span>用户是经理<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span>用户是别的玩意<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。</p>
<p>另外<code>th:case=&quot;*&quot;</code>表示默认，放最后。</p>
<p><img src="https://img2018.cnblogs.com/blog/1526344/201908/1526344-20190819082837178-1926390076.png" alt="img"></p>
<h2 id="JS模板"><a href="#JS模板" class="headerlink" title="JS模板"></a>JS模板</h2><p>模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> user = <span class="comment">/*[[$&#123;user&#125;]]*/</span> &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age = <span class="comment">/*[[$&#123;user.age&#125;]]*/</span> <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(user);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(age)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在script标签中通过<code>th:inline=&quot;javascript&quot;</code>来声明这是要特殊处理的js脚本</p>
</li>
<li><p>语法结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="comment">/*[[Thymeleaf表达式]]*/</span> <span class="string">&quot;静态环境下的默认值&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。且User对象会被直接处理为json格式。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2020/11/11/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="常见数据库"><a href="#常见数据库" class="headerlink" title="常见数据库"></a>常见数据库</h1><blockquote>
<p>一个数据库服务器包含多个库，一个数据库包含多个表，一个表包含多条记录，一条记录包含多个字段</p>
</blockquote>
<ul>
<li><p><strong>数据库</strong>：存储和管理数据的仓库，按照有关规则组织起来，可以被各种用户或应用共享的数据集合。数据库通常可以划分为关系型数据库和非关系型数据库</p>
<ul>
<li>关系型数据库：MySQL、Oracle</li>
<li>非关系型数据库:  redis、mecache</li>
</ul>
</li>
<li><p><strong>数据库管理系统DBMS</strong>：用户通过数据库管理系统DBMS访问数据库中的数据</p>
</li>
</ul>
<p>​    <strong>特点</strong>：持久化存储数据，本质上是一个文件系统，关系型数据库通过的SQL语句进行管理DBMS</p>
<a id="more"></a>

<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><blockquote>
<p>Structure Query Language，结构化查询语言，<strong>操作所有关系型数据</strong></p>
<p><strong>查询关键字顺序</strong>：select  from  where    group by   having  order by   limit</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//Mysql默认是美国的时区，所以要进行设置</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&quot;%time_zone%&quot;</span>;查看时区</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">time_zone</span> = <span class="string">&#x27;+8:00&#x27;</span>; 修改时区</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;立即生效</span><br></pre></td></tr></table></figure>

<h2 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h2><h3 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h3><blockquote>
<p>sql语句有四种类型</p>
</blockquote>
<ol>
<li><p>DDL (definition)：数据定义语言    <strong>create,drop,alter</strong></p>
</li>
<li><p>DML（manipulation)：数据操作语言 <strong>insert delete update</strong></p>
</li>
<li><p>DQL (query):   数据查询语言     <strong>select where</strong></p>
</li>
<li><p>DCL (control):   数据控制语言  定义数据库的访问权限和安全级别以及创建用户  <strong>grant revoke</strong></p>
</li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li><p>基本类型：int整型、double(4,1)浮点型   </p>
</li>
<li><p>时间类型：time、date ( 年月日) 、datetime（年月日时分秒、timestamp:时间戳类型  <code>yyyy-MM-dd HH:mm:ss </code> 记录某个业务日期</p>
</li>
<li><p>字符串型：varchar(可变长度字符串 name varchar(20) ==姓名最大20个字符)、char不可变字符串</p>
</li>
<li><p>二进制类型：blob( binary large object) 大二进制</p>
</li>
</ul>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><blockquote>
<p>不存在时创建数据库并指定字符集</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 数据库名 <span class="built_in">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ol>
<li>查看数据库：<strong>show</strong> database<strong>s</strong>;</li>
<li>查询数据库的创建信息：show create database db1;</li>
<li>当前正在操作的数据库 ：<strong>select</strong> database();</li>
<li>使用命令切换当前正在使用的数据库：<strong>use</strong> <code>数据库名</code>；</li>
</ol>
<h3 id="修改删除"><a href="#修改删除" class="headerlink" title="修改删除"></a>修改删除</h3><ol>
<li>修改数据库：<strong>alter</strong> database <code>数据库名</code>  character <strong>set</strong> GBK；</li>
<li>删除数据库：<strong>drop</strong> database if exists <code>数据库名</code>；</li>
</ol>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><h4 id="创建create"><a href="#创建create" class="headerlink" title="创建create"></a>创建create</h4><ol>
<li>创建一个表：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名（</span><br><span class="line">	列名 <span class="number">1</span> 数据类型<span class="number">1</span>，</span><br><span class="line">	列名<span class="number">2</span>  数据类型<span class="number">2</span>	,	//最后一列不加逗号</span><br><span class="line">	score <span class="keyword">DOUBLE</span>(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">	sname <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">）;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>创建一个相似的表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名<span class="number">2</span> <span class="keyword">like</span> 表名;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="查看show"><a href="#查看show" class="headerlink" title="查看show"></a>查看show</h4><ol>
<li><p>查看表结构：<strong>desc</strong> 表名</p>
</li>
<li><p>查看当前数据库的所有表： show tables;</p>
</li>
</ol>
<h4 id="修改alter"><a href="#修改alter" class="headerlink" title="修改alter"></a>修改alter</h4><ol>
<li><p>修改表名： <strong>alter</strong> table 表名 <strong><em>rename</em> <em>to</em></strong> 新表名</p>
</li>
<li><p>增加新的列：alter table 表名 <strong>add</strong>  remark varchar(30);</p>
</li>
<li><p>修改列：alter table 表名 <strong>change</strong> remark  intro varchar(20);</p>
</li>
<li><p>修改列：alter table 表名 <strong>modify</strong>  intro varchar(130);</p>
</li>
</ol>
<h4 id="删除drop"><a href="#删除drop" class="headerlink" title="删除drop"></a>删除drop</h4><ol>
<li><p>删除一列：<strong>alter</strong> table student4 <strong>drop</strong> intro</p>
</li>
<li><p>删除表：<strong>drop</strong> table if exists student4;</p>
</li>
</ol>
<h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><h4 id="插入insert"><a href="#插入insert" class="headerlink" title="插入insert"></a>插入insert</h4><h5 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h5><ol>
<li><p>列名和值一致</p>
</li>
<li><p>除了数字类型，其他类型需要使用引号引起来</p>
</li>
<li><p>默认值null</p>
</li>
</ol>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><ol>
<li>所有字段都赋值</li>
</ol>
<p>​        <strong>INSERT INTO</strong> student3(id,sname,age,score,birthday,mark) <strong>VALUES</strong>(1001,’张三’,20,90.5,’2000-11-10’,”英语”)</p>
<ol start="2">
<li>部分字段赋值</li>
</ol>
<p>​        INSERT INTO student3(id,sname,age) <strong>VALUES</strong> (1000,’李四’,12);</p>
<ol start="3">
<li>省略字段名</li>
</ol>
<p>​        INSERT INTO student3 <strong>VALUES</strong>(1001,’张三’,NULL,90.5,’2000-11-10’,”英语”)</p>
<ol start="4">
<li>一次添加多条记录</li>
</ol>
<p>INSERT INTO student3 **VALUES(**1001,’张三’,20,90.5,’2000-11-10’,”英语”),(1001,’张三’,20,90.5,’2000-11-10’,”英语”)</p>
<h4 id="删除delete"><a href="#删除delete" class="headerlink" title="删除delete"></a>删除delete</h4><ol>
<li><p><strong>delete from</strong>  xx <strong>where</strong> score&gt;=90;   不加条件，则删除表中所有记录    </p>
</li>
<li><p><strong>truncate</strong> table student; 一次删除       </p>
</li>
<li><p><strong>delete from xx</strong>; 一次记录删除一次</p>
</li>
</ol>
<h4 id="更新update"><a href="#更新update" class="headerlink" title="更新update"></a>更新update</h4><ol>
<li><strong>UPDATE</strong> student3 <strong>SET</strong> score=90,age=22,birthday=’1998-05-12’ <strong>WHERE</strong> id=1002;</li>
</ol>
<h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><blockquote>
<p>select查询：不会对数据库中的数据进行修改，从数据库发送结果给客户端，是虚拟的表</p>
</blockquote>
<ol>
<li><p>查询指定列：select name,age from student;</p>
</li>
<li><p>消除重复(<strong>distinct</strong>)：select <strong>distinct</strong> job from emp;</p>
</li>
<li><p>计算列(+)，别名(<strong>as</strong>) ：SELECT ename <strong>AS</strong> 姓名,sal AS 薪资,comm AS 奖金,<strong>comm+sal</strong> <strong>AS</strong> 月收入 from emp;</p>
</li>
<li><p>判断空值{  ifnull(comm,0)将null视为0  } ：select comm,<strong>IFNULL(comm,0)</strong> from emp;</p>
</li>
</ol>
<blockquote>
<p>where：可以对行进行筛选： select id,sname,age from student <strong>where</strong> age&gt;=20;</p>
</blockquote>
<ol>
<li><p>条件查询( <strong>&gt;=、&lt;&gt;/ !=</strong> )</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">from</span> student <span class="keyword">where</span> age&gt;=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">from</span> student <span class="keyword">where</span> age&lt;&gt;<span class="number">20</span>;	<span class="comment">-- 不等于20</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">from</span> student <span class="keyword">where</span> age!=<span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>不等于(<strong>not</strong>)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">not</span> age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关联( <strong>and</strong> / <strong>between</strong> <strong>and</strong> )</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- and </span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age&gt;<span class="number">20</span> <span class="keyword">AND</span> age&lt;<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- &amp;&amp;</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age&gt;=<span class="number">20</span> &amp;&amp; age&lt;<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- between and </span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age **<span class="keyword">BETWEEN</span>** <span class="number">20</span> **<span class="keyword">AND</span>** <span class="number">30</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>或者( <strong>or</strong>)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age=<span class="number">20</span> <span class="keyword">OR</span> age=<span class="number">18</span> <span class="keyword">OR</span> age =<span class="number">45</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>范围( <strong>in</strong>)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IN</span>(<span class="number">20</span>,<span class="number">18</span>,<span class="number">45</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>is</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- is</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- is not</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="keyword">not</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><blockquote>
<ul>
<li><p>下划线  <strong>_</strong>：代表一个字符</p>
</li>
<li><p>百发号**%**：代表至少一个字符</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询第二个字为德的同学    </span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;_德%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><blockquote>
<p><strong>count(列名)、max(最大值) 、min(最小值) 、sum(和)、avg(平均数)</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询员工人数 count(*)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(empno) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询工资总额    </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 平均工资  </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最大工资  </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(sal) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 总月收入</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(sal+<span class="keyword">IFNULL</span>(comm,<span class="number">0</span>)) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(sal)+<span class="keyword">SUM</span>(comm)<span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>

<h3 id="分组group-by"><a href="#分组group-by" class="headerlink" title="分组group by"></a>分组group by</h3><blockquote>
<p><strong>group by之后查询的字段，分组字段、聚合函数</strong></p>
</blockquote>
<h4 id="单组"><a href="#单组" class="headerlink" title="单组"></a>单组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询男女各自的人数       </span></span><br><span class="line"><span class="keyword">SELECT</span> gender <span class="keyword">AS</span> 性别,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> 人数 <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，分别查询男、女同学的数学平均分，人数，要求:分数低于70，不参与分组</span></span><br><span class="line"><span class="keyword">SELECT</span> gender,<span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math&gt;=<span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br></pre></td></tr></table></figure>

<h4 id="having-和-where"><a href="#having-和-where" class="headerlink" title="having 和 where"></a>having 和 where</h4><p>a、where 在分组前进行限定，having在分组后进行限定</p>
<p>b、where 后不可以跟聚合函数，having可以进行聚合函数的判断</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组，分别查询男、女同学的数学平均分，人数，要求:分数低于70，不参与分组</span></span><br><span class="line"><span class="keyword">SELECT</span> gender,<span class="keyword">AVG</span>(math),<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math&gt;=<span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询各个部门的人数，只显示人数大于8个的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个部门的部门编号以及每个部门工资大于1500的人数</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal&gt;<span class="number">1500</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br></pre></td></tr></table></figure>

<h4 id="多组分组"><a href="#多组分组" class="headerlink" title="多组分组"></a>多组分组</h4><blockquote>
<p>使用逗号进行分隔</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询某个专业的某门课程的总分,平均</span></span><br><span class="line"><span class="keyword">SELECT</span> speciality,coursename,<span class="keyword">SUM</span>(score),<span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> scores,course,studentinfo <span class="keyword">WHERE</span> </span><br><span class="line">scores.courseno=course.courseno <span class="keyword">AND</span> scores.studentno=studentinfo.studentno </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> speciality,coursename;</span><br></pre></td></tr></table></figure>

<h3 id="排序order-by"><a href="#排序order-by" class="headerlink" title="排序order by"></a>排序order by</h3><blockquote>
<p>descend降序   ascend升序</p>
</blockquote>
<h4 id="单组-1"><a href="#单组-1" class="headerlink" title="单组"></a>单组</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按年龄升序排序,默认升序       </span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;</span><br><span class="line"><span class="comment">-- 按年龄降序排序                       </span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h4 id="多组排序"><a href="#多组排序" class="headerlink" title="多组排序"></a>多组排序</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 年龄降序，相同年龄按数学成绩降序</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">DESC</span>,math <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分页limit"><a href="#分页limit" class="headerlink" title="分页limit"></a>分页limit</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">3</span>;	<span class="comment">-- 第一页 (pageno-1)*pagesize</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">3</span>,<span class="number">3</span>;	<span class="comment">-- 第二页</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">6</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">9</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">LIMIT</span> <span class="number">12</span>,<span class="number">3</span>;（8）顺序</span><br></pre></td></tr></table></figure>

<h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><ol>
<li><p>备份格式：dos: mysqldump -u用户名 -p密码 数据库&gt;文件的路径</p>
</li>
<li><p>还原格式：mysql中的命令，需要登录后操作</p>
</li>
</ol>
<p>​                    <strong>use 数据库； source 导入文件的路径</strong></p>
<h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p><strong>查看用户名</strong>    select *from user; <strong>选择mysql数据库</strong></p>
<h3 id="创建用户create"><a href="#创建用户create" class="headerlink" title="创建用户create"></a>创建用户create</h3><p><strong>主机名</strong>： <strong>localhost</strong>本地登录，**%**可异地登陆</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> ‘用户名’ @‘主机名’ <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="设置权限grant"><a href="#设置权限grant" class="headerlink" title="设置权限grant"></a>设置权限grant</h3><p><strong>grant</strong> 权限1，权限2 <strong>on</strong> 数据库名.表名 <strong>to</strong> ‘用户名‘@’主机名’;</p>
<p>权限：create/alter/select/insert/update /<strong>all</strong></p>
<h3 id="回收权限revoke"><a href="#回收权限revoke" class="headerlink" title="回收权限revoke"></a>回收权限revoke</h3><p><strong>revoke</strong> 权限1，权限2 <strong>on</strong> 数据库名.表名 <strong>from</strong> ‘用户名‘@’主机名’;</p>
<h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">grants</span> <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 管理员</span></span><br><span class="line">mysqladmin -uroot -p password 新密码</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 普通用户： </span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> <span class="keyword">for</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>= <span class="keyword">password</span>(<span class="string">&#x27;新密码&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="解决mysql本地ip地址不能访问"><a href="#解决mysql本地ip地址不能访问" class="headerlink" title="解决mysql本地ip地址不能访问"></a>解决mysql本地ip地址不能访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 修改ip访问权限</span><br><span class="line">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 授予所有权限</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</span><br><span class="line">flush identified;</span><br></pre></td></tr></table></figure>

<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><blockquote>
<p>对表中数据进行限制，保证数据的正确性、有效性和完整性</p>
</blockquote>
<h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p>特点：<strong>非空not null、唯一unique</strong></p>
<blockquote>
<ul>
<li><p>主键只能设置一个，可以是单列或者多列</p>
</li>
<li><p>主键不能重复</p>
</li>
<li><p>primary key 用来唯一标识数据库中的每一条记录</p>
</li>
</ul>
</blockquote>
<ol>
<li>创建表时<strong>添加</strong>主键且<strong>主键自增</strong></li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	字段名  字段类型 primary <span class="keyword">key</span>  auto_increment</span><br><span class="line">)auto_increment=初始值（默认为<span class="number">1</span>）；</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>已有表中添加主键</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">id</span> );</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除主键</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> str5 <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 修改表，添加自增长</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改起始值   </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment=<span class="number">2000</span>; </span><br></pre></td></tr></table></figure>

<ol start="5">
<li>联合主键</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> scores(</span><br><span class="line">	studentno <span class="built_in">varchar</span>(<span class="number">22</span>),</span><br><span class="line">	courseno <span class="built_in">int</span>,</span><br><span class="line">	score <span class="built_in">int</span>,</span><br><span class="line">	primary <span class="keyword">key</span>(studentno，id.)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><blockquote>
<p>unique 表中某一列出现重复的值</p>
</blockquote>
<ol>
<li>创建表时添加唯一约束</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	age <span class="built_in">int</span>  <span class="keyword">unique</span>,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>已有表添加唯一约束</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st4 **<span class="keyword">modify</span>** <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>;</span><br></pre></td></tr></table></figure>

<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><ol>
<li>创建表时添加唯一约束</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">	age <span class="built_in">int</span>  <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">	<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>已有表添加唯一约束</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st4 <span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><blockquote>
<p>字符段 字符类型  <strong>default</strong>   默认值</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;欧&#x27;</span>,<span class="keyword">default</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 （age,<span class="keyword">name</span>）<span class="keyword">values</span>(<span class="number">18</span>,<span class="string">&#x27;是&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> st4 <span class="keyword">modify</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="string">&#x27;看看&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><blockquote>
<p>让表于表产生关系，从而保证数据的正确性</p>
<p><strong>主表和从表设置主键约束，从表创建约束</strong></p>
</blockquote>
<h3 id="新增外键"><a href="#新增外键" class="headerlink" title="新增外键"></a>新增外键</h3><ol>
<li>新建表时增加外键</li>
</ol>
<blockquote>
<p>constraint 外键约束名称  foreign key(外键字段名) references 主表名(主键约束名)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp2(</span><br><span class="line">	empno <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">	ename <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">	deptno <span class="built_in">INT</span>,</span><br><span class="line">	<span class="keyword">CONSTRAINT</span> fk_emp2_deptno <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(deptno) <span class="keyword">REFERENCES</span> dept2(deptno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>已有表增加外键</li>
</ol>
<blockquote>
<p>alter table 从表 add constraint 外键约束名称 foreign key(外键字段名) references 主表名(主表外键约束字段名)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp2 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_emp2_deptno <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(deptno) <span class="keyword">REFERENCES</span> dept2(deptno);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除外键</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表 <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> 外键约束名；</span><br></pre></td></tr></table></figure>

<h3 id="外键级联"><a href="#外键级联" class="headerlink" title="外键级联"></a>外键级联</h3><p><strong>on update cascade, on delete cascade</strong></p>
<blockquote>
<p>修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CONSTRAINT fk_emp22_dept22 FOREIGN KEY(deptno)REFERENCES dept22(deptno) ON <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span>  <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure>

<h3 id="外键操作"><a href="#外键操作" class="headerlink" title="外键操作"></a>外键操作</h3><blockquote>
<p>都是用来限制父表操作的外键操作</p>
</blockquote>
<blockquote>
<p>restrict/no action : 在子表有关联记录的情况下，父表不能更新。</p>
<p>cascade：父表在更新或删除时，更新或删除子表对应的记录</p>
<p>set null ：父表在更新或删除时，子表的对应被set null</p>
</blockquote>
<h1 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h1><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><blockquote>
<p><strong>union all</strong> (加法)，列数、列类型必须相同</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2;</span><br></pre></td></tr></table></figure>

<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><blockquote>
<p>笛卡尔积：select *from <strong>emp,dept</strong></p>
</blockquote>
<h3 id="相等查询"><a href="#相等查询" class="headerlink" title="相等查询"></a>相等查询</h3><blockquote>
<p><strong>有外键连接</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno=dept.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询各个部门的人数，求显示部门名称，人数，只显示三个人以上的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno=dept.deptno <span class="keyword">GROUP</span> <span class="keyword">BY</span> dname <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h3 id="三表关联"><a href="#三表关联" class="headerlink" title="三表关联"></a>三表关联</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- and </span></span><br><span class="line"><span class="keyword">select</span> scores.studentno,studentname,scores.courseno,coursename,score <span class="keyword">from</span> scores,studnetinfo,course <span class="keyword">where</span> scores.studentno=studentinfo.studentno <span class="keyword">and</span> scores.courseno=course.courseno</span><br><span class="line"></span><br><span class="line"><span class="comment">-- inner join  on </span></span><br><span class="line"><span class="keyword">select</span> scores.studentno,studentname,scores.courseno,coursename,score <span class="keyword">from</span> scores innere <span class="keyword">join</span> studentinfro <span class="keyword">on</span> scores.studentno=studentifno.studentno <span class="keyword">inner</span> <span class="keyword">join</span> course <span class="keyword">on</span> scores.courseno = course.courseno;</span><br></pre></td></tr></table></figure>

<h2 id="不等查询"><a href="#不等查询" class="headerlink" title="不等查询"></a>不等查询</h2><blockquote>
<p><strong>无外键连接</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询各个员工的编号，姓名，职位，工资，工资等级</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,sal,grade <span class="keyword">FROM</span> emp,salarygrade <span class="keyword">WHERE</span> sal&gt;=losalary <span class="keyword">AND</span> sal&lt;hisalary;</span><br></pre></td></tr></table></figure>

<h2 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h2><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p><strong>inner join  on</strong>  </p>
<blockquote>
<p>组合两个表中的记录，返回关联字段相符的记录，也就是<strong>返回两个表的交集（阴影）部分</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,ename,job,e.deptno,dname <span class="keyword">FROM</span> emp e <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept d <span class="keyword">ON</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>

<h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><p><strong>left outer join</strong></p>
<blockquote>
<p><strong>左表不符合条件的也显示出来</strong>–null</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,ename,job,e.deptno,dname <span class="keyword">FROM</span> emp e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">ON</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>

<h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><p><strong>right outer join</strong></p>
<blockquote>
<p>右表不符合条件的也显示出来</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,ename,job,e.deptno,dname <span class="keyword">FROM</span> emp e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">ON</span> e.deptno=d.deptno;</span><br></pre></td></tr></table></figure>

<h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 求7369员工编号、姓名、经理编号和经理姓名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e1.empno,e1.ename,e1.mgr,e2.ename <span class="keyword">FROM</span> emp e1,emp e2 <span class="keyword">WHERE</span> e1.mgr=e2.empno <span class="keyword">AND</span> e1.empno=<span class="number">7369</span>;</span><br></pre></td></tr></table></figure>

<h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><blockquote>
<p><strong>两个关系表中进行连接的必须是相同的属性列（名字相同），无须添加连接条件，并且在结果中消除重复的属性列。</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> emp <span class="keyword">natural</span> <span class="keyword">join</span> dept; </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>denptno(连接)</th>
<th>deptname</th>
<th>deptssss</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>sss</td>
<td>44</td>
</tr>
<tr>
<td>2</td>
<td>sss11</td>
<td>4442</td>
</tr>
<tr>
<td>3</td>
<td>fs</td>
<td>2424</td>
</tr>
</tbody></table>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ol>
<li>子查询结果为单行单列</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname=<span class="string">&#x27;SALES&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span>*<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一步完成</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno=(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname=<span class="string">&#x27;SALES&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用俩表连接</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.*<span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.deptno=dept.deptno <span class="keyword">WHERE</span> dname=<span class="string">&#x27;SALES&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>子查询结果为单列多行</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询工资大于3000的员工，来自哪些部门的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal&gt;<span class="number">2000</span>;<span class="comment">---&gt;10,20,30</span></span><br><span class="line"><span class="keyword">SELECT</span> dname <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> dname <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span>(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal&gt;<span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>子查询结果为多行多列</li>
</ol>
<blockquote>
<p><strong>找出虚拟表，并当成俩表连接查询</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询字段 <span class="keyword">from</span>(子查询) 表别名 <span class="keyword">where</span> 条件<span class="number">.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询出2011年以后入职的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate&gt;=<span class="string">&#x27;1982-1-1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> e.*,d.dname <span class="keyword">FROM</span> dept d,(<span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate&gt;=<span class="string">&#x27;1982-1-1&#x27;</span>) e <span class="keyword">WHERE</span> d.deptno=e.deptno;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有俩个直接下属的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> mgr,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> mgr;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 有俩个下属以上</span></span><br><span class="line"><span class="keyword">SELECT</span> mgr <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> mgr <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询以上俩个编号的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> *<span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="keyword">IN</span>(<span class="keyword">SELECT</span> mgr <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> mgr <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote>
<p>事务是一组SQL语句组成的逻辑处理单元，事务执行是一个整体，<strong>所有SQL语句都必须执行成功</strong></p>
</blockquote>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p><strong>select @@autocommit;  自动提交 1，</strong></p>
<p><strong>set @@autocommit =0;</strong></p>
<h3 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h3><p>每一条<strong>insert、update、delete</strong>都会默认构成一条事务，会自动提交，永久改变数据库</p>
<h3 id="手动提交"><a href="#手动提交" class="headerlink" title="手动提交"></a>手动提交</h3><p>开启事务 start transaction</p>
<p>提交事务 commit</p>
<p>回滚事务 rollback：回退到开启事务时的状态</p>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p><strong>执行成功</strong>：开启事务–&gt;执行多条SQL语句–&gt;成功提交事务</p>
<p><strong>执行失败：</strong>开启事务–&gt;执行多条SQL语句–&gt;事务回滚，<strong>回滚事务即是结束</strong></p>
<p><strong>回滚：</strong>设置回滚点：<strong>savepoint 名字</strong></p>
<p>​            回到回滚点：<strong>rollback to 名字；</strong></p>
<h2 id="事务原理"><a href="#事务原理" class="headerlink" title="事务原理"></a>事务原理</h2><p>事务开启后，所有的操作会保存到事务日志中，事务日志只有得到commit命令才会同步到数据库中，</p>
<p>其他任何情况都会清空事务日志（rollback，断开连接）</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><table>
<thead>
<tr>
<th>ACID属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>原子性（Atomicity）</td>
<td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td>
</tr>
<tr>
<td>一致性（Consistent）</td>
<td>在事务开始和完成时，数据都必须保持一致状态。</td>
</tr>
<tr>
<td>隔离性（Isolation）</td>
<td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td>
</tr>
<tr>
<td>持久性（Durable）</td>
<td>事务完成之后，对于数据的修改是永久的。</td>
</tr>
</tbody></table>
<h3 id="并发事务问题"><a href="#并发事务问题" class="headerlink" title="并发事务问题"></a>并发事务问题</h3><table>
<thead>
<tr>
<th>问题</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>丢失更新（Lost Update）</td>
<td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td>
</tr>
<tr>
<td>脏读（Dirty Reads）</td>
<td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td>
</tr>
<tr>
<td>不可重复读（Non-Repeatable Reads）</td>
<td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。数据内容不一致，update引起的</td>
</tr>
<tr>
<td>幻读（Phantom Reads）</td>
<td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。数据的数量不一致，是insert/delete引起的</td>
</tr>
</tbody></table>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><blockquote>
<p><strong>隔离级别越高，性能越差，安全性越高，效率越低</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>丢失更新</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read committed(Oracke和SQL Server)</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable read（MySql默认）</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable串行化</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p><strong>设置隔离级别</strong> ：<strong>set global transaction isolation level —;</strong></p>
<p><strong>查看隔离级别</strong>：<strong>select @@tx_isolation;</strong> </p>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;^T&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;2$&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;[uvw]&#x27;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>在字符串开始处进行匹配</td>
</tr>
<tr>
<td>$</td>
<td>在字符串末尾处进行匹配</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符, 包括换行符</td>
</tr>
<tr>
<td>[…]</td>
<td>匹配出括号内的任意字符</td>
</tr>
<tr>
<td>[^…]</td>
<td>匹配不出括号内的任意字符</td>
</tr>
<tr>
<td>a*</td>
<td>匹配零个或者多个a(包括空串)</td>
</tr>
<tr>
<td>a+</td>
<td>匹配一个或者多个a(不包括空串)</td>
</tr>
<tr>
<td>a?</td>
<td>匹配零个或者一个a</td>
</tr>
<tr>
<td>a1|a2</td>
<td>匹配a1或a2</td>
</tr>
<tr>
<td>a(m)</td>
<td>匹配m个a</td>
</tr>
<tr>
<td>a(m,)</td>
<td>至少匹配m个a</td>
</tr>
<tr>
<td>a(m,n)</td>
<td>匹配m个a 到 n个a</td>
</tr>
<tr>
<td>a(,n)</td>
<td>匹配0到n个a</td>
</tr>
<tr>
<td>(…)</td>
<td>将模式元素组成单一元素</td>
</tr>
</tbody></table>
<h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="数字函数"><a href="#数字函数" class="headerlink" title="数字函数"></a>数字函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>abs</td>
<td>求绝对值</td>
</tr>
<tr>
<td>sqrt</td>
<td>求二次方根</td>
</tr>
<tr>
<td>mod</td>
<td>求余数</td>
</tr>
<tr>
<td>ceil 和 CEILING</td>
<td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
</tr>
<tr>
<td>floor</td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td>RAND</td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td>ROUND</td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td>SIGN</td>
<td>返回参数的符号</td>
</tr>
<tr>
<td>POW 和 POWER</td>
<td>两个函数的功能相同，都是所传参数的次方的结果值</td>
</tr>
<tr>
<td>sin</td>
<td>求正弦值</td>
</tr>
<tr>
<td>asin</td>
<td>求反正弦值，与函数 SIN 互为反函数</td>
</tr>
<tr>
<td>COS</td>
<td>求余弦值</td>
</tr>
<tr>
<td>ACOS</td>
<td>求反余弦值，与函数 COS 互为反函数</td>
</tr>
<tr>
<td>TAN</td>
<td>求正切值</td>
</tr>
<tr>
<td>ATAN</td>
<td>求反正切值，与函数 TAN 互为反函数</td>
</tr>
<tr>
<td>COT</td>
<td>求余切值</td>
</tr>
</tbody></table>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>LENGTH</td>
<td>计算字符串长度函数，返回字符串的字节长度</td>
</tr>
<tr>
<td>CONCAT</td>
<td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td>
</tr>
<tr>
<td>INSERT</td>
<td>替换字符串函数</td>
</tr>
<tr>
<td>LOWER</td>
<td>将字符串中的字母转换为小写</td>
</tr>
<tr>
<td>UPPER</td>
<td>将字符串中的字母转换为大写</td>
</tr>
<tr>
<td>LEFT</td>
<td>从左侧字截取符串，返回字符串左边的若干个字符  left(‘javass’,4)</td>
</tr>
<tr>
<td>RIGHT</td>
<td>从右侧字截取符串，返回字符串右边的若干个字符</td>
</tr>
<tr>
<td>TRIM</td>
<td>删除字符串左右两侧的空格</td>
</tr>
<tr>
<td>REPLACE</td>
<td>字符串替换函数，返回替换后的新字符串</td>
</tr>
<tr>
<td>SUBSTRING</td>
<td>索引从1 开始，截取字符串，返回从指定位置开始的指定长度的字符换  substring(‘javahello’,1,4)</td>
</tr>
<tr>
<td>REVERSE</td>
<td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- concat(a,b,c)  合并</span></span><br><span class="line"><span class="keyword">select</span> empno,ename,<span class="keyword">concat</span>(empno,ename) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- length()</span></span><br><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">length</span>(ename)=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- strcmp(),相同返回0，大于返回1，小于返回</span></span><br></pre></td></tr></table></figure>

<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE 和 CURRENT_DATE</td>
<td>两个函数作用相同，返回当前系统的日期值</td>
</tr>
<tr>
<td>CURTIME 和 CURRENT_TIME</td>
<td>两个函数作用相同，返回当前系统的时间值</td>
</tr>
<tr>
<td>NOW 和  SYSDATE</td>
<td>两个函数作用相同，返回当前系统的日期和时间值</td>
</tr>
<tr>
<td>MONTH</td>
<td>获取指定日期中的月份</td>
</tr>
<tr>
<td>MONTHNAME</td>
<td>获取指定日期中的月份英文名称</td>
</tr>
<tr>
<td>DAYNAME</td>
<td>获取指定曰期对应的星期几的英文名称</td>
</tr>
<tr>
<td>DAYOFWEEK</td>
<td>获取指定日期对应的一周的索引位置值</td>
</tr>
<tr>
<td>WEEK</td>
<td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td>
</tr>
<tr>
<td>DAYOFYEAR</td>
<td>获取指定曰期是一年中的第几天，返回值范围是1~366</td>
</tr>
<tr>
<td>DAYOFMONTH</td>
<td>获取指定日期是一个月中是第几天，返回值范围是1~31</td>
</tr>
<tr>
<td>YEAR</td>
<td>获取年份，返回值范围是 1970〜2069</td>
</tr>
<tr>
<td>TIME_TO_SEC</td>
<td>将时间参数转换为秒数</td>
</tr>
<tr>
<td>SEC_TO_TIME</td>
<td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td>
</tr>
<tr>
<td>DATE_ADD 和 ADDDATE</td>
<td>两个函数功能相同，都是向日期添加指定的时间间隔</td>
</tr>
<tr>
<td>DATE_SUB 和 SUBDATE</td>
<td>两个函数功能相同，都是向日期减去指定的时间间隔</td>
</tr>
<tr>
<td>ADDTIME</td>
<td>时间加法运算，在原始时间上添加指定的时间</td>
</tr>
<tr>
<td>SUBTIME</td>
<td>时间减法运算，在原始时间上减去指定的时间</td>
</tr>
<tr>
<td>DATEDIFF</td>
<td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td>
</tr>
<tr>
<td>DATE_FORMAT</td>
<td>格式化指定的日期，根据参数返回指定格式的值</td>
</tr>
<tr>
<td>WEEKDAY</td>
<td>获取指定日期在一周内的对应的工作日索引</td>
</tr>
</tbody></table>
<p>current_date() 、current_time() 、<strong>now</strong>()</p>
<p><strong>year</strong>(now())、<strong>day</strong>(now())、<strong>hour</strong>(now())</p>
<p>day of week(now())、day of week(‘2020-8-22’)</p>
<p><strong>减法:</strong> <strong>datediff</strong> (‘2012-2-20’,’2012-2-22’)</p>
<p><strong>加法:</strong>  <strong>date_add</strong> (‘2020-2-20’, interval 1 date)</p>
<h3 id="聚合函数-1"><a href="#聚合函数-1" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>
<thead>
<tr>
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>MAX</td>
<td>查询指定列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>查询指定列的最小值</td>
</tr>
<tr>
<td>COUNT</td>
<td>统计查询结果的行数</td>
</tr>
<tr>
<td>SUM</td>
<td>求和，返回指定列的总和</td>
</tr>
<tr>
<td>AVG</td>
<td>求平均值，返回指定列数据的平均值</td>
</tr>
</tbody></table>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><blockquote>
<p>视图是一条select语句执行返回的结果，是一种虚拟存在的表。</p>
</blockquote>
<blockquote>
<ul>
<li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是<strong>过滤好的复合条件的结果集。</strong></li>
<li>安全：<strong>使用视图的用户只能访问他们被允许查询的结果集</strong>，数据库对表的<strong>权限管理</strong>并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li>
<li>数据独立：一旦视图的结构确定了，可以<strong>屏蔽表结构变化对用户的影响</strong>，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li>
</ul>
</blockquote>
<h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><blockquote>
<p>create 视图名 as (select语句)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_general </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,job,mgr,deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> v_general</span><br></pre></td></tr></table></figure>

<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><blockquote>
<p><strong>更新视图的同时也会更新原有表！！！</strong></p>
<p>update 视图名 set 字段名=‘’  where ..</p>
</blockquote>
<h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> (<span class="keyword">select</span>语句);</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名 </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> 视图名</span><br></pre></td></tr></table></figure>

<h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><blockquote>
<p>show tables;</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018203633852.png" alt="image-20201018203633852" style="zoom:80%;" />



<h1 id="存储过程与函数"><a href="#存储过程与函数" class="headerlink" title="存储过程与函数"></a>存储过程与函数</h1><p>存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>调用存储过程和函数可以<strong>减少数据在数据库和应用服务器之间的传输</strong>，对于提高数据处理的效率是有好处的。</p>
<p>存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p>
<blockquote>
<ul>
<li><p>函数 ： 是一个有返回值的过程 ；</p>
</li>
<li><p>过程 ： 是一个没有返回值的函数 ；</p>
</li>
</ul>
</blockquote>
<h2 id="存储过程procedure"><a href="#存储过程procedure" class="headerlink" title="存储过程procedure"></a>存储过程procedure</h2><h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明SQL语句的分隔符</span></span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test1()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">select</span> <span class="string">&#x27;Hello Mysql&#x27;</span> ;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程函数</span></span><br><span class="line">mysql&gt; create procedure pro_test1() </span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select &#x27;hello&#x27;;</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; #</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示存储过程的状态信息</span></span><br><span class="line">mysql&gt; show procedure status\G#</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  Db: demo_01</span><br><span class="line">                Name: pro_test1</span><br><span class="line">                Type: PROCEDURE</span><br><span class="line">             Definer: root@localhost</span><br><span class="line">            Modified: 2020-10-18 05:54:27</span><br><span class="line">             Created: 2020-10-18 05:54:27</span><br><span class="line">       Security_type: DEFINER</span><br><span class="line">             <span class="keyword">Comment</span>: </span><br><span class="line">character_set_client: utf8</span><br><span class="line">collation_connection: utf8_general_ci</span><br><span class="line">  <span class="keyword">Database</span> <span class="keyword">Collation</span>: utf8mb4_general_ci</span><br><span class="line"><span class="number">1</span> <span class="keyword">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义分隔符</span></span><br><span class="line">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>

<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">call</span> procedure_name() </span><br></pre></td></tr></table></figure>

<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询db_name数据库中的所有的存储过程</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db=<span class="string">&#x27;db_name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询存储过程的状态信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> <span class="keyword">status</span>\G;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询某个存储过程的定义</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">procedure</span> test.pro_test1 \G;</span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote>
<p>drop procedure 函数名(无括号);</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> pro_test1();</span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote>
<p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p>
<p>表修改，调用时查询时也会改变。</p>
</blockquote>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><blockquote>
<p>通过 declare可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test1()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int default 10;</span><br><span class="line">    -&gt; select num=num+10;</span><br><span class="line">    -&gt; end@</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test1()@</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量赋值</p>
<p>直接赋值使用 <strong>set</strong>，可以赋常量或者赋表达式</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test1()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int default 10;</span><br><span class="line">    -&gt; set num= num +101;</span><br><span class="line">    -&gt; select num;</span><br><span class="line">    -&gt; end@</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>select…into…</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test2()</span><br><span class="line">    -&gt; begin </span><br><span class="line">    -&gt; declare num int;</span><br><span class="line">    -&gt; select count(*) into num from city;</span><br><span class="line">    -&gt; select concat(&#x27;city表中的记录数是:&#x27;,num);</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; @</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test2()@</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br><span class="line">| concat(&#x27;city表中的记录数是:&#x27;,num)        |</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br><span class="line">| city表中的记录数是:4                     |</span><br><span class="line">+<span class="comment">------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><blockquote>
<p><strong>if</strong>..then..elseif..then..else.<strong>.end if;</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test4()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare height int default 175;</span><br><span class="line">    -&gt; declare description varchar(59) default &#x27;&#x27;;</span><br><span class="line">    -&gt; if height&gt;= 180 then</span><br><span class="line">    -&gt; set description =&#x27;身材高挑&#x27;;</span><br><span class="line">    -&gt; elseif height&gt;=170 and height&lt;180 then</span><br><span class="line">    -&gt; set description =&#x27;标准身材&#x27;;</span><br><span class="line">    -&gt; else </span><br><span class="line">    -&gt; set description=&#x27;一般身材&#x27;;</span><br><span class="line">    -&gt; end if;</span><br><span class="line">    -&gt; select concat(&#x27;身高&#x27;,height,&#x27;对应的身材类型为&#x27;,description);</span><br><span class="line">    -&gt; end@</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test4()@</span><br><span class="line">+<span class="comment">----------------------------------------------------------------+</span></span><br><span class="line">| concat(&#x27;身高&#x27;,height,&#x27;对应的身材类型为&#x27;,description)           |</span><br><span class="line">+<span class="comment">----------------------------------------------------------------+</span></span><br><span class="line">| 身高175对应的身材类型为标准身材                                |</span><br><span class="line">+<span class="comment">----------------------------------------------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="带参存储过程"><a href="#带参存储过程" class="headerlink" title="带参存储过程"></a>带参存储过程</h4><blockquote>
<p>语法  create procedure pro_test(in 参数名 类型)</p>
<ul>
<li>in:   该参数可以作为输入，也就是需要调用方传入值 , 默认</li>
<li>out:   该参数作为输出，也就是该参数可以作为返回值</li>
<li>inout: 既可以作为输入参数，也可以作为输出参数</li>
</ul>
</blockquote>
<h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><blockquote>
<p><strong>常用于表中已有字段名</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6(<span class="keyword">in</span> height <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> description <span class="built_in">varchar</span>(<span class="number">59</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">if height&gt;= 180 then</span><br><span class="line"><span class="keyword">set</span> description =<span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">elseif height&gt;=170 and height&lt;180 then</span><br><span class="line"><span class="keyword">set</span> description =<span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">else </span><br><span class="line"><span class="keyword">set</span> description=<span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;身高&#x27;</span>,height,<span class="string">&#x27;对应的身材类型为&#x27;</span>,description);</span><br><span class="line"><span class="keyword">end</span>@</span><br></pre></td></tr></table></figure>

<h5 id="out"><a href="#out" class="headerlink" title="out"></a>out</h5><blockquote>
<p>用于查询表中未有参数，如聚合函数</p>
<ul>
<li><p><strong>select</strong> count(*) <strong>into</strong> <strong>num</strong> from emp;</p>
</li>
<li><p><strong>call sp_emp3(@num)</strong></p>
</li>
<li><p><strong>select @sum</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建out</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test6(<span class="keyword">in</span> height <span class="built_in">int</span>,<span class="keyword">out</span> description <span class="built_in">varchar</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> height&gt;= <span class="number">180</span> <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> description =<span class="string">&#x27;身材高挑&#x27;</span>;</span><br><span class="line">elseif height&gt;=170 and height&lt;180 then</span><br><span class="line"><span class="keyword">set</span> description =<span class="string">&#x27;标准身材&#x27;</span>;</span><br><span class="line">else </span><br><span class="line"><span class="keyword">set</span> description=<span class="string">&#x27;一般身材&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用聚合函数</span></span><br><span class="line">DELIMITER &amp;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_emp3(<span class="keyword">out</span> <span class="keyword">num</span> <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">num</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">END</span> &amp;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_test6(<span class="number">180</span>,@description)<span class="comment">#</span></span><br><span class="line"><span class="keyword">select</span> @description<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>@<span class="keyword">num</span>=<span class="number">0</span>; <span class="comment">-- 设置全局变量</span></span><br><span class="line"><span class="keyword">call</span> sp_emp3(@<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">num</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>@description :  这种变量要在变量名称前面加上“@”符号，叫做<strong>用户会话变量</strong>，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p>
<p>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 <strong>系统变量</strong> </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set @num&#x3D;&#39;hello&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @num;</span><br><span class="line">+-------+</span><br><span class="line">| @num  |</span><br><span class="line">+-------+</span><br><span class="line">| hello |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h4><blockquote>
<p><strong>语法</strong></p>
<ul>
<li><strong>case</strong>  case_value</li>
</ul>
<p>​     <strong>when</strong>  when_value  <strong>then</strong> statement_list</p>
<p>​     when  when_value2 then statement_list2</p>
<p>​     <strong>else</strong> statement_list3</p>
<p> <strong>end case</strong></p>
<ul>
<li><p>case </p>
<p>​    when 条件表达式 then statement_list</p>
<p>​    when ..</p>
<p>​    else..</p>
<p>end case;</p>
</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test3(<span class="keyword">in</span> mon <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">result</span> <span class="built_in">varchar</span>(<span class="number">40</span>);</span><br><span class="line">case </span><br><span class="line">when mon&gt;=1 and mon &lt;=3 then</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">&#x27;第一季度&#x27;</span>;</span><br><span class="line">when mon&gt;=4 and mon &lt;=6 then</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">&#x27;第二季度&#x27;</span>;</span><br><span class="line">when mon&gt;=7 and mon &lt;=9 then</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">&#x27;第三季度&#x27;</span>;</span><br><span class="line">else</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">result</span>=<span class="string">&#x27;第四季度&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;传递的月份为&#x27;</span>,mon,<span class="string">&#x27;计算出的结果是:&#x27;</span>,<span class="keyword">result</span>); </span><br><span class="line"><span class="keyword">end</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><blockquote>
<p><strong>满足条件继续循环</strong></p>
</blockquote>
<blockquote>
<p><strong>while</strong> search_condition <strong>do</strong></p>
<p>​    statement_list</p>
<p><strong>end while;</strong></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test4(<span class="keyword">in</span> n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">while num&lt;=n do</span><br><span class="line"><span class="keyword">set</span> total=total+<span class="keyword">num</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">num</span>=<span class="keyword">num</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">&#x27;num的值&#x27;</span>,<span class="keyword">num</span>,<span class="string">&#x27;total的值&#x27;</span>,total);</span><br><span class="line"><span class="keyword">end</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019083355334.png" alt="image-20201019083355334" style="zoom:80%;" />

<h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><blockquote>
<p><strong>满足条件退出循环</strong></p>
</blockquote>
<blockquote>
<p><strong>repeat</strong></p>
<p>​    statement_list;</p>
<p><strong>until</strong> search_condition（无分号）</p>
<p><strong>end repeat</strong>;</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test8(<span class="keyword">in</span> n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">repeat</span><br><span class="line"><span class="keyword">set</span> total=total+n;</span><br><span class="line"><span class="keyword">set</span> n=n<span class="number">-1</span>;</span><br><span class="line">until n=0</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span>;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h4 id="loop语句"><a href="#loop语句" class="headerlink" title="loop语句"></a>loop语句</h4><blockquote>
<p>通常使用<strong>leave</strong>语句进行退出</p>
<ul>
<li>loop语句本身无退出条件，故可以进行简单的<strong>死循环</strong></li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test10(<span class="keyword">in</span> n <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> total <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- c为循环的别名</span></span><br><span class="line">c:loop</span><br><span class="line"><span class="keyword">set</span> total=total+n;</span><br><span class="line"><span class="keyword">set</span> n=n<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- if循环进行判断，实现退出条件</span></span><br><span class="line">if n&lt;0 then</span><br><span class="line">leave c;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">loop</span> c;</span><br><span class="line"><span class="keyword">select</span> total;</span><br><span class="line"><span class="keyword">end</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h4 id="游标-光标"><a href="#游标-光标" class="headerlink" title="游标/光标"></a>游标/光标</h4><blockquote>
<p>游标是用来存储<strong>查询结果集</strong>的数据类型，在存储过程和函数中可以使用光标对结果集进行循环的处理。</p>
</blockquote>
<p><strong>声明光标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare 游标名 cursor for 查询语句</span><br></pre></td></tr></table></figure>

<p><strong>打开光标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open 游标名；</span><br></pre></td></tr></table></figure>

<p><strong>获取光标</strong></p>
<blockquote>
<p>调用一次fetch指针向下移动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetch 游标名 into 接收数据的变量名</span><br></pre></td></tr></table></figure>

<p><strong>关闭关闭</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">close 游标名;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test11()</span><br><span class="line">begin</span><br><span class="line">declare e_id int(11);</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int(11);</span><br><span class="line">declare e_salary int(11);</span><br><span class="line">declare emp_result cursor for select *from emp;</span><br><span class="line"></span><br><span class="line">open emp_result;</span><br><span class="line">fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;,e_id,&#39;,name&#x3D;&#39;,e_name,&#39;,age&#x3D;&#39;,e_age,&#39;,salary&#x3D;&#39;,e_salary);</span><br><span class="line">close emp_result;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019091344892.png" alt="image-20201019091344892" style="zoom:80%;" />

<p><strong>循环获取</strong></p>
<blockquote>
<p><strong>declare exit handler for not found set</strong> has_data=0;  光标无结果返回条件。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test12()</span><br><span class="line">begin</span><br><span class="line">declare e_id int(11);</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int(11);</span><br><span class="line">declare e_salary int(11);</span><br><span class="line">declare has_data int default 1;</span><br><span class="line"></span><br><span class="line">declare emp_result cursor for select *from emp;</span><br><span class="line">-- 抓取不到数据设置为0,放在游标后面</span><br><span class="line">declare exit handler for not found set has_data&#x3D;0;</span><br><span class="line"></span><br><span class="line">open emp_result;</span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line">fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;,e_id,&#39;,name&#x3D;&#39;,e_name,&#39;,age&#x3D;&#39;,e_age,&#39;,salary&#x3D;&#39;,e_salary);</span><br><span class="line">until has_data&#x3D;0</span><br><span class="line">end repeat;</span><br><span class="line"></span><br><span class="line">close emp_result;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019092152503.png" alt="image-20201019092152503" style="zoom:80%;" />

<h2 id="存储函数function"><a href="#存储函数function" class="headerlink" title="存储函数function"></a>存储函数function</h2><blockquote>
<p>是一个有返回值的存储过程</p>
</blockquote>
<h3 id="创建存储函数"><a href="#创建存储函数" class="headerlink" title="创建存储函数"></a>创建存储函数</h3><blockquote>
<p><strong>create function</strong> function_name()</p>
<p>​    <strong>returns type</strong> (不能加分号)</p>
<p>begin</p>
<p>return 变量</p>
<p>end</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function fun2(countryId int)</span><br><span class="line">returns int</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">	declare cnum int;</span><br><span class="line">	select count(*) into cnum from city where country_id&#x3D;countryId;</span><br><span class="line">	return cnum;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select fun1(2)#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019093239027.png" alt="image-20201019093239027" style="zoom:80%;" />

<h3 id="删除存储函数"><a href="#删除存储函数" class="headerlink" title="删除存储函数"></a>删除存储函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function fun2#</span><br></pre></td></tr></table></figure>

<h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><blockquote>
<p>与表有关的数据库对象，指在<strong>insert/update/delete</strong>之前或之后，触发并执行触发器中定义的SQL语句集合。</p>
<ul>
<li><p>可以协助应用在数据库确保数据完整性 , 日志记录 , 数据校验等操作 。</p>
</li>
<li><p><strong>触发器还只支持行级触发，不支持语句级触发。</strong></p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>INSERT 型触发器</th>
<th>NEW 表示将要或者已经新增的数据</th>
</tr>
</thead>
<tbody><tr>
<td>INSERT触发器类型</td>
<td>NEW 和 OLD的使用</td>
</tr>
<tr>
<td>UPDATE 型触发器</td>
<td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td>
</tr>
<tr>
<td>DELETE 型触发器</td>
<td>OLD 表示将要或者已经删除的数据</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger trigger_name</span><br><span class="line"></span><br><span class="line">before&#x2F;after insert&#x2F;update&#x2F;delete</span><br><span class="line"></span><br><span class="line">on 表名 </span><br><span class="line"></span><br><span class="line">for each row -- 行级触发器</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">	trigger_stmt ;</span><br><span class="line"></span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<h3 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h3><blockquote>
<p><strong>创建一张日志表</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_logs(</span><br><span class="line">  id int(11) not null auto_increment,</span><br><span class="line">  operation varchar(20) not null comment &#39;操作类型, insert&#x2F;update&#x2F;delete&#39;,</span><br><span class="line">  operate_time datetime not null comment &#39;操作时间&#39;,</span><br><span class="line">  operate_id int(11) not null comment &#39;操作表的ID&#39;,</span><br><span class="line">  operate_params varchar(500) comment &#39;操作参数&#39;,</span><br><span class="line">  primary key(&#96;id&#96;)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<h4 id="insert触发器"><a href="#insert触发器" class="headerlink" title="insert触发器"></a>insert触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_insert_trigger</span><br><span class="line">after insert</span><br><span class="line">on emp</span><br><span class="line">for each row</span><br><span class="line">begin</span><br><span class="line">insert into emp_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),new.id,concat(&#39;插入后(id:&#39;,new.id,&#39;,name:&#39;,new.name,&#39;,age:&#39;,new.age,&#39;,salary:&#39;,new.salary,&#39;)&#39;));</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp(id,name,age,salary) values(null, &#39;光明左使&#39;,30,3500);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019132216659.png" alt="image-20201019132216659" style="zoom:80%;" />

<h4 id="update触发器"><a href="#update触发器" class="headerlink" title="update触发器"></a>update触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_update_trigger</span><br><span class="line">after update </span><br><span class="line">on emp </span><br><span class="line">for each row </span><br><span class="line">begin</span><br><span class="line">insert into emp_logs (id,operation,operate_time,operate_id,operate_params) values(null,&#39;update&#39;,now(),new.id,</span><br><span class="line">concat(&#39;修改前(id:&#39;,old.id,&#39;, name:&#39;,old.name,&#39;, age:&#39;,old.age,&#39;, salary:&#39;,old.salary,&#39;) , </span><br><span class="line">                                                                                                         修改后(id&#39;,new.id, &#39;name:&#39;,new.name,&#39;, age:&#39;,new.age,&#39;, salary:&#39;,new.salary,&#39;)&#39;));                                                                   </span><br><span class="line">end $</span><br></pre></td></tr></table></figure>

<h4 id="delete触发器"><a href="#delete触发器" class="headerlink" title="delete触发器"></a>delete触发器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_delete_trigger</span><br><span class="line">after delete </span><br><span class="line">on emp </span><br><span class="line">for each row </span><br><span class="line">begin</span><br><span class="line">insert into emp_logs (id,operation,operate_time,operate_id,operate_params) values(null,&#39;delete&#39;,now(),old.id,</span><br><span class="line">concat(&#39;删除前(id:&#39;,old.id,&#39;, name:&#39;,old.name,&#39;, age:&#39;,old.age,&#39;, salary:&#39;,old.salary,&#39;)&#39;));                                                                     </span><br><span class="line">end $</span><br></pre></td></tr></table></figure>

<h3 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h3><blockquote>
<p>show triggers 触发器名;</p>
</blockquote>
<h3 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h3><blockquote>
<p>drop trigger 触发器名；</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20200819184051135.png" alt="image-20200819184051135"></p>
<p><img src="https://csn.damyoung.cn/image-20200819180155720.png" alt="image-20200819180155720"></p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL高级</title>
    <url>/2020/11/11/MySQL%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p>整个MySQL Server由以下组成</p>
<ul>
<li>Connection Pool : 连接池组件</li>
<li>Management Services &amp; Utilities : 管理服务和工具组件</li>
<li>SQL Interface : SQL接口组件</li>
<li>Parser : 查询分析器组件</li>
<li>Optimizer : 优化器组件</li>
<li>Caches &amp; Buffers : 缓冲池组件</li>
<li>Pluggable Storage Engines : 存储引擎</li>
<li>File System : 文件系统</li>
</ul>
<a id="more"></a>

<ol>
<li><strong>连接层</strong>：最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li><strong>服务层</strong>：第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</li>
<li><strong>引擎层</strong>：存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</li>
<li><strong>存储层</strong>：数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</li>
</ol>
<blockquote>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
</blockquote>
<img src="https://csn.damyoung.cn/000001.jpg" style="zoom:80%;" />

<h1 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h1><p>存储引擎就是<strong>存储数据，建立索引，更新查询数据</strong>等等技术的实现方式</p>
<blockquote>
<ul>
<li>针对不同的存储需求可以选择最优的存储引擎。</li>
<li>存储引擎是基于表的，每张表可以使用不同存储引擎</li>
</ul>
</blockquote>
<p>MySQL提供了<strong>插件式</strong>的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎</p>
<blockquote>
<p>MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201019220436964.png"></p>
<h2 id="存储引擎特性"><a href="#存储引擎特性" class="headerlink" title="存储引擎特性"></a>存储引擎特性</h2><table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>MEMORY</th>
<th>MERGE</th>
<th>NDB</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>==行锁(适合高并发)==</td>
<td>==表锁==</td>
<td>表锁</td>
<td>表锁</td>
<td>行锁</td>
</tr>
<tr>
<td>B树索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>支持(5.6版本之后)</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>集群索引</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据索引</td>
<td>支持</td>
<td></td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>索引缓存</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据可压缩</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N/A</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB存储引擎是Mysql的默认存储引擎</p>
<blockquote>
<ul>
<li>InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的<strong>事务</strong>安全</li>
<li>支持外键约束</li>
<li>行锁</li>
</ul>
</blockquote>
<h4 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h4><blockquote>
<p>在提交事务前，所有都会保存在事务日志中，事务日志得到commit命令才会同步到数据库中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table goods_innodb(</span><br><span class="line">	id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">	name varchar(20) NOT NULL,</span><br><span class="line">    primary key(id)</span><br><span class="line">)ENGINE&#x3D;innodb DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">start transaction;</span><br><span class="line">insert into goods_innodb(id,name)values(null,&#39;Meta20&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>MySQL支持外键的存储引擎只有InnoDB </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table country_innodb(</span><br><span class="line">	country_id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    country_name varchar(100) NOT NULL,</span><br><span class="line">    primary key(country_id)</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table city_innodb(</span><br><span class="line">	city_id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    city_name varchar(50) NOT NULL,</span><br><span class="line">    country_id int NOT NULL,</span><br><span class="line">    primary key(city_id),</span><br><span class="line">    key idx_fk_country_id(country_id),</span><br><span class="line">    CONSTRAINT &#96;fk_city_country&#96; FOREIGN KEY(country_id) REFERENCES country_innodb(country_id) ON DELETE RESTRICT ON UPDATE CASCADE</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">--  子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除主表外键：delete from country_innodb where country_id = 1;(失败)</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019144848845.png" alt="image-20201019144848845" style="zoom:80%;" />

<blockquote>
<p>更新主表外键：update country_innodb set country_id = 100 where country_id = 1;(子表对应记录也会更新)</p>
</blockquote>
<h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><ul>
<li><p>使用<strong>共享表空间</strong>存储</p>
<ul>
<li>表结构保存在**.frm**文件中</li>
<li>数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</li>
</ul>
</li>
<li><p>使用<strong>多表空间</strong>存储</p>
<ul>
<li>表结构存放 <strong>.frm</strong> 文件</li>
<li>每个表的数据和索引单独保存在 <strong>.ibd</strong> 中。</li>
</ul>
</li>
</ul>
<blockquote>
<p>cd /var/lib/mysql/</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019162402194.png" alt="image-20201019162402194" style="zoom:80%;" />

<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>不支持事务、也不支持外键，其优势是<strong>访问速度快</strong></p>
<p>对事务的完整性没有要求或者以select、insert为主的应用基本上都可以使用这个引擎来创建表 </p>
<h4 id="不支持事务"><a href="#不支持事务" class="headerlink" title="不支持事务"></a>不支持事务</h4><img src="https://csn.damyoung.cn/image-20201019224019740.png" alt="image-20201019224019740" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201019224042393.png" alt="image-20201019224042393" style="zoom:80%;" />

<h4 id="文件存储方式"><a href="#文件存储方式" class="headerlink" title="文件存储方式"></a>文件存储方式</h4><blockquote>
<p>.frm (存储表定义)；</p>
<p>.MYD(MYData , 存储数据)；</p>
<p>.MYI(MYIndex , 存储索引)；</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019174007327.png" alt="image-20201019174007327" style="zoom:80%;" />



<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>每个MEMORY表实际对应一个<strong>磁盘文件</strong>，格式是.frm ，该文件中只存储表的结构</p>
<blockquote>
<p><strong>数据文件</strong>，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。</p>
<p>默认使用<strong>hash索引</strong> ， 但是服务一旦关闭，表中的数据就会丢失。</p>
</blockquote>
<h3 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h3><p><strong>MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同</strong></p>
<p>MERGE表本身并没有存储数据，对MERGE类型的表可以进行select、update、delete操作，这些操作实际上是对内部的MyISAM表进行的。</p>
<h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><blockquote>
<p>通过<strong>insert method</strong>子句定义插入的表</p>
<ul>
<li>使用<strong>first或 last</strong>值使得插入操作被相应地作用在第一或者最后一个表上</li>
<li>不定义这个子句或者定义为<strong>no</strong>，表示不能对这个MERGE表执行插入操作</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/1556076359503.png" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table order_1990(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">)engine &#x3D; myisam default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table order_1991(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">)engine &#x3D; myisam default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table order_all(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">    -- 插入选择最后一张表</span><br><span class="line">)engine &#x3D; merge union &#x3D; (order_1990,order_1991) insert method&#x3D;last --default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into order_1990 values(1,100.0,&#39;北京&#39;);</span><br><span class="line">insert into order_1990 values(2,100.0,&#39;上海&#39;);</span><br><span class="line"></span><br><span class="line">insert into order_1991 values(10,200.0,&#39;北京&#39;);</span><br><span class="line">insert into order_1991 values(11,200.0,&#39;上海&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019225024416.png" alt="image-20201019225024416" style="zoom:80%;" />

<blockquote>
<p>往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是<strong>last</strong>，那么插入的数据会向最后一张表中插入。</p>
<p>insert into order_all values(100,10000.0,’西安’)；</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019225435071.png" alt="image-20201019225435071" style="zoom:80%;" />

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>这个操作只是<strong>删除MERGE表的定义，对内部的表是没有任何影响的</strong>。</p>
<h2 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h2><ul>
<li>InnoDB <ul>
<li>是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。</li>
<li>如果应用对事务的完整性有比较高的要求，在<strong>并发条件下要求数据的一致性</strong>，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li>
<li>InnoDB存储引擎除了<strong>有效的降低由于删除和更新导致的锁定</strong>， 还可以<strong>确保事务的完整提交和回滚</strong>，对于类似于计费系统或者财务系统等对<strong>数据准确性</strong>要求比较高的系统，InnoDB是最合适的选择。</li>
</ul>
</li>
<li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li>
<li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。<ul>
<li>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中</li>
<li>其次是要确保表的数据可以恢复，<strong>数据库异常终止后</strong>表中的数据是可以恢复的。</li>
<li>MEMORY表通常用于<strong>更新不太频繁的小表，用以快速得到访问结果。</strong></li>
</ul>
</li>
<li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。<ul>
<li>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过<strong>将不同的表分布在多个磁盘上</strong>，可以<strong>有效的改善MERGE表的访问效率</strong>。这对于存储诸如<strong>数据仓储</strong>等VLDB环境十分合适</li>
</ul>
</li>
</ul>
<h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>数据量增加，性能问题成为整个系统性能的瓶颈。</p>
<h3 id="查看SQL执行频率"><a href="#查看SQL执行频率" class="headerlink" title="查看SQL执行频率"></a>查看SQL执行频率</h3><blockquote>
<p>show [session|global] status 命令提供服务器状态信息。</p>
<ul>
<li><p>session级(当前连接)的统计结果，默认是session.</p>
</li>
<li><p>global级(数据库上次启动至今)的统计结果</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Com____&#39;;  -- 针对所有的存储引擎</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;; -- 针对innodb存储引擎</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Com_***      :  这些参数对于 <code>所有存储引擎</code>的表操作 都会进行累计。</p>
<p>Innodb_*** :  这几个参数只是针对 <code>InnoDB 存储引擎</code> 的，累加的算法也略有不同。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/1556122799330.png" alt="image-20201019232242970" style="zoom:80%;" /><img src="https://csn.damyoung.cn/image-20201020082620092.png" alt="image-20201020082620092" style="zoom:80%;" /></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Com_select</td>
<td>执行 select 操作的次数，一次查询只累加 1。</td>
</tr>
<tr>
<td align="left">Com_insert</td>
<td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td>
</tr>
<tr>
<td align="left">Com_update</td>
<td>执行 UPDATE 操作的次数。</td>
</tr>
<tr>
<td align="left">Com_delete</td>
<td>执行 DELETE 操作的次数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_read</td>
<td>select 查询返回的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_inserted</td>
<td>执行 INSERT 操作插入的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_updated</td>
<td>执行 UPDATE 操作更新的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_deleted</td>
<td>执行 DELETE 操作删除的行数。</td>
</tr>
<tr>
<td align="left">Connections</td>
<td>试图连接 MySQL 服务器的次数。</td>
</tr>
<tr>
<td align="left">Uptime</td>
<td>服务器工作时间。</td>
</tr>
<tr>
<td align="left">Slow_queries</td>
<td>慢查询的次数。</td>
</tr>
</tbody></table>
<h3 id="定位低效率执行SQL"><a href="#定位低效率执行SQL" class="headerlink" title="定位低效率执行SQL"></a>定位低效率执行SQL</h3><p>慢查询日志：用–log-slow-queries[=file name]选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句的日志文件。<strong>慢查询日志在查询结束后才记录</strong>，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题</p>
<blockquote>
<p>show processlist：可以使用<code>show processlist</code>命令查看当前MySQL在进行的线程</p>
<ul>
<li>包括线程的状态、是否锁表等</li>
<li>可以<strong>实时</strong>地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/1556122799330.png" alt="image-20201024163523305" style="zoom:80%;" />

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1） id列，用户登录mysql时，系统分配的&quot;connection_id&quot;，可以使用函数connection_id()查看</span><br><span class="line"></span><br><span class="line">2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</span><br><span class="line"></span><br><span class="line">3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</span><br><span class="line"></span><br><span class="line">4） db列，显示这个进程目前连接的是哪个数据库</span><br><span class="line"></span><br><span class="line">5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</span><br><span class="line"></span><br><span class="line">6） time列，显示这个状态持续的时间，单位是秒</span><br><span class="line"></span><br><span class="line">7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</span><br><span class="line"></span><br><span class="line">8） info列，显示这个sql语句，是判断问题语句的一个重要依据</span><br></pre></td></tr></table></figure>

<h3 id="explain分析执行计划"><a href="#explain分析执行计划" class="headerlink" title="explain分析执行计划"></a>explain分析执行计划</h3><p>通过 <strong>explain</strong> 或者 <strong>desc</strong> 命令获取 MySQL如何执行 <strong>select</strong> 语句的信息，包括在 SELECT 语句执行过程中<strong>表如何连接和连接的顺序</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span>*<span class="keyword">from</span> order_all <span class="keyword">where</span> order_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/1556122799330.png" alt="image-20201020104105013"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td>
</tr>
<tr>
<td>select_type</td>
<td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td>
</tr>
<tr>
<td>table</td>
<td>输出结果集的表</td>
</tr>
<tr>
<td>type</td>
<td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td>
</tr>
<tr>
<td>possible_keys</td>
<td>表示查询时，可能使用的索引</td>
</tr>
<tr>
<td>key</td>
<td>表示实际使用的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>索引字段的长度</td>
</tr>
<tr>
<td>rows</td>
<td>扫描行的数量</td>
</tr>
<tr>
<td>extra</td>
<td>执行情况的说明和描述</td>
</tr>
</tbody></table>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><img src="https://csn.damyoung.cn/1556122799330.png" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;t_role&#96; (</span><br><span class="line">  &#96;id&#96; varchar(32) NOT NULL,</span><br><span class="line">  &#96;role_name&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;role_code&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;description&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_role_name&#96; (&#96;role_name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;t_user&#96; (</span><br><span class="line">  &#96;id&#96; varchar(32) NOT NULL,</span><br><span class="line">  &#96;username&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(96) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(45) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user_role&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL auto_increment ,</span><br><span class="line">  &#96;user_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;role_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;fk_ur_user_id&#96; (&#96;user_id&#96;),</span><br><span class="line">  KEY &#96;fk_ur_role_id&#96; (&#96;role_id&#96;),</span><br><span class="line">  CONSTRAINT &#96;fk_ur_role_id&#96; FOREIGN KEY (&#96;role_id&#96;) REFERENCES &#96;t_role&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION,</span><br><span class="line">  CONSTRAINT &#96;fk_ur_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;t_user&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;1&#39;,&#39;super&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;超级管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;2&#39;,&#39;admin&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;系统管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;3&#39;,&#39;itcast&#39;,&#39;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#39;,&#39;test02&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;4&#39;,&#39;stu1&#39;,&#39;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK&#x2F;y&#x2F;spH5rftCpUMZa&#39;,&#39;学生1&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;5&#39;,&#39;stu2&#39;,&#39;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr&#x2F;p1FR6ZKgc18u.Tvqm&#39;,&#39;学生2&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;6&#39;,&#39;t1&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;老师1&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;5&#39;,&#39;学生&#39;,&#39;student&#39;,&#39;学生&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;7&#39;,&#39;老师&#39;,&#39;teacher&#39;,&#39;老师&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;8&#39;,&#39;教学管理员&#39;,&#39;teachmanager&#39;,&#39;教学管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;9&#39;,&#39;管理员&#39;,&#39;admin&#39;,&#39;管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;10&#39;,&#39;超级管理员&#39;,&#39;super&#39;,&#39;超级管理员&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO user_role(id,user_id,role_id) VALUES(NULL, &#39;1&#39;, &#39;5&#39;),(NULL, &#39;1&#39;, &#39;7&#39;),(NULL, &#39;2&#39;, &#39;8&#39;),(NULL, &#39;3&#39;, &#39;9&#39;),(NULL, &#39;4&#39;, &#39;8&#39;),(NULL, &#39;5&#39;, &#39;10&#39;) ;</span><br></pre></td></tr></table></figure>

<h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>id 字段是 select查询的序列号，是一组数字，表示的是<strong>查询中执行select子句或者是操作表的顺序</strong></p>
<ul>
<li><strong>id 相同</strong>表示加载表的顺序是从上到下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from t_role r, t_user u, user_role ur where r.id &#x3D; ur.role_id and u.id &#x3D; ur.user_id ;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/1556122799330.png" alt="image-20201020105535724"></p>
<ul>
<li><strong>id 不同</strong>id值越大，优先级越高，越先被执行。 </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id = (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username = <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020105627907.png" alt="image-20201020105627907"></p>
<ul>
<li><strong>id 有相同，也有不同，同时存在</strong>。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">`user_id`</span> = <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id = a.role_id ; </span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020105753608.png" alt="image-20201020105753608"></p>
<h4 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h4><blockquote>
<p>从上到下执行效率越来越慢</p>
</blockquote>
<table>
<thead>
<tr>
<th>select_type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>简单的select查询，查询中不包含子查询或者UNION</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>查询中若包含任何复杂的子查询，<strong>最外层</strong>查询标记为该标识</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>在SELECT 或 WHERE 列表中<strong>包含了子查询</strong></td>
</tr>
<tr>
<td>DERIVED</td>
<td>在<strong>from</strong>列表中包含的<strong>子查询</strong>，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td>
</tr>
<tr>
<td>UNION</td>
<td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>从UNION表获取结果的SELECT</td>
</tr>
</tbody></table>
<p><img src="https://csn.damyoung.cn/image-20201020110651314.png" alt="image-20201020110651314"></p>
<blockquote>
<p><derived2> 表示在衍生表id=2的表中查询</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020110922568.png" alt="image-20201020110922568"></p>
<p><img src="https://csn.damyoung.cn/image-20201020111309059.png" alt="image-20201020111309059"></p>
<h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><p>展示这一行的数据是关于哪一张表的 </p>
<h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p><strong>显示访问类型</strong></p>
<blockquote>
<p>从下到上降低，<strong>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>MySQL不访问任何表，索引，直接返回结果</td>
</tr>
<tr>
<td>system</td>
<td><strong>所查询的表只有一行记录</strong>(等于系统表)，这是const类型的特例，一般不会出现</td>
</tr>
<tr>
<td>const</td>
<td>表示通过<strong>索引一次</strong>就找到了，const 用于比较<strong>primary key</strong> 或者 <strong>unique</strong> 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常量。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td>
</tr>
<tr>
<td>eq_ref</td>
<td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，<strong>关联查询出的记录只有一条</strong>。常见于主键或唯一索引扫描</td>
</tr>
<tr>
<td>ref</td>
<td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td>
</tr>
<tr>
<td>range</td>
<td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 <strong>between ， &lt; , &gt; , in</strong> 等操作。</td>
</tr>
<tr>
<td>index</td>
<td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td>
</tr>
<tr>
<td>all</td>
<td>将遍历全表以找到匹配的行</td>
</tr>
</tbody></table>
<p><img src="https://csn.damyoung.cn/image-20201020112143416.png" alt="image-20201020112143416"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112243331.png" alt="image-20201020112243331"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112422123.png" alt="image-20201020112422123"></p>
<blockquote>
<p>使用主键的关联查询出来的记录只有一条</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020112922768.png" alt="image-20201020112922768"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112948978.png" alt="image-20201020112948978"></p>
<h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><blockquote>
<ul>
<li><p>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </p>
</li>
<li><p>key ： <strong>实际使用</strong>的索引， 如果为NULL， 则没有使用索引。</p>
</li>
<li><p>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</p>
</li>
</ul>
</blockquote>
<h4 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h4><p>扫描行的数量。</p>
<h4 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h4><p>其他的额外的执行计划信息，在该列展示 。优化前两个，保持第三个</p>
<table>
<thead>
<tr>
<th>extra</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>using  filesort</td>
<td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “<strong>文件排序</strong>”, 效率低。</td>
</tr>
<tr>
<td>using  temporary</td>
<td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用<strong>临时表</strong>。常见于 order by 和 group by； 效率低</td>
</tr>
<tr>
<td>using  index</td>
<td>表示相应的select操作使用了<strong>覆盖索引</strong>， 避免访问表的数据行， 效率不错。</td>
</tr>
</tbody></table>
<img src="https://csn.damyoung.cn/image-20201020120436509.png" alt="image-20201020120436509" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201020120644601.png" alt="image-20201020120644601" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201020120745269.png" alt="image-20201020120745269" style="zoom:80%;" />

<h3 id="profile分析SQL时间耗费"><a href="#profile分析SQL时间耗费" class="headerlink" title="profile分析SQL时间耗费"></a>profile分析SQL时间耗费</h3><p>show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p>
<blockquote>
<ul>
<li><p>have_profiling 参数，能够看到当前MySQL是否支持profile：</p>
</li>
<li><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020131743822.png" alt="image-20201020131743822" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set profiling&#x3D;1; -- 开启profiling开关</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show profiles;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020132119836.png" alt="image-20201020132119836" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show profile [cpu] for query 5;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020132205385.png" alt="image-20201020132205385" style="zoom:80%;" />

<blockquote>
<p><strong>Sending data</strong> 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</p>
<ul>
<li>MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Status</td>
<td>sql 语句执行的状态</td>
</tr>
<tr>
<td>Duration</td>
<td>sql 执行过程中每一个步骤的耗时</td>
</tr>
<tr>
<td>CPU_user</td>
<td>当前用户占有的cpu</td>
</tr>
<tr>
<td>CPU_system</td>
<td>系统占有的cpu</td>
</tr>
</tbody></table>
<h3 id="trace分析优化器执行计划"><a href="#trace分析优化器执行计划" class="headerlink" title="trace分析优化器执行计划"></a>trace分析优化器执行计划</h3><p>通过trace文件能够进一步了解为什么优化器<code>optimiter</code>选择A计划, 而不是选择B计划。</p>
<p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET optimizer_trace&#x3D;&quot;enabled&#x3D;on&quot;,end_markers_in_json&#x3D;on;</span><br><span class="line">set optimizer_trace_max_mem_size&#x3D;1000000;</span><br></pre></td></tr></table></figure>

<p>执行SQL语句 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure>

<h2 id="优化语句"><a href="#优化语句" class="headerlink" title="优化语句"></a>优化语句</h2><h3 id="大批量插入数据"><a href="#大批量插入数据" class="headerlink" title="大批量插入数据"></a>大批量插入数据</h3><p><strong>准备</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_user_1&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(96) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;birthday&#96; datetime DEFAULT NULL,</span><br><span class="line">  &#96;sex&#96; char(1) DEFAULT NULL,</span><br><span class="line">  &#96;email&#96; varchar(45) DEFAULT NULL,</span><br><span class="line">  &#96;phone&#96; varchar(45) DEFAULT NULL,</span><br><span class="line">  &#96;qq&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;status&#96; varchar(32) NOT NULL COMMENT &#39;用户状态&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL,</span><br><span class="line">  &#96;update_time&#96; datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ;</span><br></pre></td></tr></table></figure>

<p><strong>load执行语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into </span><br><span class="line"></span><br><span class="line">table tb_user_1 </span><br><span class="line"></span><br><span class="line">fields terminated by &#39;,&#39; </span><br><span class="line"></span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>InnoDB 类型的表，有以下几种方式可以提高导入的效率</p>
</blockquote>
<h4 id="提高导入效率"><a href="#提高导入效率" class="headerlink" title="提高导入效率"></a>提高导入效率</h4><h5 id="主键顺序插入"><a href="#主键顺序插入" class="headerlink" title="主键顺序插入"></a>主键顺序插入</h5><p>InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率</p>
<h5 id="导入有序表"><a href="#导入有序表" class="headerlink" title="导入有序表"></a>导入有序表</h5><p><img src="https://csn.damyoung.cn/image-20201021140542607.png" alt="image-20201021140542607"></p>
<h5 id="导入无序表"><a href="#导入无序表" class="headerlink" title="导入无序表"></a>导入无序表</h5><p><img src="https://csn.damyoung.cn/image-20201021140743217.png" alt="image-20201021140743217"></p>
<h4 id="关闭唯一性校验"><a href="#关闭唯一性校验" class="headerlink" title="关闭唯一性校验"></a>关闭唯一性校验</h4><p>在导入数据前执行 set unique_checks=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率</p>
<h4 id="手动提交事务"><a href="#手动提交事务" class="headerlink" title="手动提交事务"></a>手动提交事务</h4><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率</p>
<h3 id="优化insert语句"><a href="#优化insert语句" class="headerlink" title="优化insert语句"></a>优化insert语句</h3><h4 id="减少连接次数"><a href="#减少连接次数" class="headerlink" title="减少连接次数"></a>减少连接次数</h4><ul>
<li>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的<strong>缩减客户端与数据库之间的连接、关闭等消耗</strong>。使得效率比分开执行的单个insert语句快。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>优化后的方案为 ： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;)，(3,&#39;Jerry&#39;);</span><br></pre></td></tr></table></figure>

<h4 id="在事务中进行数据插入"><a href="#在事务中进行数据插入" class="headerlink" title="在事务中进行数据插入"></a>在事务中进行数据插入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<h4 id="数据有序插入"><a href="#数据有序插入" class="headerlink" title="数据有序插入"></a>数据有序插入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(4,&#39;Tim&#39;);</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">insert into tb_test values(5,&#39;Rose&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">insert into tb_test values(4,&#39;Tim&#39;);</span><br><span class="line">insert into tb_test values(5,&#39;Rose&#39;);</span><br></pre></td></tr></table></figure>

<h3 id="优化order-by语句"><a href="#优化order-by语句" class="headerlink" title="优化order by语句"></a>优化order by语句</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;emp&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(100) NOT NULL,</span><br><span class="line">  &#96;age&#96; int(3) NOT NULL,</span><br><span class="line">  &#96;salary&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;1&#39;,&#39;Tom&#39;,&#39;25&#39;,&#39;2300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;2&#39;,&#39;Jerry&#39;,&#39;30&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;3&#39;,&#39;Luci&#39;,&#39;25&#39;,&#39;2800&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;4&#39;,&#39;Jay&#39;,&#39;36&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;5&#39;,&#39;Tom2&#39;,&#39;21&#39;,&#39;2200&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;6&#39;,&#39;Jerry2&#39;,&#39;31&#39;,&#39;3300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;7&#39;,&#39;Luci2&#39;,&#39;26&#39;,&#39;2700&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;8&#39;,&#39;Jay2&#39;,&#39;33&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;9&#39;,&#39;Tom3&#39;,&#39;23&#39;,&#39;2400&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;10&#39;,&#39;Jerry3&#39;,&#39;32&#39;,&#39;3100&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;11&#39;,&#39;Luci3&#39;,&#39;26&#39;,&#39;2900&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;12&#39;,&#39;Jay3&#39;,&#39;37&#39;,&#39;4500&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_emp_age_salary on emp(age,salary);</span><br></pre></td></tr></table></figure>

<h4 id="filesort排序"><a href="#filesort排序" class="headerlink" title="filesort排序"></a>filesort排序</h4><blockquote>
<p>通过<strong>对返回数据进行排序</strong>，也就是通常说的 <code>filesort</code> 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020212512988.png" alt="image-20201020212512988" style="zoom:80%;" />

<h4 id="using-index排序"><a href="#using-index排序" class="headerlink" title="using index排序"></a>using index排序</h4><blockquote>
<p>通过有序索引顺序扫描<strong>直接返回有序数据</strong>，这种情况即为 using index，不需要额外排序，操作效率高。</p>
<p>id,age,salary均有索引</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020212818703.png" alt="image-20201020212818703"></p>
<p><img src="https://csn.damyoung.cn/image-20201020212944165.png" alt="image-20201020212944165"></p>
<h4 id="字段排序"><a href="#字段排序" class="headerlink" title="字段排序"></a>字段排序</h4><blockquote>
<ul>
<li>尽量减少额外的排序，通过索引直接返回有序数据。</li>
<li>where 条件和Order by 使用相同的索引，</li>
<li>Order By 的顺序和索引顺序相同， </li>
<li>Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020213149376.png" alt="image-20201020213149376"></p>
<h4 id="filesort的优化"><a href="#filesort的优化" class="headerlink" title="filesort的优化"></a>filesort的优化</h4><blockquote>
<p>通过创建合适的索引，能够减少 Filesort 的出现，在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作</p>
</blockquote>
<blockquote>
<p>对于Filesort ， MySQL 有两种排序算法</p>
<p>通过比较系统变量 <code>max_length_for_sort_data</code> 和<code>查询语句</code>取出的字段总大小， 来判定是否那种排序算法</p>
<p>如果<code>max_length_for_sort_data</code> 更大，那么使用第二种优化之后的算法；否则使用第一种。</p>
</blockquote>
<ul>
<li><p>两次扫描算法</p>
<ul>
<li>首先根据条件取出<strong>排序字段和行指针信息</strong>，在排序区 sort buffer 中排序。</li>
<li>如果sort buffer不够，则在临时表 temporary table 中存储排序结果。</li>
<li>完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</li>
</ul>
</li>
<li><p>一次扫描算法：<strong>一次性</strong>取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。</p>
<p>​                           排序时<strong>内存开销较大</strong>，但是排序效率比两次扫描算法要高。</p>
</li>
<li><p>可以适当提高 <code>sort_buffer_size</code>  和 <code>max_length_for_sort_data</code>  系统变量，来增大排序区的大小，提高排序的效率。</p>
</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201020214259798.png" alt="image-20201020214259798" style="zoom:80%;" />

<h3 id="优化group-by语句"><a href="#优化group-by语句" class="headerlink" title="优化group by语句"></a>优化group by语句</h3><blockquote>
<ul>
<li>GROUP BY 也会进行排序操作</li>
<li>与ORDER BY 相比,GROUP BY 主要只是多了排序之后的分组操作。</li>
<li>如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021133617215.png" alt="image-20201021133617215"></p>
<h4 id="禁止排序"><a href="#禁止排序" class="headerlink" title="禁止排序"></a>禁止排序</h4><blockquote>
<p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行<code>order by null</code> 禁止排序</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select age,count(*) from emp group by age order by null;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021133640908.png" alt="image-20201021133640908"></p>
<h4 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h4><blockquote>
<p>在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_emp_age_salary on emp(age,salary)；</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021133738142.png" alt="image-20201021133738142" style="zoom:80%;" />

<h3 id="优化子查询"><a href="#优化子查询" class="headerlink" title="优化子查询"></a>优化子查询</h3><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。</p>
<blockquote>
<p><strong>子查询是可以被更高效的多表连接查询<code>join</code>替代</strong>。</p>
</blockquote>
<h4 id="使用连接查询"><a href="#使用连接查询" class="headerlink" title="使用连接查询"></a>使用连接查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from t_user where id in (select user_id from user_role );</span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 多表查询</span><br><span class="line">explain select * from t_user u , user_role ur where u.id &#x3D; ur.user_id;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中<strong>创建临时表</strong>来完成这个逻辑上需要两个步骤的查询工作</p>
</blockquote>
<h3 id="优化or条件"><a href="#优化or条件" class="headerlink" title="优化or条件"></a>优化or条件</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><blockquote>
<ul>
<li>每个条件必须用到索引</li>
<li>只能使用单值索引，不能使用复合索引</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021141923214.png" alt="image-20201021141923214" style="zoom:80%;" />

<h4 id="使用union替换"><a href="#使用union替换" class="headerlink" title="使用union替换"></a>使用union替换</h4><blockquote>
<ul>
<li><p>UNION 语句的 type 值为 <code>ref</code>，OR 语句的 type 值为 <code>range</code>，可以看到这是一个很明显的差距</p>
</li>
<li><p>UNION 语句的 ref 值为 <code>const</code>，OR 语句的 ref 值为 <code>null</code>，<strong>const 表示是常量值引用，非常快</strong></p>
</li>
</ul>
<p>这两项的差距就说明了 UNION 要优于 OR 。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021142314495.png" alt="image-20201021142314495"></p>
<h3 id="优化分页查询"><a href="#优化分页查询" class="headerlink" title="优化分页查询"></a>优化分页查询</h3><p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。</p>
<blockquote>
<p>一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大</p>
</blockquote>
<h4 id="索引排序"><a href="#索引排序" class="headerlink" title="索引排序"></a>索引排序</h4><blockquote>
<p>在<strong>索引上完成排序分页</strong>操作，最后根据主键关联回原表查询所需要的其他列内容。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021143105977.png" alt="image-20201021143105977"></p>
<h4 id="条件查询替换"><a href="#条件查询替换" class="headerlink" title="条件查询替换"></a>条件查询替换</h4><blockquote>
<p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021143356602.png" alt="image-20201021143356602" style="zoom:80%;" />

<h3 id="SQL提示"><a href="#SQL提示" class="headerlink" title="SQL提示"></a>SQL提示</h3><h4 id="use-index"><a href="#use-index" class="headerlink" title="use index"></a>use index</h4><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">explain select *from tb_seller use index(idx_seller_name) where name&#x3D;&#39;小米科技&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021143950081.png" alt="image-20201021143950081"></p>
<h4 id="ignore-index"><a href="#ignore-index" class="headerlink" title="ignore index"></a>ignore index</h4><p>用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021144137493.png" alt="image-20201021144137493"></p>
<h4 id="force-index"><a href="#force-index" class="headerlink" title="force index"></a>force index</h4><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021144427022.png" alt="image-20201021144427022" style="zoom:80%;" />

<h1 id="索引-1"><a href="#索引-1" class="headerlink" title="索引"></a>索引</h1><h2 id="索引分析"><a href="#索引分析" class="headerlink" title="索引分析"></a>索引分析</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="索引作用"><a href="#索引作用" class="headerlink" title="索引作用"></a>索引作用</h4><ul>
<li><p><strong>索引是帮助MySql高效获取数据的数据结构B+树(有序)</strong></p>
</li>
<li><p>索引是数据库中用来<strong>提高性能</strong>的常用工具</p>
</li>
<li><p>索引往往以索引文件的形式存储在<strong>磁盘</strong>上。</p>
</li>
</ul>
<img src="https://csn.damyoung.cn/ss.png" alt="ss" style="zoom:80%;" />

<h4 id="优劣势"><a href="#优劣势" class="headerlink" title="优劣势"></a>优劣势</h4><p><strong>优势</strong></p>
<ul>
<li>提高数据检索的效率，降低数据库的IO成本</li>
<li>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>
</ul>
<p><strong>劣势</strong></p>
<ul>
<li>索引也是一张表，保存了主键与索引字段，并指向实体类的记录，占用空间</li>
<li>提高了查询效率，但也降低了更新表的速度。更新表时，还需要保存一下索引文件每次更新添加索引列的字段，都会调整因为更新带来的键值变化后的索引信息</li>
</ul>
<h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><ul>
<li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li>
<li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li>
<li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li>
<li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li>
</ul>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB引擎</th>
<th>MyISAM引擎</th>
<th>Memory引擎</th>
</tr>
</thead>
<tbody><tr>
<td>BTREE索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>HASH 索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-tree 索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本之后支持</td>
<td>支持</td>
<td>不支</td>
</tr>
</tbody></table>
<p>索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引</p>
<h3 id="索引数据结构"><a href="#索引数据结构" class="headerlink" title="索引数据结构"></a>索引数据结构</h3><p><strong>索引是在MySQL的存储引擎层实现</strong></p>
<h4 id="BTree结构"><a href="#BTree结构" class="headerlink" title="BTree结构"></a>BTree结构</h4><p><strong>因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</strong></p>
<blockquote>
<p>B+树-多路平衡搜索树</p>
</blockquote>
<h5 id="m叉树特性"><a href="#m叉树特性" class="headerlink" title="m叉树特性"></a><strong>m叉树特性</strong></h5><blockquote>
<ul>
<li>树中每个节点最多包含m个孩子。</li>
<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li>
<li>若根节点不是叶子节点，则至少有两个孩子。</li>
<li>所有的叶子节点都在同一层。</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li>
</ul>
</blockquote>
<h6 id="构建m叉树"><a href="#构建m叉树" class="headerlink" title="构建m叉树"></a>构建m叉树</h6><blockquote>
<p>以5叉BTree为例</p>
<p><strong>key的数量</strong>：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1，2 &lt;= n &lt;=4 。</p>
<p>当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p>
</blockquote>
<p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p>
<p>演变过程如下：</p>
<p>1). 插入前4个字母 C N G A </p>
<p><img src="https://csn.damyoung.cn/1555944126588.png" alt="1555944126588"> </p>
<p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p>
<p><img src="https://csn.damyoung.cn/1555944549825.png" alt="1555944549825"> </p>
<p>3). 插入E，K，Q不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944596893.png" alt="1555944596893"> </p>
<p>4). 插入M，中间元素M字母向上分裂到父节点G</p>
<p><img src="https://csn.damyoung.cn/1555944652560.png" alt="1555944652560"> </p>
<p>5). 插入F，W，L，T不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944686928.png" alt="1555944686928"> </p>
<p>6). 插入Z，中间元素T向上分裂到父节点中 </p>
<p><img src="https://csn.damyoung.cn/1555944713486.png" alt="1555944713486"> </p>
<p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944749984.png" alt="1555944749984"> </p>
<p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p>
<p><img src="https://csn.damyoung.cn/1555944848294.png" alt="1555944848294"> </p>
<h4 id="B-TREE-结构"><a href="#B-TREE-结构" class="headerlink" title="B+TREE 结构"></a>B+TREE 结构</h4><ul>
<li>由于B+Tree只有叶子节点保存key信息，<strong>查询任何key都要从root走到叶子</strong>。所以B+Tree的<strong>查询效率更加稳定。</strong></li>
</ul>
<p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p>
<blockquote>
<ul>
<li>m叉B+Tree最多含有m个key，而BTree最多含有m-1个key。</li>
<li>B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</li>
<li>所有的非叶子节点都可以看作是key的索引部分。</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/00001.jpg" alt="1555906287178"> </p>
<h4 id="MySQL中的B-Tree"><a href="#MySQL中的B-Tree" class="headerlink" title="MySQL中的B+Tree"></a>MySQL中的B+Tree</h4><p>MySql索引数据结构对经典的B+Tree进行了优化。</p>
<p>在原B+Tree的基础上，<strong>增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</strong></p>
<p><img src="https://csn.damyoung.cn/1555906287178.png" alt="1555906287178">  </p>
<h3 id="索引分类-1"><a href="#索引分类-1" class="headerlink" title="索引分类"></a>索引分类</h3><ul>
<li>单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li>
<li>唯一索引 ：索引列的值必须唯一，但允许有空值</li>
<li>复合索引 ：即一个索引包含多个列</li>
</ul>
<h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><p>可以创建表同时创建，也可以随时创建新的索引</p>
<h4 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database demo_01 default charset&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;city&#96; (</span><br><span class="line">  &#96;city_id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;city_name&#96; varchar(50) NOT NULL,</span><br><span class="line">  &#96;country_id&#96; int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;city_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;country&#96; (</span><br><span class="line">  &#96;country_id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;country_name&#96; varchar(100) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;country_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(1,&#39;西安&#39;,1);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(2,&#39;NewYork&#39;,2);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(3,&#39;北京&#39;,1);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(4,&#39;上海&#39;,1);</span><br><span class="line"></span><br><span class="line">insert into &#96;country&#96; ( country_id, country_name) values(1,&#39;China&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, country_name) values(2,&#39;America&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, &#96;country_name&#96;) values(3,&#39;Japan&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, &#96;country_name&#96;) values(4,&#39;UK&#39;);</span><br></pre></td></tr></table></figure>

<h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p>创建表时，主键自带主键索引 primary-key</p>
<h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><blockquote>
<p><strong>create index</strong> 索引名称 <strong>on</strong> 表名(字段名)</p>
<p><strong>默认索引数据结构BTREE;</strong></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201018195002240.png" alt="image-20201018195002240"></p>
<h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><blockquote>
<p>show index from 表名\G;</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/ss.png" alt="image-20201018195115914"></p>
<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><blockquote>
<p>drop index 索引名 on 表名</p>
</blockquote>
<img src="https://csn.damyoung.cn/ss.png" alt="image-20201018195404722" style="zoom:80%;" />

<h4 id="创建唯一索引"><a href="#创建唯一索引" class="headerlink" title="创建唯一索引"></a>创建唯一索引</h4><blockquote>
<p>alter table 表名 add unique 索引名(字段名)；</p>
</blockquote>
<blockquote>
<ul>
<li>这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/ss.png" alt="image-20201018200026641" style="zoom:80%;" />

<blockquote>
<p>alter  table  tb_name  add  index 索引名(字段名);</p>
<ul>
<li>添加普通索引， 索引值重复可出现多次。</li>
</ul>
</blockquote>
<blockquote>
<p>alter  table  tb_name  add  fulltext  索引名(字段名);    </p>
<ul>
<li>该语句指定了索引为<strong>FULLTEXT</strong>， 用于<strong>全文索引</strong></li>
</ul>
</blockquote>
<h4 id="创建复合索引"><a href="#创建复合索引" class="headerlink" title="创建复合索引"></a>创建复合索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_name_email_status <span class="keyword">ON</span> tb_seller(<span class="keyword">NAME</span>,email,<span class="keyword">STATUS</span>);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">	对name 创建索引 ;</span><br><span class="line">	对name , email 创建了索引 ;s</span><br><span class="line">	对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure>

<h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ul>
<li>查询频次较高且数据量较大的表建立索引</li>
<li>索引字段：选择经常在<strong>where</strong>的条件中使用的字段提取</li>
<li>尽量使用<strong>唯一索引</strong>，区分度较高，使用索引的效率较高</li>
<li>可以有效提高查询数据的效率，索引越多，维护索引的<strong>代价</strong>就越高；对于insert、delete、update的DML操作较为频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率。增加相应操作的时间消耗。</li>
<li>索引创建后也是使用硬盘进行存储，使用<strong>短索引</strong>可以提升索引访问的I/O效率。</li>
<li>利用<strong>最左前缀</strong>，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时<strong>where子句中使用了组成该索引的前几个字段</strong>，那么这条查询SQL可以利用<strong>复合索引</strong>来提升查询效率</li>
</ul>
<h2 id="索引的使用"><a href="#索引的使用" class="headerlink" title="索引的使用"></a>索引的使用</h2><p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p>
<h3 id="环境准备-2"><a href="#环境准备-2" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &#96;tb_seller&#96; (</span><br><span class="line">	&#96;sellerid&#96; varchar (100),</span><br><span class="line">	&#96;name&#96; varchar (100),</span><br><span class="line">	&#96;nickname&#96; varchar (50),</span><br><span class="line">	&#96;password&#96; varchar (60),</span><br><span class="line">	&#96;status&#96; varchar (1),</span><br><span class="line">	&#96;address&#96; varchar (100),</span><br><span class="line">	&#96;createtime&#96; datetime,</span><br><span class="line">    primary key(&#96;sellerid&#96;)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8mb4; </span><br><span class="line"></span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;alibaba&#39;,&#39;阿里巴巴&#39;,&#39;阿里小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;baidu&#39;,&#39;百度科技有限公司&#39;,&#39;百度小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;huawei&#39;,&#39;华为科技有限公司&#39;,&#39;华为小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;itcast&#39;,&#39;传智播客教育科技有限公司&#39;,&#39;传智播客&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;itheima&#39;,&#39;黑马程序员&#39;,&#39;黑马程序员&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;luoji&#39;,&#39;罗技科技有限公司&#39;,&#39;罗技小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;oppo&#39;,&#39;OPPO科技有限公司&#39;,&#39;OPPO官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;ourpalm&#39;,&#39;掌趣科技股份有限公司&#39;,&#39;掌趣小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;qiandu&#39;,&#39;千度科技&#39;,&#39;千度小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;2&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;sina&#39;,&#39;新浪科技有限公司&#39;,&#39;新浪官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;xiaomi&#39;,&#39;小米科技&#39;,&#39;小米官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;西安市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;yijia&#39;,&#39;宜家家居&#39;,&#39;宜家家居旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create index idx_seller_name_sta_addr on tb_seller(name,status,address);</span><br></pre></td></tr></table></figure>

<h3 id="避免索引失效"><a href="#避免索引失效" class="headerlink" title="避免索引失效"></a>避免索引失效</h3><h4 id="全值索引"><a href="#全值索引" class="headerlink" title="全值索引"></a>全值索引</h4><p>对索引中所有列都指定具体值，该情况下，索引生效，执行效率高。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller where name&#x3D;&#39;小米科技&#39; and status&#x3D;&#39;1&#39; and address&#x3D;&#39;北京市&#39;\G;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/ss.png" alt="image-20201020161200971"></p>
<h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>指的是查询从索引的<strong>最左前列开始，并且不跳过索引中的列。</strong>(爬楼梯)</p>
<img src="https://csn.damyoung.cn/ss.png" alt="image-20201020161615741" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/ss.png" alt="image-20201020161638749" style="zoom:80%;" />

<blockquote>
<p>与顺序无关，而与是否有字段有关</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020161907488.png" alt="image-20201020161907488"></p>
<blockquote>
<p>跳过status,只有name有索引，address无索引</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020162055081.png" alt="image-20201020162055081" style="zoom:80%;" />

<h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><ul>
<li>范围查询右边的列，不能使用索引 。</li>
</ul>
<blockquote>
<p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件<strong>address 没有用到索引。</strong></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163038952.png" alt="image-20201020163038952"></p>
<h4 id="运算操作"><a href="#运算操作" class="headerlink" title="运算操作"></a>运算操作</h4><blockquote>
<p>不要在索引列上进行运算操作， 索引将失效。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020163325815.png" alt="image-20201020163325815" style="zoom:80%;" />

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul>
<li>字符串不加单引号，造成索引失效。</li>
</ul>
<blockquote>
<p>数字也要，否则不走索引(不加单引号，底层进行隐式运算操作)</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163529790.png" alt="image-20201020163529790"></p>
<h4 id="使用覆盖索引"><a href="#使用覆盖索引" class="headerlink" title="使用覆盖索引"></a>使用覆盖索引</h4><ul>
<li>尽量使用覆盖索引，避免select*</li>
</ul>
<blockquote>
<p>尽量使用<strong>覆盖索引</strong>（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p>
<ul>
<li>但<strong>查询非索引字段还是需要回表查询</strong></li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163837667.png" alt="image-20201020163837667"></p>
<p><strong>ps</strong></p>
<blockquote>
<ul>
<li><p>using index ：使用覆盖索引的时候就会出现</p>
</li>
<li><p>using where：在查找使用索引的情况下，需要回表去查询所需的数据</p>
</li>
<li><p>using index condition：查找使用了索引，但是需要回表查询数据</p>
</li>
<li><p>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据    </p>
</li>
</ul>
</blockquote>
<h4 id="or"><a href="#or" class="headerlink" title="or"></a>or</h4><ul>
<li>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller where name&#x3D;&#39;黑马程序员&#39; or createtime &#x3D; &#39;2088-01-01 12:00:00&#39;\G;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020164303908.png" alt="image-20201020164303908"></p>
<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="%模糊查询"></a>%模糊查询</h4><ul>
<li>以%开头的Like模糊查询，索引失效。</li>
</ul>
<blockquote>
<p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020164653957.png" alt="image-20201020164653957"></p>
<p><strong>解决：用覆盖索引解决</strong></p>
<p><img src="https://csn.damyoung.cn/image-20201020164819251.png" alt="image-20201020164819251"></p>
<p><img src="https://csn.damyoung.cn/image-20201020165132336.png" alt="image-20201020165132336"></p>
<h4 id="全表索引更快"><a href="#全表索引更快" class="headerlink" title="全表索引更快"></a>全表索引更快</h4><ul>
<li>如果MySQL评估使用索引比全表更慢，则不使用索引</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201020172558272.png" alt="image-20201020172558272"></p>
<h4 id="is-not-null"><a href="#is-not-null" class="headerlink" title="is not null"></a>is not null</h4><ul>
<li>is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</li>
</ul>
<blockquote>
<p>因为当前字段null是少量的</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020172804973.png" alt="image-20201020172804973"></p>
<h4 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h4><ul>
<li>in 走索引， not in索引失效</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201020173302116.png" alt="image-20201020173302116"></p>
<h4 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h4><ul>
<li>单列索引和复合索引。</li>
</ul>
<blockquote>
<p>尽量使用复合索引，而少使用单列索引 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">	name</span><br><span class="line">	name + status</span><br><span class="line">	name + status + address</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br><span class="line"></span><br><span class="line">数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</span><br></pre></td></tr></table></figure>

<h3 id="查看索引使用情况"><a href="#查看索引使用情况" class="headerlink" title="查看索引使用情况"></a>查看索引使用情况</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前会话使用情况</span><br><span class="line">show status like &#39;Handler_read%&#39;;	</span><br><span class="line"></span><br><span class="line">show global status like &#39;Handler_read%&#39;;	</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020173925206.png" alt="image-20201020173925206" style="zoom:80%;" />

<blockquote>
<ul>
<li><p>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</p>
</li>
<li><p>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</p>
</li>
<li><p>Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</p>
</li>
<li><p>Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</p>
</li>
<li><p>Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</p>
</li>
<li><p>Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</p>
</li>
</ul>
</blockquote>
<h1 id="应用优化"><a href="#应用优化" class="headerlink" title="应用优化"></a>应用优化</h1><h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><p>建立连接的代价的比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源</p>
<p>我们有必要建立数据库连接池，以提高访问的性能。</p>
<h2 id="减少对MySql的访问"><a href="#减少对MySql的访问" class="headerlink" title="减少对MySql的访问"></a>减少对MySql的访问</h2><h3 id="避免数据重复检索"><a href="#避免数据重复检索" class="headerlink" title="避免数据重复检索"></a>避免数据重复检索</h3><p>要向数据库提交两次请求，数据库就要做两次查询操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id , name from tb_book;</span><br><span class="line">select id , status from tb_book;</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id, name , status from tb_book;</span><br></pre></td></tr></table></figure>

<h3 id="增加cache层"><a href="#增加cache层" class="headerlink" title="增加cache层"></a>增加cache层</h3><blockquote>
<p>在应用中，我们可以在应用中增加 <strong>缓存层</strong> 来达到<strong>减轻数据库负担</strong>的目的</p>
<ul>
<li>可以部分数据从数据库中抽取出来放到应用端以文本方式存储</li>
<li>使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存</li>
<li>使用redis数据库来缓存数据 </li>
</ul>
</blockquote>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果</p>
<h3 id="利用MySql复制分流查询"><a href="#利用MySql复制分流查询" class="headerlink" title="利用MySql复制分流查询"></a>利用MySql复制分流查询</h3><p>通过MySql的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而降低单台服务器的压力</p>
<img src="https://csn.damyoung.cn/1.jpg" style="zoom:80%;" />

<h3 id="采用分布式数据库架构"><a href="#采用分布式数据库架构" class="headerlink" title="采用分布式数据库架构"></a>采用分布式数据库架构</h3><p>分布式数据库架构适合大数据量、负载高的情况，有良好的拓展性和高可用性，通过在多台服务器之间分布数据，可以实现多台服务器间的负载均衡，提高访问效率。</p>
<h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><p>开启MySql的查询缓存时，当<strong>执行完全相同</strong>的Sql语句时，服务器就会直接从缓存中读取结果。</p>
<blockquote>
<p>当数据被修改，之前的缓存会失效，<strong>修改比较频繁的表不适合做查询缓存。</strong></p>
</blockquote>
<h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><img src="https://csn.damyoung.cn/20180919131632347.png" alt="20180919131632347" style="zoom:80%;" />

<blockquote>
<ul>
<li>客户端发送一条查询给服务器server；</li>
<li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li>
<li>服务器端进行SQL解析、预处理，再由优化器<code>optimiter</code>生成对应的执行计划；</li>
<li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li>
<li>将结果返回给客户端，同时将结果缓存在缓存层中。</li>
</ul>
</blockquote>
<h2 id="查询缓存配置"><a href="#查询缓存配置" class="headerlink" title="查询缓存配置"></a>查询缓存配置</h2><blockquote>
<p>查看是否支持查询缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;have_query_cache&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看是否开启了查询缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;query_cache_type&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看查询缓存的占用大小</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;query_cache_size&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看查询缓存的状态变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Qcache%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021231234834.png" alt="image-20201021231234834" style="zoom:80%;" />

<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Qcache_free_blocks</td>
<td>查询缓存中的可用内存块数</td>
</tr>
<tr>
<td>Qcache_free_memory</td>
<td>查询缓存的可用内存量</td>
</tr>
<tr>
<td>Qcache_hits</td>
<td>查询缓存命中数</td>
</tr>
<tr>
<td>Qcache_inserts</td>
<td>添加到查询缓存的查询数</td>
</tr>
<tr>
<td>Qcache_lowmen_prunes</td>
<td>由于内存不足而从查询缓存中删除的查询数</td>
</tr>
<tr>
<td>Qcache_not_cached</td>
<td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td>
</tr>
<tr>
<td>Qcache_queries_in_cache</td>
<td>查询缓存中注册的查询数</td>
</tr>
<tr>
<td>Qcache_total_blocks</td>
<td>查询缓存中的块总数</td>
</tr>
</tbody></table>
<h2 id="开启查询缓存"><a href="#开启查询缓存" class="headerlink" title="开启查询缓存"></a>开启查询缓存</h2><table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>OFF 或 0</td>
<td>查询缓存功能关闭</td>
</tr>
<tr>
<td>ON 或 1</td>
<td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td>
</tr>
<tr>
<td>DEMAND 或 2</td>
<td>查询缓存功能按需进行，显式指定 <strong>sql_cache</strong> 的SELECT语句才会缓存；其它均不予缓存</td>
</tr>
</tbody></table>
<blockquote>
<p>在/etc/my.cnf配置中，增加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query_cache_type&#x3D;1;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021234236344.png" alt="image-20201021234236344" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql.service;</span><br></pre></td></tr></table></figure>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021234210231.png" alt="image-20201021234210231" style="zoom:80%;" />

<h2 id="查询缓存select选项"><a href="#查询缓存select选项" class="headerlink" title="查询缓存select选项"></a>查询缓存select选项</h2><blockquote>
<ul>
<li><p>sql_cache：如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p>
</li>
<li><p>sql_no_cache：服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sql_cache username from tb_user_1 where id&#x3D;1;</span><br><span class="line">SELECT SQL_NO_CACHE id, name FROM customer;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021235706488.png" alt="image-20201021235706488" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201021235401748.png" alt="image-20201021235401748" style="zoom:80%;" />

<h2 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h2><p>要想命中缓存，<strong>sql语句必须完全相同</strong></p>
<h3 id="存在不确定"><a href="#存在不确定" class="headerlink" title="存在不确定"></a>存在不确定</h3><blockquote>
<p>查询语句中有一些不确定函数时，则不会缓存。</p>
<p>如 now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL1 : select * from tb_item where updatetime &lt; now() limit 1;</span><br><span class="line">SQL2 : select user();</span><br><span class="line">SQL3 : select database();</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201022000250422.png" alt="image-20201022000250422"></p>
<h3 id="不使用任何表查询"><a href="#不使用任何表查询" class="headerlink" title="不使用任何表查询"></a>不使用任何表查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;a&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="查询系统表"><a href="#查询系统表" class="headerlink" title="查询系统表"></a>查询系统表</h3><blockquote>
<p>查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.engines;</span><br></pre></td></tr></table></figure>

<p>在<strong>存储函数，触发器或事件</strong>的主体内执行的查询。</p>
<blockquote>
<p>如果<strong>表更改</strong>，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。</p>
<ul>
<li>用<code>MERGE</code>映射到已更改表的表的查询。</li>
<li>一个表可以被许多类型的语句，如被改变 insert， update， delete， truncate table，alter table，drop table 或 drop database; </li>
</ul>
</blockquote>
<h1 id="MySql内存管理及优化"><a href="#MySql内存管理及优化" class="headerlink" title="MySql内存管理及优化"></a>MySql内存管理及优化</h1><h2 id="内存优化原则"><a href="#内存优化原则" class="headerlink" title="内存优化原则"></a>内存优化原则</h2><ul>
<li>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存</li>
<li>MyISAM<code> 存储引擎的数据文件读取**依赖于操作系统自身的IO缓存**，因此，如果有</code>MyISAM`表，就要预留更多的内存给操作系统做IO缓存</li>
<li><strong>排序区、连接区</strong>等缓存是分配给每个数据库会话（session）专用的，<strong>其默认值的设置要根据最大连接数合理分配</strong>，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽</li>
</ul>
<h2 id="MyISAM内存优化"><a href="#MyISAM内存优化" class="headerlink" title="MyISAM内存优化"></a>MyISAM内存优化</h2><p>myisam存储引擎使用 key_buffer 缓存<strong>索引块</strong>，加速myisam索引的读写速度。</p>
<p>对于myisam表的<strong>数据块</strong>，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p>
<p><strong>key_buffer_size</strong></p>
<blockquote>
<p>key_buffer_size决定MyISAM<strong>索引块缓存区</strong>的大小，直接影响到MyISAM表的存取效率。</p>
<p>在MySQL参数文件(<code>/usr/my.cnf</code>)中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key_buffer_size&#x3D;512M</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022001306901.png" alt="image-20201022001306901" style="zoom:80%;" />

<p><strong>read_buffer_size</strong></p>
<blockquote>
<p>如果需要经常<strong>顺序扫描</strong>myisam表，可以通过增大read_buffer_size的值来改善性能。</p>
<p>但需要注意的是read_buffer_size是<strong>每个session独占</strong>的，如果默认值设置太大，就会造成内存浪费</p>
</blockquote>
<p><strong>read_rnd_buffer_size</strong></p>
<blockquote>
<p>对于需要做排序的myisam表的查询，如带有<strong>order by</strong>子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。</p>
<p>但需要注意的是 read_rnd_buffer_size 是<strong>每个session独占</strong>的，如果默认值设置太大，就会造成内存浪费。</p>
</blockquote>
<h2 id="InnoDB内存优化"><a href="#InnoDB内存优化" class="headerlink" title="InnoDB内存优化"></a>InnoDB内存优化</h2><blockquote>
<p>innodb用<strong>一块内存区做IO缓存池</strong></p>
<p>该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p>
</blockquote>
<p><strong>innodb_buffer_pool_size</strong></p>
<blockquote>
<p>决定了 innodb 存储引擎<strong>表数据</strong>和<strong>索引数据</strong>的最大缓存区大小</p>
<p>在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，<strong>缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</strong></p>
</blockquote>
<p><strong>innodb_log_buffer_size</strong></p>
<blockquote>
<p>决定了innodb重做<strong>日志缓存</strong>的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p>
</blockquote>
<h1 id="Mysql并发参数调整"><a href="#Mysql并发参数调整" class="headerlink" title="Mysql并发参数调整"></a>Mysql并发参数调整</h1><p>MySql Server是多线程结构，包括后台线程和客户服务线程。</p>
<p>多线程有效利用服务器资源，对并发参数的调优，提高数据库的并发性能。</p>
<h2 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h2><p>允许连接到MySQL数据库的最大数量，默认值是 151.</p>
<blockquote>
<p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p>
<p>最大支持连接数取决于，操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等</p>
</blockquote>
<h2 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a>back_log</h2><p>控制MySQL监听TCP端口时设置的<strong>积压请求栈大小</strong></p>
<blockquote>
<p>MySql的连接数<strong>达到max_connections</strong>时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量<strong>超过</strong>back_log，将不被授予连接资源，将会报错</p>
</blockquote>
<blockquote>
<p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p>
</blockquote>
<h2 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h2><p>用来控制所有SQL语句执行线程可打开<strong>表缓存的数量</strong></p>
<p>执行SQL语句时，<strong>每一个SQL执行线程</strong>至少要打开 1 个表缓存</p>
<blockquote>
<p>值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表 N 的最大数量来设定 ：max_connections x N </p>
</blockquote>
<h2 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h2><p>为了加快连接数据库的速度，MySQL 会缓存一定数量的<strong>客户服务线程</strong>以备重用</p>
<blockquote>
<p>thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p>
</blockquote>
<h2 id="innodb-lock-wait-timeout"><a href="#innodb-lock-wait-timeout" class="headerlink" title="innodb_lock_wait_timeout"></a>innodb_lock_wait_timeout</h2><p>设置InnoDB 事务<strong>等待行锁的时间</strong>，默认值是50ms ， 可以根据需要进行动态设置</p>
<blockquote>
<ul>
<li>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； </li>
<li>对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</li>
</ul>
</blockquote>
<h1 id="MySql锁"><a href="#MySql锁" class="headerlink" title="MySql锁"></a>MySql锁</h1><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p>
<p>如何保证数据<strong>并发访问的一致性、有效性</strong>是所有数据库必须解决的一个问题，<strong>锁冲突</strong>也是影响数据库并发访问性能的一个重要因素</p>
<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><blockquote>
<p>对数据操作的粒度</p>
</blockquote>
<ul>
<li>表锁：操作时，会锁定整个表</li>
<li>行锁：操作时，会锁定当前操作行</li>
</ul>
<blockquote>
<p>数据操作的类型</p>
</blockquote>
<ul>
<li><p>读锁(共享)：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p>
</li>
<li><p>写锁(互斥)：当前操作没有完成之前，它会阻断其他写锁和读锁。</p>
</li>
</ul>
<h2 id="MySql锁-1"><a href="#MySql锁-1" class="headerlink" title="MySql锁"></a>MySql锁</h2><p>表级锁更适合于<strong>以查询为主，只有少量按索引条件更新数据</strong>的应用，如Web 应用；</p>
<p>行级锁则更适合于有大量<strong>按索引条件</strong>并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>表级锁</th>
<th>行级锁</th>
<th>页面锁</th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>InnoDB</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>MEMORY</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>BDB</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>锁类型</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>表级锁</td>
<td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td>
</tr>
<tr>
<td>行级锁</td>
<td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td>
</tr>
<tr>
<td>页面锁</td>
<td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td>
</tr>
</tbody></table>
<h3 id="MyISAM表锁"><a href="#MyISAM表锁" class="headerlink" title="MyISAM表锁"></a>MyISAM表锁</h3><p>MyISAM 存储引擎只支持表锁</p>
<h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p><strong>自动加锁，不需要显式加锁</strong>(LOCK TABLE)</p>
<blockquote>
<ul>
<li><p>执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，</p>
</li>
<li><p>执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加读锁 ： lock table table_name read;</span><br><span class="line"></span><br><span class="line">加写锁 ： lock table table_name write；</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>并发读(读锁只能存在一个)，互斥写</strong></p>
</blockquote>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database demo_03 default charset&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb_book&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) auto_increment,</span><br><span class="line">  &#96;name&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">  &#96;publish_time&#96; DATE DEFAULT NULL,</span><br><span class="line">  &#96;status&#96; CHAR(1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;myisam DEFAULT CHARSET&#x3D;utf8 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,&#39;java编程思想&#39;,&#39;2088-08-01&#39;,&#39;1&#39;);</span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,&#39;solr编程思想&#39;,&#39;2088-08-08&#39;,&#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb_user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) auto_increment,</span><br><span class="line">  &#96;name&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;myisam DEFAULT CHARSET&#x3D;utf8 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;令狐冲&#39;);</span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;田伯光&#39;);</span><br></pre></td></tr></table></figure>

<h4 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h4><blockquote>
<p><strong>加上读锁，不会阻塞其他线程的读操作，会阻塞写操作</strong></p>
</blockquote>
<blockquote>
<ul>
<li><p>对book表加锁，无法访问user等其他表===&gt;读锁只能存在一个</p>
</li>
<li><p>其他session也可以进行对book表进行读操作===&gt;并发读</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201022083945876.png" alt="image-20201022083945876" style="zoom:80%;" />

<blockquote>
<p>book表加上<strong>读锁</strong>，无法进行更新操作，其他客户端对该表进行更新操作也会进入阻塞状态。==&gt;互斥写</p>
</blockquote>
<h4 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h4><blockquote>
<p><strong>写锁阻塞其他线程的读操作和写操作，对本线程写锁表才可进行读写操作</strong></p>
</blockquote>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul>
<li><p>MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求，也会阻塞本用户对其他表读操作；</p>
</li>
<li><p>对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p>
</li>
</ul>
<p>​    简而言之，就是<strong>读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</strong></p>
<blockquote>
<p>此外，MyISAM 的读写锁调度是<strong>写优先</strong>，这也是MyISAM不适合做写为主的表的存储引擎的原因。</p>
<p>因为<strong>写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</strong></p>
</blockquote>
<h4 id="查看锁的争用情况"><a href="#查看锁的争用情况" class="headerlink" title="查看锁的争用情况"></a>查看锁的争用情况</h4><blockquote>
<p>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</p>
<p>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show open tables;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</p>
<p>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Table_locks%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022092559705.png" alt="image-20201022092559705" style="zoom:80%;" />

<h3 id="InnoDB行锁"><a href="#InnoDB行锁" class="headerlink" title="InnoDB行锁"></a>InnoDB行锁</h3><blockquote>
<ul>
<li><p>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；</p>
</li>
<li><p>锁定粒度最小，发生锁冲突的概率最低,并发度也最高</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p>
</blockquote>
<h4 id="行锁模式"><a href="#行锁模式" class="headerlink" title="行锁模式"></a>行锁模式</h4><ul>
<li>共享锁（S）：又称为读锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁（X）：又称为写锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li>
</ul>
<blockquote>
<p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加<strong>排他锁</strong></p>
<p>对于普通SELECT语句，InnoDB<strong>不会加任何锁</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</span><br><span class="line"></span><br><span class="line">排他锁（X) ：SELECT * FROM table_name WHERE ... FOR UPDATE</span><br></pre></td></tr></table></figure>

<h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p><strong>准备</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test_innodb_lock(</span><br><span class="line">	id int(11),</span><br><span class="line">	name varchar(16),</span><br><span class="line">	sex varchar(1)</span><br><span class="line">)engine &#x3D; innodb default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into test_innodb_lock values(1,&#39;100&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(3,&#39;3&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(4,&#39;400&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(5,&#39;500&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(6,&#39;600&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(7,&#39;700&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(8,&#39;800&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(9,&#39;900&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(1,&#39;200&#39;,&#39;0&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_test_innodb_lock_id on test_innodb_lock(id);</span><br><span class="line">create index idx_test_innodb_lock_name on test_innodb_lock(name);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关闭自动提交功能</p>
<p>操作同一行数据，不提交。==&gt;其他事务会处于等待状态</p>
<p>操作不同行数据  ==&gt; 其他事务会执行更新</p>
</blockquote>
<h4 id="行锁升级为表锁"><a href="#行锁升级为表锁" class="headerlink" title="行锁升级为表锁"></a>行锁升级为表锁</h4><p>如果<strong>不通过索引条件检索数据</strong>，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样</p>
<p><img src="https://csn.damyoung.cn/image-20201022175100893.png" alt="image-20201022175100893"></p>
<blockquote>
<p>处于阻塞状态</p>
<p>执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，<strong>存在类型转换，索引失效，最终行锁变为表锁</strong></p>
</blockquote>
<h4 id="间隙锁危害"><a href="#间隙锁危害" class="headerlink" title="间隙锁危害"></a>间隙锁危害</h4><p>当我们<strong>用范围条件</strong>，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； </p>
<blockquote>
<p>对于键值在<strong>条件范围内但并不存在的记录</strong>，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）   </p>
<p>i&lt;10  i= 1,2,  ,4,5 </p>
</blockquote>
<h4 id="行锁争用情况"><a href="#行锁争用情况" class="headerlink" title="行锁争用情况"></a>行锁争用情况</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show  status like &#39;innodb_row_lock%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022180443114.png" alt="image-20201022180443114" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Innodb_row_lock_current_waits: 当前正在等待锁定的数量</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_avg:每次等待所花平均时长</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了<strong>性能损耗</strong>可能比表锁会更高一些，但是在整体<strong>并发</strong>处理能力方面要远远由于MyISAM的表锁的。当</p>
<p>系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p>
<p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们**使用不当的时候(无索引下，行锁升级成表锁)**，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p>
<p>优化建议：</p>
<ul>
<li>尽可能让所有数据检索都能通过<strong>索引</strong>来完成，避免无索引行锁升级为表锁。</li>
<li>合理设计索引，尽可能减少索引<strong>条件</strong>，及索引<strong>范围</strong>，避免<strong>间隙锁</strong></li>
<li>尽量控制<strong>事务大小</strong>，减少锁定<strong>资源量</strong>和<strong>时间</strong>长度</li>
<li>尽可使用低级别<strong>事务隔离</strong>（但是需要业务层面满足需求）</li>
</ul>
<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>该mysql不是指mysql服务，而是指mysql的<strong>客户端工具</strong>。</p>
<h3 id="连接选项"><a href="#连接选项" class="headerlink" title="连接选项"></a>连接选项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">	-u, --user&#x3D;name			指定用户名</span><br><span class="line">	-p, --password[&#x3D;name]	指定密码</span><br><span class="line">	-h, --host&#x3D;name			指定服务器IP或域名</span><br><span class="line">	-P, --port&#x3D;#			指定连接端口</span><br><span class="line"></span><br><span class="line">示例 ：</span><br><span class="line">	mysql -h 127.0.0.1 -P 3306 -u root -p</span><br><span class="line">	</span><br><span class="line">	mysql -h127.0.0.1 -P3306 -uroot -p2143</span><br></pre></td></tr></table></figure>

<h3 id="执行选项"><a href="#执行选项" class="headerlink" title="执行选项"></a>执行选项</h3><blockquote>
<p>-e, –execute=name        执行SQL语句并退出</p>
<p>Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行</p>
<p>对于一些批处理脚本，这种方式尤其方便。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p2143 数据库名 -e &quot;select * from tb_book&quot;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="image-20201022215130425" style="zoom:80%;" />



<h2 id="mysqladmin"><a href="#mysqladmin" class="headerlink" title="mysqladmin"></a>mysqladmin</h2><p>mysqladmin 是一个<strong>执行管理操作</strong>的客户端程序。可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p>
<blockquote>
<p> mysqladmin –help  指令查看帮助文档</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="image-20201022215714698" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 ：</span><br><span class="line">	mysqladmin -uroot -p2143 create &#39;test01&#39;;  </span><br><span class="line">	mysqladmin -uroot -p2143 drop &#39;test01&#39;;</span><br><span class="line">	mysqladmin -uroot -p2143 version;</span><br></pre></td></tr></table></figure>

<h2 id="mysqlbinlog"><a href="#mysqlbinlog" class="headerlink" title="mysqlbinlog"></a>mysqlbinlog</h2><p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p>
<blockquote>
<p>mysqlbinlog [options]  log-files1 log-files2 …</p>
<p>选项：<br>    -d, –database=name : 指定数据库名称，只列出指定的数据库相关操作。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">-o, <span class="comment">--offset=# : 忽略掉日志中的前n行命令。</span></span><br><span class="line"></span><br><span class="line">-r,<span class="comment">--result-file=name : 将输出的文本格式日志输出到指定文件。</span></span><br><span class="line"></span><br><span class="line">-s, <span class="comment">--short-form : 显示简单格式， 省略掉一些信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</span></span><br></pre></td></tr></table></figure>

<h2 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h2><p>用来<strong>备份</strong>数据库或在不同数据库之间进行<strong>数据迁移。</strong>备份内容包含创建表，及插入表的SQL语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --database&#x2F;-B db1 [db2 db3...]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --all-databases&#x2F;-A</span><br></pre></td></tr></table></figure>

<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">	-u, <span class="comment">--user=name			指定用户名</span></span><br><span class="line">	-p, <span class="comment">--password[=name]	指定密码</span></span><br><span class="line">	-h, <span class="comment">--host=name			指定服务器IP或域名</span></span><br><span class="line">	-P, <span class="comment">--port=#			指定连接端口</span></span><br></pre></td></tr></table></figure>

<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	<span class="comment">--add-drop-database		在每个数据库创建语句前加上 Drop database 语句</span></span><br><span class="line">	<span class="comment">--add-drop-table		在每个表创建语句前加上 Drop table 语句 , 默认开启!! ; 不开启 (--skip-add-drop-table)</span></span><br><span class="line">	</span><br><span class="line">	-n, <span class="comment">--no-create-db		不包含数据库的创建语句</span></span><br><span class="line">	-t, <span class="comment">--no-create-info	不包含数据表的创建语句</span></span><br><span class="line">	-d <span class="comment">--no-data			不包含数据</span></span><br><span class="line">	</span><br><span class="line">	 -T, <span class="comment">--tab=name			自动生成两个文件：一个.sql文件，创建表结构的语句；</span></span><br><span class="line">	 						一个.txt文件，数据文件，相当于<span class="keyword">select</span> <span class="keyword">into</span> <span class="keyword">outfile</span>  </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123 demo_03 tb_book &gt; tb_book.sql;</span><br><span class="line">cat tb_book.sql;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 默认开启，可不加</span><br><span class="line">mysqldump -uroot -p123 demo_03 --add-drop-table &gt; demo_03.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 一个.sql文件，创建表结构的语句；</span><br><span class="line">-- 一个.txt文件，数据文件，相当于select into outfile  </span><br><span class="line">mysqldump -uroot -p123 -T &#x2F;tmp demo_03 tb_book;</span><br></pre></td></tr></table></figure>

<h2 id="mysqlimport-source"><a href="#mysqlimport-source" class="headerlink" title="mysqlimport/source"></a>mysqlimport/source</h2><p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的<strong>文本文件</strong>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br><span class="line"></span><br><span class="line">mysqlimport -uroot -p2143 数据库名 &#x2F;tmp&#x2F;city.txt</span><br></pre></td></tr></table></figure>

<p>如果需要导入<strong>sql文件</strong>,可以使用mysql中的source 指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;root&#x2F;tb_book.sql</span><br></pre></td></tr></table></figure>

<h2 id="mysqlshow"><a href="#mysqlshow" class="headerlink" title="mysqlshow"></a>mysqlshow</h2><p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--count		显示数据库及表的统计信息（数据库，表 均可以不指定）-i			显示指定数据库或者指定表的状态信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询每个数据库的表的数量及表中记录的数量mysqlshow -uroot -p2143 --count#查询test库中每个表中的字段书，及行数mysqlshow -uroot -p2143 test --count#查询test库中book表的详细情况mysqlshow -uroot -p2143 test book --count</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="image-20201022235838134" style="zoom:80%;" />

<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件</p>
<blockquote>
<ul>
<li>错误日志</li>
<li>二进制日志（BINLOG 日志）</li>
<li>查询日志</li>
<li>慢查询日志</li>
</ul>
</blockquote>
<h2 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h2><p>记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</p>
<p>当数据库出现任何故障导致无法正常使用时，可以首先查看此日志</p>
<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="image-20201023093056385" style="zoom:80%;" />

<h2 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h2><p>二进制日志（BINLOG）记录了所有的 <strong>DDL</strong>（数据定义语言）语句和 <strong>DML</strong>（数据操纵语言）语句，但是<strong>不包括数据查询语句</strong></p>
<p>此日志对于灾难时的数据恢复起着极其重要的作用，<strong>MySQL的主从复制， 就是通过该binlog实现的</strong>。</p>
<h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><blockquote>
<p>配置文件位置 : /etc/my.cnf</p>
<p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin&#x3D;mysqlbin#配置二进制日志的格式binlog_format&#x3D;STATEMENT</span><br></pre></td></tr></table></figure>

<h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><h4 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h4><p>该日志格式在日志文件中记录的都是<strong>SQL语句</strong>（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p>
<h4 id="row"><a href="#row" class="headerlink" title="row"></a>row</h4><p>该日志格式在日志文件中记录的是<strong>每一行的数据变更</strong>，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p>
<h4 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h4><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点</p>
<h3 id="日志读取"><a href="#日志读取" class="headerlink" title="日志读取"></a>日志读取</h3><p>日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog log-file;</span><br></pre></td></tr></table></figure>

<h4 id="查看statement格式日志"><a href="#查看statement格式日志" class="headerlink" title="查看statement格式日志"></a>查看statement格式日志</h4><p>/var/lib/mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 执行插入语句insert into tb_book values(null,&#39;Lucene&#39;,&#39;2088-05-01&#39;,&#39;0&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>查看日志内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysqlbing.00001;</span><br></pre></td></tr></table></figure>

<h4 id="查看row格式日志"><a href="#查看row格式日志" class="headerlink" title="查看row格式日志"></a>查看row格式日志</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002log_bin=mysqlbin#配置二进制日志的格式binlog_format=ROW</span></span><br></pre></td></tr></table></figure>

<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqlbinlog -vv mysqlbin.000002 </span><br></pre></td></tr></table></figure>

<h4 id="删除日志s"><a href="#删除日志s" class="headerlink" title="删除日志s"></a>删除日志s</h4><ol>
<li><p>Reset Master</p>
</li>
<li><p>执行指令 <code> purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code> ******</code> 编号之前的所有日志。 </p>
</li>
<li><p>执行指令 <code> purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志</p>
</li>
<li><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p>
</li>
</ol>
<h2 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h2><p>查询日志中记录了客户端的<strong>所有操作语句</strong>，而二进制日志不包含查询数据的SQL语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 general_log&#x3D;1#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log general_log_file&#x3D;file_name</span><br></pre></td></tr></table></figure>

<h2 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭slow_query_log=1 # 该参数用来指定慢查询日志的文件名slow_query_log_file=slow_query.log# 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10slong_query_time=10</span></span><br></pre></td></tr></table></figure>

<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>复制是指将主数据库的<strong>DDL</strong> 和 <strong>DML</strong> 操作通过<strong>二进制日志</strong>传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p>
<p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现<strong>链状复制。</strong></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Master 主库在事务提交时，会把<strong>数据变更</strong>作为时间 Events 记录在二进制日志文件 <strong>Binlog</strong> 中。</p>
<p>主库推送二进制日志文件 Binlog 中的日志事件到从库的<strong>中继日志 Relay Log 。</strong></p>
<p>slave<strong>重做</strong>中继日志中的事件，将改变反映它自己的数据。</p>
<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="2111" style="zoom:80%;" />

<h2 id="复制优势"><a href="#复制优势" class="headerlink" title="复制优势"></a>复制优势</h2><ul>
<li>主库出现问题，可以<strong>快速切换到从库提供服务</strong>。</li>
<li>可以在<strong>从库上执行查询</strong>操作，从<strong>主库中更新</strong>，实现读写分离，降低主库的访问压力。</li>
<li>可以在<strong>从库中执行备份</strong>，以避免备份期间影响主库的服务。</li>
</ul>
<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p><strong>配置文件</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#mysql 服务ID,保证整个集群环境中唯一server-id=1#mysql binlog 日志的存储路径和文件名log-bin=/var/lib/mysql/mysqlbin#错误日志,默认已经开启#log-err#mysql的安装目录#basedir#mysql的临时目录#tmpdir#mysql的数据存放目录#datadir#是否只读,1 代表只读, 0 代表读写read-only=0#忽略的数据, 指不需要同步的数据库binlog-ignore-db=mysql#指定同步的数据库#binlog-do-db=db01</span><br></pre></td></tr></table></figure>

<p><strong>重启</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql restart ；</span><br></pre></td></tr></table></figure>

<p><strong>创建同步数据的账户，并且进行授权操作：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#39;itcast&#39;@&#39;192.168.192.131&#39; identified by &#39;itcast&#39;;	flush privileges;</span><br></pre></td></tr></table></figure>

<p><strong>查看master状态：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>File : 从哪个日志文件开始推送日志文件 </p>
<p>Position ： 从哪个位置开始推送日志</p>
<p>Binlog_Ignore_DB : 指定不需要同步的数据库</p>
</blockquote>
<h3 id="slave"><a href="#slave" class="headerlink" title="slave"></a>slave</h3><p>在slave端配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#mysql服务端ID,唯一server-id=2#指定binlog日志log-bin=/var/lib/mysql/mysqlbin</span><br></pre></td></tr></table></figure>

<p>重启mysql</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service mysql restart；</span><br></pre></td></tr></table></figure>

<p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">change master to master_host= <span class="string">&#x27;192.168.192.130&#x27;</span>, master_user=<span class="string">&#x27;itcast&#x27;</span>, master_password=<span class="string">&#x27;itcast&#x27;</span>, master_log_file=<span class="string">&#x27;mysqlbin.000001&#x27;</span>, master_log_pos=<span class="number">413</span>;</span><br></pre></td></tr></table></figure>

<p>开启同步操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">start slave;show slave status;</span><br></pre></td></tr></table></figure>

<p>停止同步</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>

<h3 id="验证同步操作"><a href="#验证同步操作" class="headerlink" title="验证同步操作"></a>验证同步操作</h3><p>主库中创建数据库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">create database db01;user db01;create table user(	id int(<span class="number">11</span>) not <span class="literal">null</span> auto_increment,	name varchar(<span class="number">50</span>) not <span class="literal">null</span>,	sex varchar(<span class="number">1</span>),	primary key (id))engine=innodb <span class="keyword">default</span> charset=utf8;insert into user(id,name,sex) values(<span class="literal">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);insert into user(id,name,sex) values(<span class="literal">null</span>,<span class="string">&#x27;Trigger&#x27;</span>,<span class="string">&#x27;0&#x27;</span>);insert into user(id,name,sex) values(<span class="literal">null</span>,<span class="string">&#x27;Dawn&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>从库中查询</p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>存储引擎</title>
    <url>/2020/11/11/01MySql%E4%BD%93%E7%B3%BB%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h3 id="一、MySql体系"><a href="#一、MySql体系" class="headerlink" title="一、MySql体系"></a>一、MySql体系</h3><img src="https://csn.damyoung.cn/000001.jpg" style="zoom:80%;" />

<p>整个MySQL Server由以下组成</p>
<ul>
<li>Connection Pool : 连接池组件</li>
<li>Management Services &amp; Utilities : 管理服务和工具组件</li>
<li>SQL Interface : SQL接口组件</li>
<li>Parser : 查询分析器组件</li>
<li>Optimizer : 优化器组件</li>
<li>Caches &amp; Buffers : 缓冲池组件</li>
<li>Pluggable Storage Engines : 存储引擎</li>
<li>File System : 文件系统</li>
</ul>
<p>1） 连接层</p>
<p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于 TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>
<p>2） 服务层</p>
<p>第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如 过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定表的查询的顺序，是否利用索引等， 最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存，如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>
<a id="more"></a>

<p>3） 引擎层</p>
<p>存储引擎层， 存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需要，来选取合适的存储引擎。</p>
<p>4）存储层</p>
<p>数据存储层， 主要是将数据存储在文件系统之上，并完成与存储引擎的交互。</p>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。主要体现在存储引擎上，插件式的存储引擎架构，将查询处理和其他的系统任务以及数据的存储提取分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<h3 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h3><blockquote>
<p>存储引擎就是<strong>存储数据，建立索引，更新查询数据</strong>等等技术的实现方式</p>
<ul>
<li>针对不同的存储需求可以选择最优的存储引擎。</li>
<li>存储引擎是基于表的，每张表可以使用不同存储引擎</li>
</ul>
</blockquote>
<h4 id="1、MySql存储引擎"><a href="#1、MySql存储引擎" class="headerlink" title="1、MySql存储引擎"></a>1、MySql存储引擎</h4><blockquote>
<p>MySQL提供了<strong>插件式</strong>的存储引擎架构。所以MySQL存在多种存储引擎，可以根据需要使用相应引擎，或者编写存储引擎</p>
<p>MySQL5.0支持的存储引擎包含 ： InnoDB 、MyISAM 、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、ARCHIVE、CSV、BLACKHOLE、FEDERATED等</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show engines;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201019220436964.png"></p>
<h4 id="2、存储引擎特性"><a href="#2、存储引擎特性" class="headerlink" title="2、存储引擎特性"></a>2、存储引擎特性</h4><table>
<thead>
<tr>
<th>特点</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>MEMORY</th>
<th>MERGE</th>
<th>NDB</th>
</tr>
</thead>
<tbody><tr>
<td>存储限制</td>
<td>64TB</td>
<td>有</td>
<td>有</td>
<td>没有</td>
<td>有</td>
</tr>
<tr>
<td>事务安全</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>锁机制</td>
<td>==行锁(适合高并发)==</td>
<td>==表锁==</td>
<td>表锁</td>
<td>表锁</td>
<td>行锁</td>
</tr>
<tr>
<td>B树索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>哈希索引</td>
<td></td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>支持(5.6版本之后)</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>集群索引</td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据索引</td>
<td>支持</td>
<td></td>
<td>支持</td>
<td></td>
<td>支持</td>
</tr>
<tr>
<td>索引缓存</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据可压缩</td>
<td></td>
<td>支持</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>空间使用</td>
<td>高</td>
<td>低</td>
<td>N/A</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>内存使用</td>
<td>高</td>
<td>低</td>
<td>中等</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>批量插入速度</td>
<td>低</td>
<td>高</td>
<td>高</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>支持外键</td>
<td>==支持==</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h5 id="2-1-InnoDB"><a href="#2-1-InnoDB" class="headerlink" title="2.1 InnoDB"></a>2.1 InnoDB</h5><blockquote>
<p>InnoDB存储引擎是Mysql的默认存储引擎</p>
</blockquote>
<blockquote>
<ul>
<li>InnoDB存储引擎提供了具有提交、回滚、崩溃恢复能力的<strong>事务</strong>安全</li>
<li>支持外键约束</li>
<li>行锁</li>
</ul>
</blockquote>
<h6 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h6><blockquote>
<p>在提交事务前，所有都会保存在事务日志中，事务日志得到commit命令才会同步到数据库中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table goods_innodb(</span><br><span class="line">	id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">	name varchar(20) NOT NULL,</span><br><span class="line">    primary key(id)</span><br><span class="line">)ENGINE&#x3D;innodb DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">start transaction;</span><br><span class="line">insert into goods_innodb(id,name)values(null,&#39;Meta20&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>



<h6 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h6><blockquote>
<p>MySQL支持外键的存储引擎只有InnoDB </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table country_innodb(</span><br><span class="line">	country_id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    country_name varchar(100) NOT NULL,</span><br><span class="line">    primary key(country_id)</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table city_innodb(</span><br><span class="line">	city_id int NOT NULL AUTO_INCREMENT,</span><br><span class="line">    city_name varchar(50) NOT NULL,</span><br><span class="line">    country_id int NOT NULL,</span><br><span class="line">    primary key(city_id),</span><br><span class="line">    key idx_fk_country_id(country_id),</span><br><span class="line">    CONSTRAINT &#96;fk_city_country&#96; FOREIGN KEY(country_id) REFERENCES country_innodb(country_id) ON DELETE RESTRICT ON UPDATE CASCADE</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">--  子表的外键指定是ON DELETE RESTRICT ON UPDATE CASCADE 方式的， 那么在主表删除记录的时候， 如果子表有对应记录， 则不允许删除， 主表在更新记录的时候， 如果子表有对应记录， 则子表对应更新 。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除主表外键：delete from country_innodb where country_id = 1;(失败)</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019144848845.png" alt="image-20201019144848845" style="zoom:80%;" />

<blockquote>
<p>更新主表外键：update country_innodb set country_id = 100 where country_id = 1;(子表对应记录也会更新)</p>
</blockquote>
<h6 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h6><blockquote>
<ul>
<li>使用<strong>共享表空间</strong>存储<ul>
<li>表结构保存在**.frm**文件中</li>
<li>数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。</li>
</ul>
</li>
<li>使用<strong>多表空间</strong>存储<ul>
<li>表结构存放 <strong>.frm</strong> 文件</li>
<li>每个表的数据和索引单独保存在 <strong>.ibd</strong> 中。</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>cd /var/lib/mysql/</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019162402194.png" alt="image-20201019162402194" style="zoom:80%;" />





<h5 id="2-2-MyISAM"><a href="#2-2-MyISAM" class="headerlink" title="2.2 MyISAM"></a>2.2 MyISAM</h5><blockquote>
<p>不支持事务、也不支持外键，其优势是<strong>访问速度快</strong></p>
<p>对事务的完整性没有要求或者以select、insert为主的应用基本上都可以使用这个引擎来创建表 </p>
</blockquote>
<h6 id="不支持事务"><a href="#不支持事务" class="headerlink" title="不支持事务"></a>不支持事务</h6><img src="https://csn.damyoung.cn/image-20201019224019740.png" alt="image-20201019224019740" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201019224042393.png" alt="image-20201019224042393" style="zoom:80%;" />

<h6 id="文件存储方式"><a href="#文件存储方式" class="headerlink" title="文件存储方式"></a>文件存储方式</h6><blockquote>
<p>.frm (存储表定义)；</p>
<p>.MYD(MYData , 存储数据)；</p>
<p>.MYI(MYIndex , 存储索引)；</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019174007327.png" alt="image-20201019174007327" style="zoom:80%;" />



<h5 id="2-3-Memory"><a href="#2-3-Memory" class="headerlink" title="2.3 Memory"></a>2.3 Memory</h5><blockquote>
<p>每个MEMORY表实际对应一个<strong>磁盘文件</strong>，格式是.frm ，该文件中只存储表的结构</p>
<p><strong>数据文件</strong>，都是存储在内存中，这样有利于数据的快速处理，提高整个表的效率。</p>
<p>默认使用<strong>hash索引</strong> ， 但是服务一旦关闭，表中的数据就会丢失。</p>
</blockquote>
<h5 id="2-4-Merge"><a href="#2-4-Merge" class="headerlink" title="2.4 Merge"></a>2.4 Merge</h5><blockquote>
<p><strong>MERGE存储引擎是一组MyISAM表的组合，这些MyISAM表结构必须完全相同</strong></p>
<p>MERGE表本身并没有存储数据，对MERGE类型的表可以进行select、update、delete操作，这些操作实际上是对内部的MyISAM表进行的。</p>
</blockquote>
<h6 id="2-4-1-插入"><a href="#2-4-1-插入" class="headerlink" title="2.4.1 插入"></a>2.4.1 插入</h6><blockquote>
<p>通过<strong>insert method</strong>子句定义插入的表</p>
<ul>
<li>使用<strong>first或 last</strong>值使得插入操作被相应地作用在第一或者最后一个表上</li>
<li>不定义这个子句或者定义为<strong>no</strong>，表示不能对这个MERGE表执行插入操作</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/1556076359503.png" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table order_1990(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">)engine &#x3D; myisam default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table order_1991(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">)engine &#x3D; myisam default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table order_all(</span><br><span class="line">	order_id int ,</span><br><span class="line">	order_money double(10,2),</span><br><span class="line">	order_address varchar(50),</span><br><span class="line">	primary key (order_id)</span><br><span class="line">    -- 插入选择最后一张表</span><br><span class="line">)engine &#x3D; merge union &#x3D; (order_1990,order_1991) insert method&#x3D;last --default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into order_1990 values(1,100.0,&#39;北京&#39;);</span><br><span class="line">insert into order_1990 values(2,100.0,&#39;上海&#39;);</span><br><span class="line"></span><br><span class="line">insert into order_1991 values(10,200.0,&#39;北京&#39;);</span><br><span class="line">insert into order_1991 values(11,200.0,&#39;上海&#39;);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019225024416.png" alt="image-20201019225024416" style="zoom:80%;" />

<blockquote>
<p>往order_all中插入一条记录 ，由于在MERGE表定义时，INSERT_METHOD 选择的是<strong>last</strong>，那么插入的数据会向最后一张表中插入。</p>
<p>insert into order_all values(100,10000.0,’西安’)；</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201019225435071.png" alt="image-20201019225435071" style="zoom:80%;" />

<h6 id="2-4-2-删除"><a href="#2-4-2-删除" class="headerlink" title="2.4.2 删除"></a>2.4.2 删除</h6><blockquote>
<p>这个操作只是<strong>删除MERGE表的定义，对内部的表是没有任何影响的</strong>。</p>
</blockquote>
<h4 id="3、存储引擎的选择"><a href="#3、存储引擎的选择" class="headerlink" title="3、存储引擎的选择"></a>3、存储引擎的选择</h4><ul>
<li>InnoDB <ul>
<li>是Mysql的默认存储引擎，用于事务处理应用程序，支持外键。</li>
<li>如果应用对事务的完整性有比较高的要求，在<strong>并发条件下要求数据的一致性</strong>，数据操作除了插入和查询以外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</li>
<li>InnoDB存储引擎除了<strong>有效的降低由于删除和更新导致的锁定</strong>， 还可以<strong>确保事务的完整提交和回滚</strong>，对于类似于计费系统或者财务系统等对<strong>数据准确性</strong>要求比较高的系统，InnoDB是最合适的选择。</li>
</ul>
</li>
<li>MyISAM ： 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li>
<li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供几块的访问。<ul>
<li>MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中</li>
<li>其次是要确保表的数据可以恢复，<strong>数据库异常终止后</strong>表中的数据是可以恢复的。</li>
<li>MEMORY表通常用于<strong>更新不太频繁的小表，用以快速得到访问结果。</strong></li>
</ul>
</li>
<li>MERGE：用于将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用他们。<ul>
<li>MERGE表的优点在于可以突破对单个MyISAM表的大小限制，并且通过<strong>将不同的表分布在多个磁盘上</strong>，可以<strong>有效的改善MERGE表的访问效率</strong>。这对于存储诸如<strong>数据仓储</strong>等VLDB环境十分合适</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库查询</title>
    <url>/2020/11/11/01%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="一、数据库DB"><a href="#一、数据库DB" class="headerlink" title="一、数据库DB"></a>一、数据库DB</h2><p><strong>数据库</strong>：存储和管理数据的仓库，按照有关规则组织起来，可以被各种用户或应用共享的数据集合</p>
<p><strong>数据库管理系统DBMS</strong>：用户通过数据库管理系统DBMS访问数据库中的数据</p>
<p>​        特点：<strong>持久化</strong>存储数据，本质上是一个文件系统，关系型数据库通过的SQL语句进行管理DBMS</p>
<p>关系型数据库：MySQL</p>
<p>非关系型数据库: </p>
<h2 id="二、MySQL"><a href="#二、MySQL" class="headerlink" title="二、MySQL"></a>二、MySQL</h2><h3 id="1、结构"><a href="#1、结构" class="headerlink" title="1、结构"></a>1、结构</h3><p>一个数据库服务器包含多个库，一个数据库包含多个表，一个表包含多条记录，一条记录包含多个字段</p>
<h3 id="2、SQL语句"><a href="#2、SQL语句" class="headerlink" title="2、SQL语句"></a>2、SQL语句</h3><p>（Structure Query Language）结构化查询语言 <strong>操作所有关系型数据</strong></p>
<h4 id="（1）分类"><a href="#（1）分类" class="headerlink" title="（1）分类"></a>（1）分类</h4><p>​        DDL：数据定义语言    <strong>create,drop,alter</strong></p>
<p>​        DML（manipulation）：数据操作语言 <strong>insert delete update</strong></p>
<p>​        DQL:   数据查询语言     <strong>select where</strong></p>
<p>​        DCL:   数据控制语言  定义数据库的访问权限和安全级别以及创建用户  <strong>grant revoke</strong></p>
<a id="more"></a>

<h4 id="（2）数据类型"><a href="#（2）数据类型" class="headerlink" title="（2）数据类型"></a>（2）数据类型</h4><p>​    int double(4,1)   time时间类型    date ( 年月日)  datetime（年月日时分秒）</p>
<p>​    timestamp:时间戳类型  yyyy-MM-dd HH:mm:ss  记录某个业务日期</p>
<p>​    varchar:可变长度字符串 name varchar(20) :姓名最大20个字符</p>
<p>​    blob( binary large object) 大二进制</p>
<h3 id="3、操作数据库"><a href="#3、操作数据库" class="headerlink" title="3、操作数据库"></a>3、操作数据库</h3><h4 id="（1）创建"><a href="#（1）创建" class="headerlink" title="（1）创建"></a>（1）创建</h4><p>​     <strong>create</strong> database if not exists 数据库名 character set gbk;  不存在时创建数据库并指定字符集</p>
<h4 id="（2）查询"><a href="#（2）查询" class="headerlink" title="（2）查询"></a>（2）查询</h4><p>   <strong>show</strong> database<strong>s</strong>;</p>
<p>   查询数据库的创建信息   show create database db1;</p>
<p>   当前正在操作的数据库  <strong>select</strong> database();</p>
<p>   使用命令切换当前正在使用的数据库 <strong>use</strong> 数据库名；</p>
<h4 id="（3）修改删除"><a href="#（3）修改删除" class="headerlink" title="（3）修改删除"></a>（3）修改删除</h4><p>​            <strong>alter</strong> database 数据库名  character <strong>set</strong> GBK；</p>
<p>​            <strong>drop</strong> database if exists 数据库名；</p>
<h3 id="4、操作表"><a href="#4、操作表" class="headerlink" title="4、操作表"></a>4、操作表</h3><h4 id="（1）DDL"><a href="#（1）DDL" class="headerlink" title="（1）DDL"></a>（1）DDL</h4><p>​    a、创建：<strong>create</strong> table 表名<strong>（</strong></p>
<p>​                                列名 1 数据类型1，</p>
<p>​                                列名2  数据类型2    ,    //最后一列不加逗号</p>
<p>​                                score DOUBLE(4,1),</p>
<p>​                                sname VARCHAR(50)</p>
<p>​                                <strong>）；</strong></p>
<p>​    创建一个相似的表：<strong>create</strong> table 表名2 <strong>like</strong> 表名；</p>
<p>​    b、查看 :     查看表结构  <strong>desc</strong> 表名</p>
<p>​                         查看当前数据库的所有表 show tables;</p>
<p>​    c、修改：   修改表名 <strong>alter</strong> table 表名 <strong><em>rename</em> <em>to</em></strong> 新表名</p>
<p>​                            alter table 表名 <strong>add</strong>  remark varchar(30);</p>
<p>​                            alter table 表名 <strong>change</strong> remark  intro varchar(20);</p>
<p>​                            alter table 表名 <strong>modify</strong>  intro varchar(130);</p>
<p>​    d、删除</p>
<p>​            删除一列：<strong>alter</strong> table student4 <strong>drop</strong> intro</p>
<p>​            删除表:       <strong>drop</strong> table if exists student4;</p>
<h4 id="（2）DML"><a href="#（2）DML" class="headerlink" title="（2）DML"></a>（2）DML</h4><h5 id="a、insert"><a href="#a、insert" class="headerlink" title="a、insert"></a>a、<strong>insert</strong></h5><p>​            1、列名和值一致</p>
<p>​            2、除了数字类型，其他类型需要使用引号引起来</p>
<p>​            3、默认值null</p>
<p>（1）所有字段都赋值</p>
<p>​        <strong>INSERT INTO</strong> student3(id,sname,age,score,birthday,mark) <strong>VALUES</strong>(1001,’张三’,20,90.5,’2000-11-10’,”英语”)</p>
<p>（2）部分字段赋值</p>
<p>​        INSERT INTO student3(id,sname,age) <strong>VALUES</strong> (1000,’李四’,12);</p>
<p>（3）省略字段名</p>
<p>​        INSERT INTO student3 <strong>VALUES</strong>(1001,’张三’,NULL,90.5,’2000-11-10’,”英语”)</p>
<p>（4）一次添加多条记录</p>
<p>INSERT INTO student3 **VALUES(**1001,’张三’,20,90.5,’2000-11-10’,”英语”),(1001,’张三’,20,90.5,’2000-11-10’,”英语”)</p>
<h5 id="b、delete"><a href="#b、delete" class="headerlink" title="b、delete"></a>b、<strong>delete</strong></h5><p>​            <strong>delete from</strong>  xx <strong>where</strong> score&gt;=90;</p>
<p>​        不加条件，则删除表中所有记录    </p>
<p>​        <strong>truncate</strong> table student; 一次删除       <strong>delete from xx</strong>; 一次记录删除一次</p>
<h5 id="c、update"><a href="#c、update" class="headerlink" title="c、update"></a>c、<strong>update</strong></h5><p>​        <strong>UPDATE</strong> student3 <strong>SET</strong> score=90,age=22,birthday=’1998-05-12’ <strong>WHERE</strong> id=1002;</p>
<h4 id="（3）DQL"><a href="#（3）DQL" class="headerlink" title="（3）DQL"></a>（3）DQL</h4><p><strong>select from where group by  having order by limit</strong></p>
<p><strong>select</strong>：查询（<strong>列</strong>）</p>
<p>不会对数据库中的数据进行修改，从数据库发送结果给客户端，是虚拟的表</p>
<p><strong>查询表格字段</strong>    SELECT *****FROM stu;</p>
<p><strong>查询指定列</strong>     SELECT sname,age FROM stu;</p>
<p><strong>消除重复</strong>      select <strong>distinct</strong> job from emp;</p>
<p><strong>计算列</strong>          SELECT ename <strong>AS</strong> 姓名,sal AS 薪资,comm AS 奖金,<strong>comm+sal</strong> <strong>AS</strong> 月收入 FROM emp;</p>
<p><strong>IFNULL（comm,0）</strong>：将null视为0      SELECT comm,<strong>IFNULL(comm,0)</strong> FROM emp;</p>
<p><strong>列的别名</strong>       SELECT ename AS 姓名,sal AS 薪资,comm AS 奖金,IFNULL(comm,0)+sal AS 月收入 FROM emp;</p>
<p><strong>行列同时筛选</strong>    SELECT id,studentname,age FROM student WHERE age&gt;=20;</p>
<p><strong>条件查询where</strong> <strong>（行）</strong></p>
<p>SELECT <em>FROM student WHERE age&gt;=20;<br>SELECT <em>FROM student WHERE age</em></em>&lt;&gt;**20;    – 不等于20<br>SELECT *FROM student WHERE age!=20;</p>
<p><strong>not</strong></p>
<p>SELECT *FROM student <strong>WHERE</strong> <strong>NOT</strong> age=20;</p>
<p><strong>and</strong><br>SELECT *FROM student WHERE age&gt;20 <strong>AND</strong> age&lt;30;<br>SELECT *FROM student WHERE age&gt;=20 <strong>&amp;&amp;</strong> age&lt;30;</p>
<p><strong>between</strong> <strong>and</strong></p>
<p>SELECT *FROM student WHERE age <strong>BETWEEN</strong> 20 <strong>AND</strong> 30;</p>
<p><strong>or</strong></p>
<p>SELECT *FROM student WHERE age=20 <strong>OR</strong> age=18 <strong>OR</strong> age =45;</p>
<p><strong>in</strong></p>
<p>SELECT *FROM student WHERE age <strong>IN(20,18,45);</strong></p>
<p><strong>is</strong></p>
<p>SELECT *FROM student WHERE english <strong>IS</strong> NULL;</p>
<p>SELECT *FROM student WHERE english <strong>IS</strong> <strong>not</strong> NULL;</p>
<h4 id="（4）通配符"><a href="#（4）通配符" class="headerlink" title="（4）通配符"></a><strong>（4）通配符</strong></h4><p>下划线  <strong>_</strong>：代表一个字符</p>
<p>百发号**%**:代表至少一个字符</p>
<p>查询第二个字为德的同学     SELECT *FROM student <strong>WHERE</strong> studentname <strong>LIKE</strong> ‘_德%’;</p>
<h4 id="（5）聚合函数"><a href="#（5）聚合函数" class="headerlink" title="（5）聚合函数"></a>（5）<strong>聚合函数</strong></h4><p><strong>选择非空的列</strong></p>
<p><strong>count(列名)、max 、min 、sum、avg</strong></p>
<p>查询员工人数    count(*)</p>
<p>SELECT COUNT(empno) FROM emp;</p>
<p>SELECT COUNT(*) FROM emp;</p>
<p>查询工资总额    SELECT SUM(sal) FROM emp;</p>
<p>平均工资   SELECT AVG(sal) FROM emp;</p>
<p>最大工资   SELECT MAX(sal) FROM emp;</p>
<p>总月收入</p>
<p>SELECT SUM(sal+IFNULL(comm,0)) FROM emp;</p>
<p>SELECT SUM(sal)+SUM(comm)FROM emp;</p>
<h4 id="（6）分组查询"><a href="#（6）分组查询" class="headerlink" title="（6）分组查询"></a>（6）分组查询</h4><p><strong>group by之后查询的字段，分组字段、聚合函数</strong></p>
<h5 id="a、单组"><a href="#a、单组" class="headerlink" title="a、单组"></a>a、单组</h5><p><strong>查询男女各自的人数</strong>       SELECT gender AS 性别,COUNT(*) AS 人数 FROM student <strong>GROUP BY</strong> gender;</p>
<p>按照性别分组，分别查询男、女同学的数学平均分，人数，要求:分数低于70，不参与分组<br>SELECT gender,AVG(math),COUNT(*) FROM student WHERE math&gt;=70 GROUP BY gender;</p>
<h5 id="b、having和where"><a href="#b、having和where" class="headerlink" title="b、having和where"></a>b、<strong>having和where</strong></h5><p>a、where 在分组前进行限定，having在分组后进行限定</p>
<p>b、where 后不可以跟聚合函数，having可以进行聚合函数的判断</p>
<p> 按照性别分组，分别查询男、女同学的数学平均分，人数，要求:分数低于70，不参与分组<br>SELECT gender,AVG(math),COUNT(*) FROM student <strong>WHERE</strong> math&gt;=70 <strong>GROUP BY</strong> gender;</p>
<p> 查询各个部门的人数，只显示人数大于8个的部门<br>SELECT deptno,COUNT(*) FROM emp <strong>GROUP BY</strong> deptno <strong>HAVING</strong> COUNT（ * ）&gt;8;</p>
<p>查询每个部门的部门编号以及每个部门工资大于1500的人数<br>SELECT deptno,COUNT(*) FROM emp <strong>WHERE</strong> sal&gt;1500 <strong>GROUP BY</strong> deptno;</p>
<h5 id="c、多组分组"><a href="#c、多组分组" class="headerlink" title="c、多组分组"></a>c、多组分组</h5><p>查询某个专业的某门课程的总分,平均</p>
<p>SELECT speciality,coursename,SUM(score),AVG(score) FROM scores,course,studentinfo WHERE<br>scores.courseno=course.courseno AND scores.studentno=studentinfo.studentno<br><strong>GROUP BY speciality,coursename</strong>;</p>
<h4 id="（7）排序"><a href="#（7）排序" class="headerlink" title="（7）排序"></a>（7）排序</h4><h5 id="a、单组-1"><a href="#a、单组-1" class="headerlink" title="a、单组"></a>a、单组</h5><p><strong>order by 排序字段 排序方式</strong></p>
<p><strong>descend降序   ascend升序</strong></p>
<p>按年龄升序排序,默认升序       SELECT <em>FROM student <strong>ORDER BY</strong> age <strong>ASC</strong>;<br>按年龄降序排序                       SELECT *FROM student *</em>ORDER BY** age <strong>DESC</strong>;</p>
<h5 id="b、多组排序"><a href="#b、多组排序" class="headerlink" title="b、多组排序"></a>b、多组排序</h5><p>*<em>年龄降序，相同年龄按数学成绩降序<br>SELECT *FROM student *</em>ORDER BY <strong>age DESC,math DESC</strong>;</p>
<h4 id="（8）分页"><a href="#（8）分页" class="headerlink" title="（8）分页"></a>（8）分页</h4><p><strong>limit</strong></p>
<p>SELECT *FROM emp <strong>LIMIT</strong> 0,3;    – 第一页 (pageno-1)*pagesize<br>SELECT *FROM emp LIMIT 3,3;    – 第二页<br>SELECT *FROM emp LIMIT 6,3;<br>SELECT *FROM emp LIMIT 9,3;<br>SELECT *FROM emp LIMIT 12,3;（8）顺序</p>
<p>select  from  where    group by   having  order by   limit</p>
<p><img src="https://csn.damyoung.cn/image-20200818203308220.png" alt="image-20200818203308220"></p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>约束</title>
    <url>/2020/11/11/02%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h2 id="一、约束"><a href="#一、约束" class="headerlink" title="一、约束"></a>一、约束</h2><p>对表中数据进行限制，保证数据的正确性、有效性和完整性</p>
<h3 id="1、主键约束"><a href="#1、主键约束" class="headerlink" title="1、主键约束"></a>1、主键约束</h3><p>a、主键只能设置一个，可以是单列或者多列</p>
<p>b、主键不能重复</p>
<p>c、primary key 用来唯一标识数据库中的每一条记录</p>
<p><strong>特点</strong>：<strong>非空not null , 唯一unique</strong></p>
<h4 id="（1）创建表时"><a href="#（1）创建表时" class="headerlink" title="（1）创建表时"></a>（1）创建表时</h4><p>字段名 字段类型 primary key</p>
<h4 id="（2）已有表中添加主键"><a href="#（2）已有表中添加主键" class="headerlink" title="（2）已有表中添加主键"></a>（2）已有表中添加主键</h4><p><strong>alter table student add primary key(id );</strong></p>
<p><strong>删除主键</strong>     alter table str5 <strong>drop</strong> primary key;</p>
<h4 id="（3）主键自增"><a href="#（3）主键自增" class="headerlink" title="（3）主键自增"></a>（3）主键自增</h4><p><strong>创建表时</strong>  create table 表名(</p>
<p>字段名  字段类型 primary key  <strong>auto_increment</strong></p>
<p>)auto_increment=初始值（默认为1）；</p>
<p><strong>修改表，添加自增长</strong>：alter table 表名 <strong>modify</strong> id int primary key auto_increment;</p>
<p><strong>修改起始值</strong>   alter table 表名 <strong>auto_increment</strong>=2000; </p>
<h4 id="（4）联合主键"><a href="#（4）联合主键" class="headerlink" title="（4）联合主键"></a>（4）联合主键</h4><p>create table scores(</p>
<p>studentno varchar(22),</p>
<p>courseno int,</p>
<p>score int,</p>
<p><strong>primary key(studentno，id.</strong>)</p>
<p>);</p>
<h3 id="2、唯一约束"><a href="#2、唯一约束" class="headerlink" title="2、唯一约束"></a>2、唯一约束</h3><p>unique 表中某一列出现重复的值</p>
<p><strong>创建表时添加唯一约束</strong></p>
<p>create table 表名(</p>
<p>​    age int  unique,</p>
<p>​    name varchar(20)</p>
<p>);</p>
<p><strong>已有表添加唯一约束</strong></p>
<p>alter table st4 <strong>modify</strong> name varchar(20) unique;</p>
<h3 id="3、非空约束"><a href="#3、非空约束" class="headerlink" title="3、非空约束"></a>3、非空约束</h3><p><strong>创建表时添加唯一约束</strong></p>
<p>create table 表名(</p>
<p>​    age int  not null,</p>
<p>​    name varchar(20)</p>
<p>);</p>
<p><strong>已有表添加唯一约束</strong></p>
<p>alter table st4 modify name varchar(20) not null;</p>
<h3 id="4、默认值约束"><a href="#4、默认值约束" class="headerlink" title="4、默认值约束"></a>4、默认值约束</h3><p>字符段 字符类型  <strong>default</strong>   默认值</p>
<p>insert into 表名 values(18,’欧’,default);</p>
<p>insert into 表名 （age,name）values(18,’是’)</p>
<p>alter table st4 modify name varchar(20) default ‘看看’;</p>
<h3 id="5、外键约束"><a href="#5、外键约束" class="headerlink" title="5、外键约束"></a>5、外键约束</h3><p>让表于表产生关系，从而保证数据的正确性</p>
<p><img src="https://csn.damyoung.cn/image-20200818175138467.png" alt="image-20200818175138467"></p>
<p><strong>主表和从表设置主键约束，从表创建约束</strong></p>
<p><strong>新建表时增加外键</strong></p>
<p>constraint 外键约束名称  foreign key(外键字段名) references 主表名(主键约束名)</p>
<p>CREATE TABLE emp2(<br>empno INT <strong>PRIMARY KEY AUTO_INCREMENT</strong>,<br>ename VARCHAR(20),<br>deptno INT,<br><strong>CONSTRAINT fk_emp2_deptno FOREIGN KEY(deptno) REFERENCES dept2(deptno)</strong><br>);</p>
<p><strong>已有表增加外键</strong></p>
<p><strong>alter table 从表 add constraint 外键约束名称 foreign key(外键字段名) references 主表名(主表外键约束字段名)</strong></p>
<p>ALTER TABLE emp2 ADD CONSTRAINT fk_emp2_deptno FOREIGN KEY(deptno) REFERENCES dept2(deptno);</p>
<p><strong>删除外键</strong></p>
<p>alter table <strong>从表</strong> <strong>drop foreign key</strong> 外键约束名；</p>
<h3 id="6、外键的级联操作"><a href="#6、外键的级联操作" class="headerlink" title="6、外键的级联操作"></a>6、外键的级联操作</h3><p><strong>修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</strong></p>
<p><strong>on update cascade, on delete cascade</strong></p>
<p>CONSTRAINT fk_emp22_dept22 FOREIGN KEY(deptno)REFERENCES dept22(deptno) <strong>ON UPDATE CASCADE ON  DELETE CASCADE</strong></p>
<h3 id="7、外键操作"><a href="#7、外键操作" class="headerlink" title="7、外键操作"></a>7、外键操作</h3><blockquote>
<p>都是用来限制父表操作的外键操作</p>
</blockquote>
<blockquote>
<p>restrict/no action : 在子表有关联记录的情况下，父表不能更新。</p>
<p>cascade：父表在更新或删除时，更新或删除子表对应的记录</p>
<p>set null ：父表在更新或删除时，子表的对应被set null</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20200819184051135.png" alt="image-20200819184051135"></p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>多表查询</title>
    <url>/2020/11/11/03%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="1、多表查询"><a href="#1、多表查询" class="headerlink" title="1、多表查询"></a>1、多表查询</h3><p><strong>union all</strong> (加法)</p>
<p>列数、列类型必须相同</p>
<p>SELECT *FROM t1 <strong>UNION</strong> SELECT <em>FROM t2;<br>SELECT *FROM t1 *</em>UNION ALL** SELECT *FROM t2;</p>
<h3 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h3><p>select *from <strong>emp,dept</strong> –笛卡尔积</p>
<h4 id="（1）选出有用的数据"><a href="#（1）选出有用的数据" class="headerlink" title="（1）选出有用的数据"></a>（1）<strong>选出有用的数据</strong></h4><p><strong>有外键连接</strong></p>
<p>SELECT *FROM emp,dept <strong>WHERE</strong> <strong>emp.deptno=dept.deptno</strong>;</p>
<p>查询各个部门的人数，求显示部门名称，人数，只显示三个人以上的部门<br>SELECT dname,COUNT(<em>) FROM <strong>emp,dept</strong> <strong>WHERE emp.deptno=dept.deptno</strong> <strong>GROUP BY</strong> dname HAVING COUNT(</em>)&gt;3;</p>
<h4 id="（2）三表连接查询"><a href="#（2）三表连接查询" class="headerlink" title="（2）三表连接查询"></a>（2）三表连接查询</h4><p><strong>select</strong> scores.studentno,studentname,scores.courseno,coursename,score <strong>from</strong> <strong>scores</strong>,<strong>studnetinfo</strong>,<strong>course</strong>  <strong>where</strong> scores.studentno=studentinfo.studentno <strong>and</strong> scores.courseno=course.courseno</p>
<p><strong>select</strong> scores.studentno,studentname,scores.courseno,coursename,score <strong>from</strong> scores <strong>innere</strong> <strong>join</strong> studentinfro <strong>on</strong> scores.studentno=studentifno.studentno <strong>inner</strong> <strong>join</strong> course <strong>on</strong> scores.courseno = course.courseno;</p>
<h4 id="（3）不等查询"><a href="#（3）不等查询" class="headerlink" title="（3）不等查询"></a>（3）不等查询</h4><p><strong>无外键连接</strong></p>
<p>查询各个员工的编号，姓名，职位，工资，工资等级<br>SELECT empno,ename,job,sal,grade <strong>FROM</strong> emp,salarygrade *<em>WHERE sal&gt;=losalary AND sal&lt;hisalary**</em>;*</p>
<h3 id="3、内连接"><a href="#3、内连接" class="headerlink" title="3、内连接"></a>3、内连接</h3><p>组合两个表中的记录，返回关联字段相符的记录，也就是<strong>返回两个表的交集（阴影）部分</strong></p>
<p><strong>inner join</strong></p>
<p>SELECT empno,ename,job,e.deptno,dname FROM emp e <strong>INNER JOIN</strong> dept d <strong>ON</strong> e.deptno=d.deptno;</p>
<h3 id="4、外连接"><a href="#4、外连接" class="headerlink" title="4、外连接"></a>4、外连接</h3><p><strong>outer join</strong></p>
<h4 id="（1）左外连接"><a href="#（1）左外连接" class="headerlink" title="（1）左外连接"></a>（1）左外连接</h4><p><strong>left outer join</strong></p>
<p><strong>左表不符合条件的也显示出来</strong>–null</p>
<p>SELECT empno,ename,job,e.deptno,dname FROM emp e <strong>left outer join</strong> dept d <strong>ON</strong> e.deptno=d.deptno;</p>
<h4 id="（2）右外连接"><a href="#（2）右外连接" class="headerlink" title="（2）右外连接"></a>（2）右外连接</h4><p><strong>right outer join</strong></p>
<p><strong>右表不符合条件的也显示出来</strong></p>
<p>SELECT empno,ename,job,e.deptno,dname FROM emp e <strong>right outer join</strong> dept d <strong>ON</strong> e.deptno=d.deptno;</p>
<h3 id="5、自然连接"><a href="#5、自然连接" class="headerlink" title="5、自然连接"></a>5、自然连接</h3><p><strong>两个关系表中进行连接的必须是相同的属性列（名字相同），无须添加连接条件，并且在结果中消除重复的属性列。</strong></p>
<p>select *from emp <strong>natural</strong> <strong>join</strong> dept; </p>
<table>
<thead>
<tr>
<th>denptno(连接)</th>
<th>deptname</th>
<th>deptssss</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>sss</td>
<td>44</td>
</tr>
<tr>
<td>2</td>
<td>sss11</td>
<td>4442</td>
</tr>
<tr>
<td>3</td>
<td>fs</td>
<td>2424</td>
</tr>
</tbody></table>
<h3 id="6、子查询"><a href="#6、子查询" class="headerlink" title="6、子查询"></a>6、子查询</h3><h4 id="（1）子查询结果为单行单列"><a href="#（1）子查询结果为单行单列" class="headerlink" title="（1）子查询结果为单行单列"></a>（1）子查询结果为单行单列</h4><p>SELECT deptno FROM dept WHERE dname=’SALES’;</p>
<p>SELECT*FROM emp WHERE deptno=30;</p>
<p>一步完成</p>
<p>SELECT *FROM emp WHERE <strong>deptno=</strong>(SELECT deptno FROM dept WHERE dname=’SALES’);</p>
<p>使用俩表连接</p>
<p>SELECT emp.*FROM emp I<strong>NNER JOIN</strong> dept <strong>ON</strong> emp.deptno=dept.deptno <strong>WHERE</strong> dname=’SALES’;</p>
<h4 id="（2）子查询结果为单列多行"><a href="#（2）子查询结果为单列多行" class="headerlink" title="（2）子查询结果为单列多行"></a>（2）子查询结果为单列多行</h4><p>查询工资大于3000的员工，来自哪些部门的名字<br>SELECT deptno FROM emp WHERE sal&gt;2000;—&gt;10,20,30<br>SELECT dname FROM dept WHERE deptno IN (10,20,30);</p>
<p>SELECT dname FROM dept <strong>WHERE</strong> deptno <strong>IN</strong>(SELECT deptno FROM emp WHERE sal&gt;2000);</p>
<h4 id="（3）子查询结果为多行多列"><a href="#（3）子查询结果为多行多列" class="headerlink" title="（3）子查询结果为多行多列"></a>（3）子查询结果为多行多列</h4><p><strong>找出虚拟表，并当成俩表连接查询</strong></p>
<p>select 查询字段 from(子查询) 表别名 where 条件.3</p>
<p>查询出2011年以后入职的员工<br>SELECT *FROM emp WHERE hiredate&gt;=’1982-1-1’;</p>
<p>SELECT e.<em>,d.dname FROM dept d,(**SELECT <em>FROM emp WHERE hiredate&gt;=’1982-1-1</em></em>‘) e <strong>WHERE d.deptno=e.deptno;</strong>  </p>
<p>例子：– 有俩个直接下属的员工信息<br>SELECT mgr,COUNT(*) FROM emp GROUP BY mgr;</p>
<p>– 1有俩个下属以上<br>SELECT mgr FROM emp GROUP BY mgr HAVING COUNT(*)&gt;2;</p>
<p>– 查询以上俩个编号的员工信息<br>SELECT <em>FROM emp WHERE empno IN(SELECT mgr FROM emp GROUP BY mgr HAVING COUNT(</em>)&gt;2);</p>
<h3 id="7、自连接"><a href="#7、自连接" class="headerlink" title="7、自连接"></a>7、自连接</h3><p><strong>单表</strong></p>
<p>求7369员工编号、姓名、经理编号和经理姓名</p>
<p>SELECT e1.empno,e1.ename,e1.mgr,e2.ename FROM emp e1,emp e2 WHERE <strong>e1.mgr=e2.empno</strong> AND e1.empno=7369;</p>
<h3 id="8、备份与还原"><a href="#8、备份与还原" class="headerlink" title="8、备份与还原"></a>8、备份与还原</h3><p>备份格式：dos: mysqldump -u用户名 -p密码 数据库&gt;文件的路径</p>
<p>还原格式：mysql中的命令，需要登录后操作</p>
<p>​                    <strong>use 数据库； source 导入文件的路径</strong></p>
<p><img src="https://csn.damyoung.cn/image-20200819180155720.png" alt="image-20200819180155720"></p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/2020/11/11/04%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组SQL语句组成的逻辑处理单元，事务执行是一个整体，<strong>所有SQL语句都必须执行成功</strong></p>
<h3 id="1、手动提交事务"><a href="#1、手动提交事务" class="headerlink" title="1、手动提交事务"></a>1、手动提交事务</h3><p>开启事务 start transaction</p>
<p>提交事务 commit</p>
<p>回滚事务 rollback：回退到开启事务时的状态</p>
<h3 id="2、自动提交事务"><a href="#2、自动提交事务" class="headerlink" title="2、自动提交事务"></a>2、自动提交事务</h3><p>每一条<strong>insert、update、delete</strong>都会默认构成一条事务，会自动提交，永久改变数据库</p>
<h3 id="3、执行过程"><a href="#3、执行过程" class="headerlink" title="3、执行过程"></a>3、执行过程</h3><h4 id="（1）执行成功"><a href="#（1）执行成功" class="headerlink" title="（1）执行成功"></a>（1）执行成功</h4><p>开启事务–&gt;执行多条SQL语句–&gt;成功提交事务</p>
<h4 id="（2）执行失败"><a href="#（2）执行失败" class="headerlink" title="（2）执行失败"></a>（2）执行失败</h4><p>开启事务–&gt;执行多条SQL语句–&gt;事务回滚</p>
<p><strong>回滚事务即是结束</strong></p>
<p><strong>select @@autocommit;  自动提交 1，</strong></p>
<p><strong>set @@autocommit =0;</strong></p>
<h3 id="4、事务原理"><a href="#4、事务原理" class="headerlink" title="4、事务原理"></a>4、事务原理</h3><p>事务开启后，所有的操作会保存到事务日志中，事务日志只有得到commit命令才会同步到数据库中，</p>
<p>其他任何情况都会清空事务日志（rollback，断开连接）</p>
<h3 id="5、回滚点"><a href="#5、回滚点" class="headerlink" title="5、回滚点"></a>5、回滚点</h3><p>设置回滚点：<strong>savepoint 名字</strong></p>
<p>回到回滚点：<strong>rollback to 名字；</strong></p>
<h3 id="6、事务的特性"><a href="#6、事务的特性" class="headerlink" title="6、事务的特性"></a>6、事务的特性</h3><table>
<thead>
<tr>
<th>ACID属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>原子性（Atomicity）</td>
<td>事务是一个原子操作单元，其对数据的修改，要么全部成功，要么全部失败。</td>
</tr>
<tr>
<td>一致性（Consistent）</td>
<td>在事务开始和完成时，数据都必须保持一致状态。</td>
</tr>
<tr>
<td>隔离性（Isolation）</td>
<td>数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境下运行。</td>
</tr>
<tr>
<td>持久性（Durable）</td>
<td>事务完成之后，对于数据的修改是永久的。</td>
</tr>
</tbody></table>
<p><strong>并发事务处理带来的问题</strong></p>
<table>
<thead>
<tr>
<th>问题</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>丢失更新（Lost Update）</td>
<td>当两个或多个事务选择同一行，最初的事务修改的值，会被后面的事务修改的值覆盖。</td>
</tr>
<tr>
<td>脏读（Dirty Reads）</td>
<td>当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</td>
</tr>
<tr>
<td>不可重复读（Non-Repeatable Reads）</td>
<td>一个事务在读取某些数据后的某个时间，再次读取以前读过的数据，却发现和以前读出的数据不一致。数据内容不一致，update引起的</td>
</tr>
<tr>
<td>幻读（Phantom Reads）</td>
<td>一个事务按照相同的查询条件重新读取以前查询过的数据，却发现其他事务插入了满足其查询条件的新数据。数据的数量不一致，是insert/delete引起的</td>
</tr>
</tbody></table>
<p><strong>隔离级别越高，性能越差，安全性越高，效率越低</strong></p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>丢失更新</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommitted</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read committed(Oracke和SQL Server)</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable read（MySql默认）</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable串行化</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p><strong>设置隔离级别</strong> ：<strong>set global transaction isolation level —;</strong></p>
<p><strong>查看隔离级别</strong>：<strong>select @@tx_isolation;</strong> </p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql锁</title>
    <url>/2020/11/11/05%E9%94%81&amp;%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="一、Mysql并发参数调整"><a href="#一、Mysql并发参数调整" class="headerlink" title="一、Mysql并发参数调整"></a>一、Mysql并发参数调整</h3><blockquote>
<p>MySql Server是多线程结构，包括后台线程和客户服务线程。</p>
<p>多线程有效利用服务器资源，对并发参数的调优，提高数据库的并发性能。</p>
</blockquote>
<h5 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h5><blockquote>
<p>允许连接到MySQL数据库的最大数量，默认值是 151.</p>
<p>如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这是可以考虑增大max_connections 的值。</p>
<p>最大支持连接数取决于，操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等</p>
</blockquote>
<h5 id="back-log"><a href="#back-log" class="headerlink" title="back_log"></a><strong>back_log</strong></h5><blockquote>
<p>控制MySQL监听TCP端口时设置的<strong>积压请求栈大小</strong></p>
<p>MySql的连接数<strong>达到max_connections</strong>时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量<strong>超过</strong>back_log，将不被授予连接资源，将会报错</p>
</blockquote>
<blockquote>
<p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p>
</blockquote>
<h5 id="table-open-cache"><a href="#table-open-cache" class="headerlink" title="table_open_cache"></a>table_open_cache</h5><blockquote>
<p>用来控制所有SQL语句执行线程可打开<strong>表缓存的数量</strong></p>
<p>执行SQL语句时，<strong>每一个SQL执行线程</strong>至少要打开 1 个表缓存</p>
<p>值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表 N 的最大数量来设定 ：max_connections x N </p>
</blockquote>
<h5 id="thread-cache-size"><a href="#thread-cache-size" class="headerlink" title="thread_cache_size"></a>thread_cache_size</h5><blockquote>
<p>为了加快连接数据库的速度，MySQL 会缓存一定数量的<strong>客户服务线程</strong>以备重用</p>
<p>thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。</p>
</blockquote>
<h5 id="innodb-lock-wait-timeout"><a href="#innodb-lock-wait-timeout" class="headerlink" title="innodb_lock_wait_timeout"></a>innodb_lock_wait_timeout</h5><blockquote>
<p>设置InnoDB 事务<strong>等待行锁的时间</strong>，默认值是50ms ， 可以根据需要进行动态设置</p>
<ul>
<li>对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； </li>
<li>对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</li>
</ul>
</blockquote>
<h3 id="二、MySql锁"><a href="#二、MySql锁" class="headerlink" title="二、MySql锁"></a>二、MySql锁</h3><blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p>
</blockquote>
<blockquote>
<p>如何保证数据<strong>并发访问的一致性、有效性</strong>是所有数据库必须解决的一个问题，<strong>锁冲突</strong>也是影响数据库并发访问性能的一个重要因素</p>
</blockquote>
<h4 id="1、锁分类"><a href="#1、锁分类" class="headerlink" title="1、锁分类"></a>1、锁分类</h4><blockquote>
<p>对数据操作的粒度</p>
</blockquote>
<ul>
<li>表锁：操作时，会锁定整个表</li>
<li>行锁：操作时，会锁定当前操作行</li>
</ul>
<blockquote>
<p>数据操作的类型</p>
</blockquote>
<ul>
<li><p>读锁(共享)：针对同一份数据，多个读操作可以同时进行而不会互相影响。</p>
</li>
<li><p>写锁(互斥)：当前操作没有完成之前，它会阻断其他写锁和读锁。</p>
</li>
</ul>
<h4 id="2、MySql锁"><a href="#2、MySql锁" class="headerlink" title="2、MySql锁"></a>2、MySql锁</h4><blockquote>
<p>表级锁更适合于<strong>以查询为主，只有少量按索引条件更新数据</strong>的应用，如Web 应用；</p>
<p>行级锁则更适合于有大量<strong>按索引条件</strong>并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</p>
</blockquote>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>表级锁</th>
<th>行级锁</th>
<th>页面锁</th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>InnoDB</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>MEMORY</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>BDB</td>
<td>支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>锁类型</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>表级锁</td>
<td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td>
</tr>
<tr>
<td>行级锁</td>
<td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td>
</tr>
<tr>
<td>页面锁</td>
<td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td>
</tr>
</tbody></table>
<h4 id="3、MyISAM表锁"><a href="#3、MyISAM表锁" class="headerlink" title="3、MyISAM表锁"></a>3、MyISAM表锁</h4><blockquote>
<p>MyISAM 存储引擎只支持表锁</p>
</blockquote>
<h5 id="5-3-1-加锁"><a href="#5-3-1-加锁" class="headerlink" title="5.3.1 加锁"></a>5.3.1 加锁</h5><blockquote>
<p><strong>自动加锁，不需要显式加锁</strong>(LOCK TABLE)</p>
<ul>
<li><p>执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，</p>
</li>
<li><p>执行更新操作（UPDATE、DELETE、INSERT 等）前，会自动给涉及的表加写锁，</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加读锁 ： lock table table_name read;</span><br><span class="line"></span><br><span class="line">加写锁 ： lock table table_name write；</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>并发读(读锁只能存在一个)，互斥写</strong></p>
</blockquote>
<h5 id="5-3-2-测试"><a href="#5-3-2-测试" class="headerlink" title="5.3.2 测试"></a>5.3.2 测试</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database demo_03 default charset&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_03;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb_book&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) auto_increment,</span><br><span class="line">  &#96;name&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">  &#96;publish_time&#96; DATE DEFAULT NULL,</span><br><span class="line">  &#96;status&#96; CHAR(1) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;myisam DEFAULT CHARSET&#x3D;utf8 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,&#39;java编程思想&#39;,&#39;2088-08-01&#39;,&#39;1&#39;);</span><br><span class="line">INSERT INTO tb_book (id, name, publish_time, status) VALUES(NULL,&#39;solr编程思想&#39;,&#39;2088-08-08&#39;,&#39;0&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb_user&#96; (</span><br><span class="line">  &#96;id&#96; INT(11) auto_increment,</span><br><span class="line">  &#96;name&#96; VARCHAR(50) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;myisam DEFAULT CHARSET&#x3D;utf8 ;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;令狐冲&#39;);</span><br><span class="line">INSERT INTO tb_user (id, name) VALUES(NULL,&#39;田伯光&#39;);</span><br></pre></td></tr></table></figure>

<h6 id="读锁"><a href="#读锁" class="headerlink" title="读锁"></a>读锁</h6><blockquote>
<p><strong>加上读锁，不会阻塞其他线程的读操作，会阻塞写操作</strong></p>
</blockquote>
<blockquote>
<ul>
<li><p>对book表加锁，无法访问user等其他表===&gt;读锁只能存在一个</p>
</li>
<li><p>其他session也可以进行对book表进行读操作===&gt;并发读</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201022083945876.png" alt="image-20201022083945876" style="zoom:80%;" />

<blockquote>
<p>book表加上<strong>读锁</strong>，无法进行更新操作，其他客户端对该表进行更新操作也会进入阻塞状态。==&gt;互斥写</p>
</blockquote>
<h6 id="写锁"><a href="#写锁" class="headerlink" title="写锁"></a>写锁</h6><blockquote>
<p><strong>写锁阻塞其他线程的读操作和写操作，对本线程写锁表才可进行读写操作</strong></p>
</blockquote>
<h5 id="5-3-3-结论"><a href="#5-3-3-结论" class="headerlink" title="5.3.3 结论"></a>5.3.3 结论</h5><ul>
<li><p>MyISAM 表的读操作，不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写请求，也会阻塞本用户对其他表读操作；</p>
</li>
<li><p>对MyISAM 表的写操作，则会阻塞其他用户对同一表的读和写操作；</p>
</li>
</ul>
<p>​    简而言之，就是<strong>读锁会阻塞写，但是不会阻塞读。而写锁，则既会阻塞读，又会阻塞写。</strong></p>
<blockquote>
<p>此外，MyISAM 的读写锁调度是<strong>写优先</strong>，这也是MyISAM不适合做写为主的表的存储引擎的原因。</p>
<p>因为<strong>写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</strong></p>
</blockquote>
<h5 id="5-3-4-查看锁的争用情况"><a href="#5-3-4-查看锁的争用情况" class="headerlink" title="5.3.4 查看锁的争用情况"></a>5.3.4 查看锁的争用情况</h5><blockquote>
<p>In_user : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。</p>
<p>Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show open tables;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Table_locks_immediate ： 指的是能够立即获得表级锁的次数，每立即获取锁，值加1。</p>
<p>Table_locks_waited ： 指的是不能立即获取表级锁而需要等待的次数，每等待一次，该值加1，此值高说明存在着较为严重的表级锁争用情况。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Table_locks%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022092559705.png" alt="image-20201022092559705" style="zoom:80%;" />

<h4 id="4、InnoDB行锁"><a href="#4、InnoDB行锁" class="headerlink" title="4、InnoDB行锁"></a>4、InnoDB行锁</h4><blockquote>
<ul>
<li><p>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；</p>
</li>
<li><p>锁定粒度最小，发生锁冲突的概率最低,并发度也最高</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务；二是 采用了行级锁。</p>
</blockquote>
<h5 id="5-4-1-行锁模式"><a href="#5-4-1-行锁模式" class="headerlink" title="5.4.1 行锁模式"></a>5.4.1 行锁模式</h5><ul>
<li>共享锁（S）：又称为读锁，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁（X）：又称为写锁，排他锁就是不能与其他锁并存，如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据就行读取和修改。</li>
</ul>
<blockquote>
<p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加<strong>排他锁</strong></p>
<p>对于普通SELECT语句，InnoDB<strong>不会加任何锁</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE</span><br><span class="line"></span><br><span class="line">排他锁（X) ：SELECT * FROM table_name WHERE ... FOR UPDATE</span><br></pre></td></tr></table></figure>



<h5 id="5-4-2-行锁"><a href="#5-4-2-行锁" class="headerlink" title="5.4.2 行锁"></a>5.4.2 行锁</h5><p><strong>准备</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table test_innodb_lock(</span><br><span class="line">	id int(11),</span><br><span class="line">	name varchar(16),</span><br><span class="line">	sex varchar(1)</span><br><span class="line">)engine &#x3D; innodb default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into test_innodb_lock values(1,&#39;100&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(3,&#39;3&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(4,&#39;400&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(5,&#39;500&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(6,&#39;600&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(7,&#39;700&#39;,&#39;0&#39;);</span><br><span class="line">insert into test_innodb_lock values(8,&#39;800&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(9,&#39;900&#39;,&#39;1&#39;);</span><br><span class="line">insert into test_innodb_lock values(1,&#39;200&#39;,&#39;0&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_test_innodb_lock_id on test_innodb_lock(id);</span><br><span class="line">create index idx_test_innodb_lock_name on test_innodb_lock(name);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关闭自动提交功能</p>
<p>操作同一行数据，不提交。==&gt;其他事务会处于等待状态</p>
<p>操作不同行数据  ==&gt; 其他事务会执行更新</p>
</blockquote>
<h5 id="5-4-3-行锁升级为表锁"><a href="#5-4-3-行锁升级为表锁" class="headerlink" title="5.4.3 行锁升级为表锁"></a>5.4.3 行锁升级为表锁</h5><blockquote>
<p>如果<strong>不通过索引条件检索数据</strong>，那么InnoDB将对表中的所有记录加锁，实际效果跟表锁一样</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201022175100893.png" alt="image-20201022175100893"></p>
<blockquote>
<p>处于阻塞状态</p>
<p>执行更新时 ， name字段本来为varchar类型， 我们是作为数组类型使用，<strong>存在类型转换，索引失效，最终行锁变为表锁</strong></p>
</blockquote>
<h5 id="5-4-4-间隙锁危害"><a href="#5-4-4-间隙锁危害" class="headerlink" title="5.4.4 间隙锁危害"></a>5.4.4 间隙锁危害</h5><blockquote>
<p>当我们<strong>用范围条件</strong>，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； </p>
<p>对于键值在<strong>条件范围内但并不存在的记录</strong>，叫做 “间隙（GAP）” ， InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的 间隙锁（Next-Key锁）   </p>
<p>i&lt;10  i= 1,2,  ,4,5 </p>
</blockquote>
<h5 id="5-4-5-行锁争用情况"><a href="#5-4-5-行锁争用情况" class="headerlink" title="5.4.5 行锁争用情况"></a>5.4.5 行锁争用情况</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show  status like &#39;innodb_row_lock%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022180443114.png" alt="image-20201022180443114" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Innodb_row_lock_current_waits: 当前正在等待锁定的数量</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time: 从系统启动到现在锁定总时间长度</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_avg:每次等待所花平均时长</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间</span><br><span class="line"></span><br><span class="line">Innodb_row_lock_waits: 系统启动后到现在总共等待的次数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当等待的次数很高，而且每次等待的时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化计划。</span><br></pre></td></tr></table></figure>



<h5 id="5-3-6-总结"><a href="#5-3-6-总结" class="headerlink" title="5.3.6 总结"></a>5.3.6 总结</h5><p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面带来了<strong>性能损耗</strong>可能比表锁会更高一些，但是在整体<strong>并发</strong>处理能力方面要远远由于MyISAM的表锁的。当</p>
<p>系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势。</p>
<p>但是，InnoDB的行级锁同样也有其脆弱的一面，当我们**使用不当的时候(无索引下，行锁升级成表锁)**，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能会更差。</p>
<p>优化建议：</p>
<ul>
<li>尽可能让所有数据检索都能通过<strong>索引</strong>来完成，避免无索引行锁升级为表锁。</li>
<li>合理设计索引，尽可能减少索引<strong>条件</strong>，及索引<strong>范围</strong>，避免<strong>间隙锁</strong></li>
<li>尽量控制<strong>事务大小</strong>，减少锁定<strong>资源量</strong>和<strong>时间</strong>长度</li>
<li>尽可使用低级别<strong>事务隔离</strong>（但是需要业务层面满足需求）</li>
</ul>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>日志/主从复制</title>
    <url>/2020/11/11/06%E6%97%A5%E5%BF%97&amp;%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h3 id="一、常用工具"><a href="#一、常用工具" class="headerlink" title="一、常用工具"></a>一、常用工具</h3><h4 id="1、mysql"><a href="#1、mysql" class="headerlink" title="1、mysql"></a>1、mysql</h4><blockquote>
<p>该mysql不是指mysql服务，而是指mysql的<strong>客户端工具</strong>。</p>
</blockquote>
<h5 id="1-1-连接选项"><a href="#1-1-连接选项" class="headerlink" title="1.1 连接选项"></a>1.1 连接选项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">	-u, --user&#x3D;name			指定用户名</span><br><span class="line">	-p, --password[&#x3D;name]	指定密码</span><br><span class="line">	-h, --host&#x3D;name			指定服务器IP或域名</span><br><span class="line">	-P, --port&#x3D;#			指定连接端口</span><br><span class="line"></span><br><span class="line">示例 ：</span><br><span class="line">	mysql -h 127.0.0.1 -P 3306 -u root -p</span><br><span class="line">	</span><br><span class="line">	mysql -h127.0.0.1 -P3306 -uroot -p2143</span><br></pre></td></tr></table></figure>

<h5 id="1-2-执行选项"><a href="#1-2-执行选项" class="headerlink" title="1.2 执行选项"></a>1.2 执行选项</h5><blockquote>
<p>-e, –execute=name        执行SQL语句并退出</p>
<p>Mysql客户端执行SQL语句，而不用连接到MySQL数据库再执行</p>
<p>对于一些批处理脚本，这种方式尤其方便。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p2143 数据库名 -e &quot;select * from tb_book&quot;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022215130425.png" alt="image-20201022215130425" style="zoom:80%;" />



<h4 id="2、mysqladmin"><a href="#2、mysqladmin" class="headerlink" title="2、mysqladmin"></a>2、mysqladmin</h4><blockquote>
<p>mysqladmin 是一个<strong>执行管理操作</strong>的客户端程序。</p>
<p>可以用它来检查服务器的配置和当前状态、创建并删除数据库等。</p>
</blockquote>
<blockquote>
<p> mysqladmin –help  指令查看帮助文档</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201022215714698.png" alt="image-20201022215714698" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例 ：</span><br><span class="line">	mysqladmin -uroot -p2143 create &#39;test01&#39;;  </span><br><span class="line">	mysqladmin -uroot -p2143 drop &#39;test01&#39;;</span><br><span class="line">	mysqladmin -uroot -p2143 version;</span><br></pre></td></tr></table></figure>



<h4 id="3、mysqlbinlog"><a href="#3、mysqlbinlog" class="headerlink" title="3、mysqlbinlog"></a>3、mysqlbinlog</h4><blockquote>
<p>由于服务器生成的二进制日志文件以二进制格式保存，所以如果想要检查这些文本的文本格式，就会使用到mysqlbinlog 日志管理工具。</p>
</blockquote>
<p>mysqlbinlog [options]  log-files1 log-files2 …</p>
<p>选项：<br>    -d, –database=name : 指定数据库名称，只列出指定的数据库相关操作。</p>
<pre><code>-o, --offset=# : 忽略掉日志中的前n行命令。

-r,--result-file=name : 将输出的文本格式日志输出到指定文件。

-s, --short-form : 显示简单格式， 省略掉一些信息。

--start-datatime=date1  --stop-datetime=date2 : 指定日期间隔内的所有日志。

--start-position=pos1 --stop-position=pos2 : 指定位置间隔内的所有日志。</code></pre>
<h4 id="4、mysqldump"><a href="#4、mysqldump" class="headerlink" title="4、mysqldump"></a>4、mysqldump</h4><blockquote>
<p>用来<strong>备份</strong>数据库或在不同数据库之间进行<strong>数据迁移。</strong></p>
<p>备份内容包含创建表，及插入表的SQL语句。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump [options] db_name [tables]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --database&#x2F;-B db1 [db2 db3...]</span><br><span class="line"></span><br><span class="line">mysqldump [options] --all-databases&#x2F;-A</span><br></pre></td></tr></table></figure>

<h5 id="4-1-选项"><a href="#4-1-选项" class="headerlink" title="4.1 选项"></a>4.1 选项</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数 ： </span><br><span class="line">	-u, --user&#x3D;name			指定用户名</span><br><span class="line">	-p, --password[&#x3D;name]	指定密码</span><br><span class="line">	-h, --host&#x3D;name			指定服务器IP或域名</span><br><span class="line">	-P, --port&#x3D;#			指定连接端口</span><br></pre></td></tr></table></figure>

<h5 id="4-2-输出"><a href="#4-2-输出" class="headerlink" title="4.2 输出"></a>4.2 输出</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数：</span><br><span class="line">	--add-drop-database		在每个数据库创建语句前加上 Drop database 语句</span><br><span class="line">	--add-drop-table		在每个表创建语句前加上 Drop table 语句 , 默认开启!! ; 不开启 (--skip-add-drop-table)</span><br><span class="line">	</span><br><span class="line">	-n, --no-create-db		不包含数据库的创建语句</span><br><span class="line">	-t, --no-create-info	不包含数据表的创建语句</span><br><span class="line">	-d --no-data			不包含数据</span><br><span class="line">	</span><br><span class="line">	 -T, --tab&#x3D;name			自动生成两个文件：一个.sql文件，创建表结构的语句；</span><br><span class="line">	 						一个.txt文件，数据文件，相当于select into outfile  </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123 demo_03 tb_book &gt; tb_book.sql;</span><br><span class="line">cat tb_book.sql;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 默认开启，可不加</span><br><span class="line">mysqldump -uroot -p123 demo_03 --add-drop-table &gt; demo_03.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 一个.sql文件，创建表结构的语句；</span><br><span class="line">-- 一个.txt文件，数据文件，相当于select into outfile  </span><br><span class="line">mysqldump -uroot -p123 -T &#x2F;tmp demo_03 tb_book;</span><br></pre></td></tr></table></figure>



<h4 id="5-mysqlimport-source"><a href="#5-mysqlimport-source" class="headerlink" title="5 mysqlimport/source"></a>5 mysqlimport/source</h4><blockquote>
<p>mysqlimport 是客户端数据导入工具，用来导入mysqldump 加 -T 参数后导出的<strong>文本文件</strong>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlimport [options]  db_name  textfile1  [textfile2...]</span><br><span class="line"></span><br><span class="line">mysqlimport -uroot -p2143 数据库名 &#x2F;tmp&#x2F;city.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果需要导入<strong>sql文件</strong>,可以使用mysql中的source 指令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;root&#x2F;tb_book.sql</span><br></pre></td></tr></table></figure>



<h4 id="6-mysqlshow"><a href="#6-mysqlshow" class="headerlink" title="6 mysqlshow"></a>6 mysqlshow</h4><blockquote>
<p>mysqlshow 客户端对象查找工具，用来很快地查找存在哪些数据库、数据库中的表、表中的列或者索引。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--count		显示数据库及表的统计信息（数据库，表 均可以不指定）</span><br><span class="line"></span><br><span class="line">-i			显示指定数据库或者指定表的状态信息</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询每个数据库的表的数量及表中记录的数量</span><br><span class="line">mysqlshow -uroot -p2143 --count</span><br><span class="line"></span><br><span class="line">#查询test库中每个表中的字段书，及行数</span><br><span class="line">mysqlshow -uroot -p2143 test --count</span><br><span class="line"></span><br><span class="line">#查询test库中book表的详细情况</span><br><span class="line">mysqlshow -uroot -p2143 test book --count</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022235838134.png" alt="image-20201022235838134" style="zoom:80%;" />



<h3 id="二、日志"><a href="#二、日志" class="headerlink" title="二、日志"></a>二、日志</h3><blockquote>
<p>记录着数据库工作的方方面面，以帮助数据库管理员追踪数据库曾经发生过的各种事件</p>
<ul>
<li>错误日志</li>
<li>二进制日志（BINLOG 日志）</li>
<li>查询日志</li>
<li>慢查询日志</li>
</ul>
</blockquote>
<h4 id="1、错误日志"><a href="#1、错误日志" class="headerlink" title="1、错误日志"></a>1、错误日志</h4><blockquote>
<p>记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。</p>
<p>当数据库出现任何故障导致无法正常使用时，可以首先查看此日志</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201023093056385.png" alt="image-20201023093056385" style="zoom:80%;" />



<h4 id="2、二进制日志"><a href="#2、二进制日志" class="headerlink" title="2、二进制日志"></a>2、二进制日志</h4><blockquote>
<p>二进制日志（BINLOG）记录了所有的 <strong>DDL</strong>（数据定义语言）语句和 <strong>DML</strong>（数据操纵语言）语句，但是<strong>不包括数据查询语句</strong></p>
<p>此日志对于灾难时的数据恢复起着极其重要的作用，<strong>MySQL的主从复制， 就是通过该binlog实现的</strong>。</p>
</blockquote>
<h5 id="2-1-开启"><a href="#2-1-开启" class="headerlink" title="2.1 开启"></a>2.1 开启</h5><blockquote>
<p>配置文件位置 : /etc/my.cnf</p>
<p>日志存放位置 : 配置时，给定了文件名但是没有指定路径，日志默认写入Mysql的数据目录。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span><br><span class="line">log_bin&#x3D;mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format&#x3D;STATEMENT</span><br></pre></td></tr></table></figure>



<h5 id="2-2-日志格式"><a href="#2-2-日志格式" class="headerlink" title="2.2 日志格式"></a>2.2 日志格式</h5><h6 id="statement"><a href="#statement" class="headerlink" title="statement"></a>statement</h6><p>该日志格式在日志文件中记录的都是<strong>SQL语句</strong>（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</p>
<h6 id="row"><a href="#row" class="headerlink" title="row"></a>row</h6><p>该日志格式在日志文件中记录的是<strong>每一行的数据变更</strong>，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</p>
<h6 id="mixed"><a href="#mixed" class="headerlink" title="mixed"></a>mixed</h6><p>这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点</p>
<h5 id="2-3-日志读取"><a href="#2-3-日志读取" class="headerlink" title="2.3 日志读取"></a>2.3 日志读取</h5><blockquote>
<p>日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog log-file;</span><br></pre></td></tr></table></figure>

<h6 id="查看statement格式日志"><a href="#查看statement格式日志" class="headerlink" title="查看statement格式日志"></a>查看statement格式日志</h6><p>/var/lib/mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 执行插入语句</span><br><span class="line">insert into tb_book values(null,&#39;Lucene&#39;,&#39;2088-05-01&#39;,&#39;0&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>查看日志内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog mysqlbing.00001;</span><br></pre></td></tr></table></figure>

<h6 id="查看row格式日志"><a href="#查看row格式日志" class="headerlink" title="查看row格式日志"></a>查看row格式日志</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置开启binlog日志， 日志的文件前缀为 mysqlbin -----&gt; 生成的文件名如 : mysqlbin.000001,mysqlbin.000002</span><br><span class="line">log_bin&#x3D;mysqlbin</span><br><span class="line"></span><br><span class="line">#配置二进制日志的格式</span><br><span class="line">binlog_format&#x3D;ROW</span><br></pre></td></tr></table></figure>

<p><strong>查看</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqlbinlog -vv mysqlbin.000002 </span><br></pre></td></tr></table></figure>



<h5 id="2-4-删除日志"><a href="#2-4-删除日志" class="headerlink" title="2.4 删除日志"></a>2.4 删除日志</h5><h6 id="1"><a href="#1" class="headerlink" title="1"></a>1</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reset Master</span><br></pre></td></tr></table></figure>

<h6 id="2"><a href="#2" class="headerlink" title="2"></a>2</h6><p>执行指令 <code> purge  master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除  <code> ******</code> 编号之前的所有日志。 </p>
<h6 id="3"><a href="#3" class="headerlink" title="3"></a>3</h6><p>执行指令 <code> purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志</p>
<h6 id="4"><a href="#4" class="headerlink" title="4"></a>4</h6><p>设置参数 –expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p>
<h4 id="3、查询日志"><a href="#3、查询日志" class="headerlink" title="3、查询日志"></a>3、查询日志</h4><blockquote>
<p>查询日志中记录了客户端的<strong>所有操作语句</strong>，而二进制日志不包含查询数据的SQL语句。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#该选项用来开启查询日志 ， 可选值 ： 0 或者 1 ； 0 代表关闭， 1 代表开启 </span><br><span class="line">general_log&#x3D;1</span><br><span class="line"></span><br><span class="line">#设置日志的文件名 ， 如果没有指定， 默认的文件名为 host_name.log </span><br><span class="line">general_log_file&#x3D;file_name</span><br></pre></td></tr></table></figure>



<h4 id="4、慢查询日志"><a href="#4、慢查询日志" class="headerlink" title="4、慢查询日志"></a>4、慢查询日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 该参数用来控制慢查询日志是否开启， 可取值： 1 和 0 ， 1 代表开启， 0 代表关闭</span><br><span class="line">slow_query_log&#x3D;1 </span><br><span class="line"></span><br><span class="line"># 该参数用来指定慢查询日志的文件名</span><br><span class="line">slow_query_log_file&#x3D;slow_query.log</span><br><span class="line"></span><br><span class="line"># 该选项用来配置查询的时间限制， 超过这个时间将认为值慢查询， 将需要进行日志记录， 默认10s</span><br><span class="line">long_query_time&#x3D;10</span><br></pre></td></tr></table></figure>



<h3 id="三、主从复制"><a href="#三、主从复制" class="headerlink" title="三、主从复制"></a>三、主从复制</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><blockquote>
<p>复制是指将主数据库的<strong>DDL</strong> 和 <strong>DML</strong> 操作通过<strong>二进制日志</strong>传到从库服务器中，然后在从库上对这些日志重新执行（也叫重做），从而使得从库和主库的数据保持同步。</p>
</blockquote>
<blockquote>
<p>MySQL支持一台主库同时向多台从库进行复制， 从库同时也可以作为其他从服务器的主库，实现<strong>链状复制。</strong></p>
</blockquote>
<h4 id="2、复制的原理"><a href="#2、复制的原理" class="headerlink" title="2、复制的原理"></a>2、复制的原理</h4><blockquote>
<ul>
<li><p>Master 主库在事务提交时，会把<strong>数据变更</strong>作为时间 Events 记录在二进制日志文件 <strong>Binlog</strong> 中。</p>
</li>
<li><p>主库推送二进制日志文件 Binlog 中的日志事件到从库的<strong>中继日志 Relay Log 。</strong></p>
</li>
<li><p>slave<strong>重做</strong>中继日志中的事件，将改变反映它自己的数据。</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/2111.jpg" alt="2111" style="zoom:80%;" />



<h4 id="3、复制优势"><a href="#3、复制优势" class="headerlink" title="3、复制优势"></a>3、复制优势</h4><blockquote>
<ul>
<li><p>主库出现问题，可以<strong>快速切换到从库提供服务</strong>。</p>
</li>
<li><p>可以在<strong>从库上执行查询</strong>操作，从<strong>主库中更新</strong>，实现读写分离，降低主库的访问压力。</p>
</li>
<li><p>可以在<strong>从库中执行备份</strong>，以避免备份期间影响主库的服务。</p>
</li>
</ul>
</blockquote>
<h4 id="4、搭建"><a href="#4、搭建" class="headerlink" title="4、搭建"></a>4、搭建</h4><h5 id="4-1-master"><a href="#4-1-master" class="headerlink" title="4.1 master"></a>4.1 master</h5><p><strong>配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql 服务ID,保证整个集群环境中唯一</span><br><span class="line">server-id&#x3D;1</span><br><span class="line"></span><br><span class="line">#mysql binlog 日志的存储路径和文件名</span><br><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlbin</span><br><span class="line"></span><br><span class="line">#错误日志,默认已经开启</span><br><span class="line">#log-err</span><br><span class="line"></span><br><span class="line">#mysql的安装目录</span><br><span class="line">#basedir</span><br><span class="line"></span><br><span class="line">#mysql的临时目录</span><br><span class="line">#tmpdir</span><br><span class="line"></span><br><span class="line">#mysql的数据存放目录</span><br><span class="line">#datadir</span><br><span class="line"></span><br><span class="line">#是否只读,1 代表只读, 0 代表读写</span><br><span class="line">read-only&#x3D;0</span><br><span class="line"></span><br><span class="line">#忽略的数据, 指不需要同步的数据库</span><br><span class="line">binlog-ignore-db&#x3D;mysql</span><br><span class="line"></span><br><span class="line">#指定同步的数据库</span><br><span class="line">#binlog-do-db&#x3D;db01</span><br></pre></td></tr></table></figure>

<p><strong>重启</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql restart ；</span><br></pre></td></tr></table></figure>

<p><strong>创建同步数据的账户，并且进行授权操作：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant replication slave on *.* to &#39;itcast&#39;@&#39;192.168.192.131&#39; identified by &#39;itcast&#39;;	</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p><strong>查看master状态：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>File : 从哪个日志文件开始推送日志文件 </p>
<p>Position ： 从哪个位置开始推送日志</p>
<p>Binlog_Ignore_DB : 指定不需要同步的数据库</p>
</blockquote>
<h5 id="4-2-slave"><a href="#4-2-slave" class="headerlink" title="4.2 slave"></a>4.2 slave</h5><p>在slave端配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#mysql服务端ID,唯一</span><br><span class="line">server-id&#x3D;2</span><br><span class="line"></span><br><span class="line">#指定binlog日志</span><br><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysqlbin</span><br></pre></td></tr></table></figure>

<p>重启mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql restart；</span><br></pre></td></tr></table></figure>

<p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D; &#39;192.168.192.130&#39;, master_user&#x3D;&#39;itcast&#39;, master_password&#x3D;&#39;itcast&#39;, master_log_file&#x3D;&#39;mysqlbin.000001&#39;, master_log_pos&#x3D;413;</span><br></pre></td></tr></table></figure>

<p>开启同步操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br></pre></td></tr></table></figure>

<p>停止同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br></pre></td></tr></table></figure>



<h5 id="4-3-验证同步操作"><a href="#4-3-验证同步操作" class="headerlink" title="4.3 验证同步操作"></a>4.3 验证同步操作</h5><p>主库中创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database db01;</span><br><span class="line"></span><br><span class="line">user db01;</span><br><span class="line"></span><br><span class="line">create table user(</span><br><span class="line">	id int(11) not null auto_increment,</span><br><span class="line">	name varchar(50) not null,</span><br><span class="line">	sex varchar(1),</span><br><span class="line">	primary key (id)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into user(id,name,sex) values(null,&#39;Tom&#39;,&#39;1&#39;);</span><br><span class="line">insert into user(id,name,sex) values(null,&#39;Trigger&#39;,&#39;0&#39;);</span><br><span class="line">insert into user(id,name,sex) values(null,&#39;Dawn&#39;,&#39;1&#39;);</span><br></pre></td></tr></table></figure>

<p>从库中查询</p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>内存优化</title>
    <url>/2020/11/11/04%E5%BA%94%E7%94%A8&amp;%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="一、应用优化"><a href="#一、应用优化" class="headerlink" title="一、应用优化"></a>一、应用优化</h3><h4 id="1、使用连接池"><a href="#1、使用连接池" class="headerlink" title="1、使用连接池"></a>1、使用连接池</h4><blockquote>
<p>建立连接的代价的比较昂贵的，因为我们频繁的创建关闭连接，是比较耗费资源</p>
<p>我们有必要建立数据库连接池，以提高访问的性能。</p>
</blockquote>
<h4 id="2、减少对MySql的访问"><a href="#2、减少对MySql的访问" class="headerlink" title="2、减少对MySql的访问"></a>2、减少对MySql的访问</h4><h5 id="2-1-避免数据重复检索"><a href="#2-1-避免数据重复检索" class="headerlink" title="2.1 避免数据重复检索"></a>2.1 避免数据重复检索</h5><blockquote>
<p>要向数据库提交两次请求，数据库就要做两次查询操作</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id , name from tb_book;</span><br><span class="line">select id , status from tb_book;</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id, name , status from tb_book;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-增加cache层"><a href="#2-2-增加cache层" class="headerlink" title="2.2 增加cache层"></a>2.2 增加cache层</h5><blockquote>
<p>在应用中，我们可以在应用中增加 <strong>缓存层</strong> 来达到<strong>减轻数据库负担</strong>的目的</p>
<ul>
<li>可以部分数据从数据库中抽取出来放到应用端以文本方式存储</li>
<li>使用框架(Mybatis, Hibernate)提供的一级缓存/二级缓存</li>
<li>使用redis数据库来缓存数据 </li>
</ul>
</blockquote>
<h4 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a>3、负载均衡</h4><blockquote>
<p>利用某种均衡算法，将固定的负载量分布到不同的服务器上， 以此来降低单台服务器的负载，达到优化的效果</p>
</blockquote>
<h5 id="3-1-利用MySql复制分流查询"><a href="#3-1-利用MySql复制分流查询" class="headerlink" title="3.1 利用MySql复制分流查询"></a>3.1 利用MySql复制分流查询</h5><blockquote>
<p>通过MySql的主从复制，实现读写分离，使增删改操作走主节点，查询操作走从节点，从而降低单台服务器的压力</p>
</blockquote>
<img src="https://csn.damyoung.cn/1.jpg" style="zoom:80%;" />

<h5 id="3-2-采用分布式数据库架构"><a href="#3-2-采用分布式数据库架构" class="headerlink" title="3.2 采用分布式数据库架构"></a>3.2 采用分布式数据库架构</h5><blockquote>
<p>分布式数据库架构适合大数据量、负载高的情况，有良好的拓展性和高可用性，通过在多台服务器之间分布数据，可以实现多台服务器间的负载均衡，提高访问效率。</p>
</blockquote>
<h3 id="二、查询缓存"><a href="#二、查询缓存" class="headerlink" title="二、查询缓存"></a>二、查询缓存</h3><blockquote>
<p>开启MySql的查询缓存时，当<strong>执行完全相同</strong>的Sql语句时，服务器就会直接从缓存中读取结果。</p>
<p>当数据被修改，之前的缓存会失效，<strong>修改比较频繁的表不适合做查询缓存。</strong></p>
</blockquote>
<h4 id="1、操作流程"><a href="#1、操作流程" class="headerlink" title="1、操作流程"></a>1、操作流程</h4><img src="https://csn.damyoung.cn/20180919131632347.png" alt="20180919131632347" style="zoom:80%;" />

<blockquote>
<ul>
<li>客户端发送一条查询给服务器server；</li>
<li>服务器先会检查查询缓存，如果命中了缓存，则立即返回存储在缓存中的结果。否则进入下一阶段；</li>
<li>服务器端进行SQL解析、预处理，再由优化器<code>optimiter</code>生成对应的执行计划；</li>
<li>MySQL根据优化器生成的执行计划，调用存储引擎的API来执行查询；</li>
<li>将结果返回给客户端，同时将结果缓存在缓存层中。</li>
</ul>
</blockquote>
<h4 id="2、查询缓存配置"><a href="#2、查询缓存配置" class="headerlink" title="2、查询缓存配置"></a>2、查询缓存配置</h4><blockquote>
<p>查看是否支持查询缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;have_query_cache&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看是否开启了查询缓存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;query_cache_type&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看查询缓存的占用大小</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &#39;query_cache_size&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看查询缓存的状态变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Qcache%&#39;;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021231234834.png" alt="image-20201021231234834" style="zoom:80%;" />

<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Qcache_free_blocks</td>
<td>查询缓存中的可用内存块数</td>
</tr>
<tr>
<td>Qcache_free_memory</td>
<td>查询缓存的可用内存量</td>
</tr>
<tr>
<td>Qcache_hits</td>
<td>查询缓存命中数</td>
</tr>
<tr>
<td>Qcache_inserts</td>
<td>添加到查询缓存的查询数</td>
</tr>
<tr>
<td>Qcache_lowmen_prunes</td>
<td>由于内存不足而从查询缓存中删除的查询数</td>
</tr>
<tr>
<td>Qcache_not_cached</td>
<td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td>
</tr>
<tr>
<td>Qcache_queries_in_cache</td>
<td>查询缓存中注册的查询数</td>
</tr>
<tr>
<td>Qcache_total_blocks</td>
<td>查询缓存中的块总数</td>
</tr>
</tbody></table>
<h4 id="3、开启查询缓存"><a href="#3、开启查询缓存" class="headerlink" title="3、开启查询缓存"></a>3、开启查询缓存</h4><table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>OFF 或 0</td>
<td>查询缓存功能关闭</td>
</tr>
<tr>
<td>ON 或 1</td>
<td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td>
</tr>
<tr>
<td>DEMAND 或 2</td>
<td>查询缓存功能按需进行，显式指定 <strong>sql_cache</strong> 的SELECT语句才会缓存；其它均不予缓存</td>
</tr>
</tbody></table>
<blockquote>
<p>在/etc/my.cnf配置中，增加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query_cache_type&#x3D;1;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021234236344.png" alt="image-20201021234236344" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart mysql.service;</span><br></pre></td></tr></table></figure>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021234210231.png" alt="image-20201021234210231" style="zoom:80%;" />



<h4 id="4、查询缓存select选项"><a href="#4、查询缓存select选项" class="headerlink" title="4、查询缓存select选项"></a>4、查询缓存select选项</h4><blockquote>
<ul>
<li><p>sql_cache：如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p>
</li>
<li><p>sql_no_cache：服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sql_cache username from tb_user_1 where id&#x3D;1;</span><br><span class="line">SELECT SQL_NO_CACHE id, name FROM customer;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021235706488.png" alt="image-20201021235706488" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201021235401748.png" alt="image-20201021235401748" style="zoom:80%;" />



<h4 id="5、缓存失效"><a href="#5、缓存失效" class="headerlink" title="5、缓存失效"></a>5、缓存失效</h4><blockquote>
<p>要想命中缓存，<strong>sql语句必须完全相同</strong></p>
</blockquote>
<h5 id="5-1-存在不确定"><a href="#5-1-存在不确定" class="headerlink" title="5.1 存在不确定"></a>5.1 存在不确定</h5><blockquote>
<p>查询语句中有一些不确定函数时，则不会缓存。</p>
<p>如 now() , current_date() , curdate() , curtime() , rand() , uuid() , user() , database() 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL1 : select * from tb_item where updatetime &lt; now() limit 1;</span><br><span class="line">SQL2 : select user();</span><br><span class="line">SQL3 : select database();</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201022000250422.png" alt="image-20201022000250422"></p>
<h5 id="5-2-不使用任何表查询"><a href="#5-2-不使用任何表查询" class="headerlink" title="5.2 不使用任何表查询"></a>5.2 不使用任何表查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select &#39;a&#39;;</span><br></pre></td></tr></table></figure>



<h5 id="5-3-查询系统表"><a href="#5-3-查询系统表" class="headerlink" title="5.3 查询系统表"></a>5.3 查询系统表</h5><blockquote>
<p>查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.engines;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在<strong>存储函数，触发器或事件</strong>的主体内执行的查询。</p>
</blockquote>
<blockquote>
<p>如果<strong>表更改</strong>，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。</p>
<ul>
<li>用<code>MERGE</code>映射到已更改表的表的查询。</li>
<li>一个表可以被许多类型的语句，如被改变 insert， update， delete， truncate table，alter table，drop table 或 drop database; </li>
</ul>
</blockquote>
<h3 id="三、MySql内存管理及优化"><a href="#三、MySql内存管理及优化" class="headerlink" title="三、MySql内存管理及优化"></a>三、MySql内存管理及优化</h3><h4 id="1、内存优化原则"><a href="#1、内存优化原则" class="headerlink" title="1、内存优化原则"></a>1、内存优化原则</h4><blockquote>
<ul>
<li> 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存</li>
<li><code>MyISAM</code> 存储引擎的数据文件读取<strong>依赖于操作系统自身的IO缓存</strong>，因此，如果有<code>MyISAM</code>表，就要预留更多的内存给操作系统做IO缓存</li>
<li> <strong>排序区、连接区</strong>等缓存是分配给每个数据库会话（session）专用的，<strong>其默认值的设置要根据最大连接数合理分配</strong>，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽</li>
</ul>
</blockquote>
<h4 id="2、MyISAM内存优化"><a href="#2、MyISAM内存优化" class="headerlink" title="2、MyISAM内存优化"></a>2、MyISAM内存优化</h4><blockquote>
<ul>
<li><p>myisam存储引擎使用 key_buffer 缓存<strong>索引块</strong>，加速myisam索引的读写速度。</p>
</li>
<li><p>对于myisam表的<strong>数据块</strong>，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</p>
</li>
</ul>
</blockquote>
<p><strong>key_buffer_size</strong></p>
<blockquote>
<p>key_buffer_size决定MyISAM<strong>索引块缓存区</strong>的大小，直接影响到MyISAM表的存取效率。</p>
<p>在MySQL参数文件(<code>/usr/my.cnf</code>)中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key_buffer_size&#x3D;512M</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201022001306901.png" alt="image-20201022001306901" style="zoom:80%;" />

<p><strong>read_buffer_size</strong></p>
<blockquote>
<p>如果需要经常<strong>顺序扫描</strong>myisam表，可以通过增大read_buffer_size的值来改善性能。</p>
<p>但需要注意的是read_buffer_size是<strong>每个session独占</strong>的，如果默认值设置太大，就会造成内存浪费</p>
</blockquote>
<p><strong>read_rnd_buffer_size</strong></p>
<blockquote>
<p>对于需要做排序的myisam表的查询，如带有<strong>order by</strong>子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。</p>
<p>但需要注意的是 read_rnd_buffer_size 是<strong>每个session独占</strong>的，如果默认值设置太大，就会造成内存浪费。</p>
</blockquote>
<h4 id="3、InnoDB内存优化"><a href="#3、InnoDB内存优化" class="headerlink" title="3、InnoDB内存优化"></a>3、InnoDB内存优化</h4><blockquote>
<p>innodb用<strong>一块内存区做IO缓存池</strong></p>
<p>该缓存池不仅用来缓存innodb的索引块，而且也用来缓存innodb的数据块。</p>
</blockquote>
<p><strong>innodb_buffer_pool_size</strong></p>
<blockquote>
<p>决定了 innodb 存储引擎<strong>表数据</strong>和<strong>索引数据</strong>的最大缓存区大小</p>
<p>在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，<strong>缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</strong></p>
</blockquote>
<p><strong>innodb_log_buffer_size</strong></p>
<blockquote>
<p>决定了innodb重做<strong>日志缓存</strong>的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size的大小，可以避免innodb在事务提交前就执行不必要的日志写入磁盘操作。</p>
</blockquote>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>常用sql函数</title>
    <url>/2020/11/11/05%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="常用SQL技巧"><a href="#常用SQL技巧" class="headerlink" title="常用SQL技巧"></a>常用SQL技巧</h3><h4 id="1、SQL执行顺序"><a href="#1、SQL执行顺序" class="headerlink" title="1、SQL执行顺序"></a>1、SQL执行顺序</h4><blockquote>
<p>select  from join where group by having  order by  limit </p>
</blockquote>
<p><strong>执行顺序</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FROM	&lt;left_table&gt;</span><br><span class="line"></span><br><span class="line">ON 		&lt;join_condition&gt;</span><br><span class="line"></span><br><span class="line">&lt;join_type&gt;		JOIN	&lt;right_table&gt;</span><br><span class="line"></span><br><span class="line">WHERE		&lt;where_condition&gt;</span><br><span class="line"></span><br><span class="line">GROUP BY 	&lt;group_by_list&gt;</span><br><span class="line"></span><br><span class="line">HAVING		&lt;having_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>		&lt;<span class="keyword">select</span> <span class="keyword">list</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>	&lt;order_by_condition&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">LIMIT</span>		&lt;limit_params&gt;</span><br></pre></td></tr></table></figure>



<h4 id="2、正则表达式"><a href="#2、正则表达式" class="headerlink" title="2、正则表达式"></a>2、正则表达式</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;^T&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;2$&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="keyword">name</span> regexp <span class="string">&#x27;[uvw]&#x27;</span>;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>^</td>
<td>在字符串开始处进行匹配</td>
</tr>
<tr>
<td>$</td>
<td>在字符串末尾处进行匹配</td>
</tr>
<tr>
<td>.</td>
<td>匹配任意单个字符, 包括换行符</td>
</tr>
<tr>
<td>[…]</td>
<td>匹配出括号内的任意字符</td>
</tr>
<tr>
<td>[^…]</td>
<td>匹配不出括号内的任意字符</td>
</tr>
<tr>
<td>a*</td>
<td>匹配零个或者多个a(包括空串)</td>
</tr>
<tr>
<td>a+</td>
<td>匹配一个或者多个a(不包括空串)</td>
</tr>
<tr>
<td>a?</td>
<td>匹配零个或者一个a</td>
</tr>
<tr>
<td>a1|a2</td>
<td>匹配a1或a2</td>
</tr>
<tr>
<td>a(m)</td>
<td>匹配m个a</td>
</tr>
<tr>
<td>a(m,)</td>
<td>至少匹配m个a</td>
</tr>
<tr>
<td>a(m,n)</td>
<td>匹配m个a 到 n个a</td>
</tr>
<tr>
<td>a(,n)</td>
<td>匹配0到n个a</td>
</tr>
<tr>
<td>(…)</td>
<td>将模式元素组成单一元素</td>
</tr>
</tbody></table>
<h4 id="3、常用函数"><a href="#3、常用函数" class="headerlink" title="3、常用函数"></a>3、常用函数</h4><h5 id="3-1-数字函数"><a href="#3-1-数字函数" class="headerlink" title="3.1 数字函数"></a>3.1 数字函数</h5><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>abs</td>
<td>求绝对值</td>
</tr>
<tr>
<td>sqrt</td>
<td>求二次方根</td>
</tr>
<tr>
<td>mod</td>
<td>求余数</td>
</tr>
<tr>
<td>ceil 和 CEILING</td>
<td>两个函数功能相同，都是返回不小于参数的最小整数，即向上取整</td>
</tr>
<tr>
<td>floor</td>
<td>向下取整，返回值转化为一个BIGINT</td>
</tr>
<tr>
<td>RAND</td>
<td>生成一个0~1之间的随机数，传入整数参数是，用来产生重复序列</td>
</tr>
<tr>
<td>ROUND</td>
<td>对所传参数进行四舍五入</td>
</tr>
<tr>
<td>SIGN</td>
<td>返回参数的符号</td>
</tr>
<tr>
<td>POW 和 POWER</td>
<td>两个函数的功能相同，都是所传参数的次方的结果值</td>
</tr>
<tr>
<td>sin</td>
<td>求正弦值</td>
</tr>
<tr>
<td>asin</td>
<td>求反正弦值，与函数 SIN 互为反函数</td>
</tr>
<tr>
<td>COS</td>
<td>求余弦值</td>
</tr>
<tr>
<td>ACOS</td>
<td>求反余弦值，与函数 COS 互为反函数</td>
</tr>
<tr>
<td>TAN</td>
<td>求正切值</td>
</tr>
<tr>
<td>ATAN</td>
<td>求反正切值，与函数 TAN 互为反函数</td>
</tr>
<tr>
<td>COT</td>
<td>求余切值</td>
</tr>
</tbody></table>
<h5 id="3-2-字符串函数"><a href="#3-2-字符串函数" class="headerlink" title="3.2 字符串函数"></a>3.2 字符串函数</h5><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>LENGTH</td>
<td>计算字符串长度函数，返回字符串的字节长度</td>
</tr>
<tr>
<td>CONCAT</td>
<td>合并字符串函数，返回结果为连接参数产生的字符串，参数可以使一个或多个</td>
</tr>
<tr>
<td>INSERT</td>
<td>替换字符串函数</td>
</tr>
<tr>
<td>LOWER</td>
<td>将字符串中的字母转换为小写</td>
</tr>
<tr>
<td>UPPER</td>
<td>将字符串中的字母转换为大写</td>
</tr>
<tr>
<td>LEFT</td>
<td>从左侧字截取符串，返回字符串左边的若干个字符  left(‘javass’,4)</td>
</tr>
<tr>
<td>RIGHT</td>
<td>从右侧字截取符串，返回字符串右边的若干个字符</td>
</tr>
<tr>
<td>TRIM</td>
<td>删除字符串左右两侧的空格</td>
</tr>
<tr>
<td>REPLACE</td>
<td>字符串替换函数，返回替换后的新字符串</td>
</tr>
<tr>
<td>SUBSTRING</td>
<td>索引从1 开始，截取字符串，返回从指定位置开始的指定长度的字符换  substring(‘javahello’,1,4)</td>
</tr>
<tr>
<td>REVERSE</td>
<td>字符串反转（逆序）函数，返回与原始字符串顺序相反的字符串</td>
</tr>
</tbody></table>
<h6 id="1、合并concat"><a href="#1、合并concat" class="headerlink" title="1、合并concat"></a>1、合并concat</h6><p>concat(a,b,c)  合并</p>
<p>select empno,ename,<strong>concat(empno,ename)</strong> from emp;</p>
<p>select concatt(‘hello’,’world’)</p>
<h6 id="2、length"><a href="#2、length" class="headerlink" title="2、length()"></a>2、length()</h6><p>select *from emp where length(ename)=5;</p>
<h6 id="3、strcmp"><a href="#3、strcmp" class="headerlink" title="3、strcmp()"></a>3、strcmp()</h6><p>相同返回0，大于返回1，小于返回</p>
<h5 id="3-3-日期函数"><a href="#3-3-日期函数" class="headerlink" title="3.3 日期函数"></a>3.3 日期函数</h5><table>
<thead>
<tr>
<th>函数名称</th>
<th>作 用</th>
</tr>
</thead>
<tbody><tr>
<td>CURDATE 和 CURRENT_DATE</td>
<td>两个函数作用相同，返回当前系统的日期值</td>
</tr>
<tr>
<td>CURTIME 和 CURRENT_TIME</td>
<td>两个函数作用相同，返回当前系统的时间值</td>
</tr>
<tr>
<td>NOW 和  SYSDATE</td>
<td>两个函数作用相同，返回当前系统的日期和时间值</td>
</tr>
<tr>
<td>MONTH</td>
<td>获取指定日期中的月份</td>
</tr>
<tr>
<td>MONTHNAME</td>
<td>获取指定日期中的月份英文名称</td>
</tr>
<tr>
<td>DAYNAME</td>
<td>获取指定曰期对应的星期几的英文名称</td>
</tr>
<tr>
<td>DAYOFWEEK</td>
<td>获取指定日期对应的一周的索引位置值</td>
</tr>
<tr>
<td>WEEK</td>
<td>获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</td>
</tr>
<tr>
<td>DAYOFYEAR</td>
<td>获取指定曰期是一年中的第几天，返回值范围是1~366</td>
</tr>
<tr>
<td>DAYOFMONTH</td>
<td>获取指定日期是一个月中是第几天，返回值范围是1~31</td>
</tr>
<tr>
<td>YEAR</td>
<td>获取年份，返回值范围是 1970〜2069</td>
</tr>
<tr>
<td>TIME_TO_SEC</td>
<td>将时间参数转换为秒数</td>
</tr>
<tr>
<td>SEC_TO_TIME</td>
<td>将秒数转换为时间，与TIME_TO_SEC 互为反函数</td>
</tr>
<tr>
<td>DATE_ADD 和 ADDDATE</td>
<td>两个函数功能相同，都是向日期添加指定的时间间隔</td>
</tr>
<tr>
<td>DATE_SUB 和 SUBDATE</td>
<td>两个函数功能相同，都是向日期减去指定的时间间隔</td>
</tr>
<tr>
<td>ADDTIME</td>
<td>时间加法运算，在原始时间上添加指定的时间</td>
</tr>
<tr>
<td>SUBTIME</td>
<td>时间减法运算，在原始时间上减去指定的时间</td>
</tr>
<tr>
<td>DATEDIFF</td>
<td>获取两个日期之间间隔，返回参数 1 减去参数 2 的值</td>
</tr>
<tr>
<td>DATE_FORMAT</td>
<td>格式化指定的日期，根据参数返回指定格式的值</td>
</tr>
<tr>
<td>WEEKDAY</td>
<td>获取指定日期在一周内的对应的工作日索引</td>
</tr>
</tbody></table>
<p>current_date() 、current_time() 、<strong>now</strong>()</p>
<p><strong>year</strong>(now())、<strong>day</strong>(now())、<strong>hour</strong>(now())</p>
<p>day of week(now())、day of week(‘2020-8-22’)</p>
<p><strong>减法:</strong> <strong>datediff</strong> (‘2012-2-20’,’2012-2-22’)</p>
<p><strong>加法:</strong>  <strong>date_add</strong> (‘2020-2-20’, interval 1 date)</p>
<h5 id="3-4-聚合函数"><a href="#3-4-聚合函数" class="headerlink" title="3.4 聚合函数"></a>3.4 聚合函数</h5><table>
<thead>
<tr>
<th>函数名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>MAX</td>
<td>查询指定列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td>查询指定列的最小值</td>
</tr>
<tr>
<td>COUNT</td>
<td>统计查询结果的行数</td>
</tr>
<tr>
<td>SUM</td>
<td>求和，返回指定列的总和</td>
</tr>
<tr>
<td>AVG</td>
<td>求平均值，返回指定列数据的平均值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>视图</title>
    <url>/2020/11/11/06%E8%A7%86%E5%9B%BEview/</url>
    <content><![CDATA[<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><blockquote>
<p>视图是一条select语句执行返回的结果，是一种虚拟存在的表。</p>
</blockquote>
<p><strong>作用</strong></p>
<blockquote>
<ul>
<li>简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是<strong>过滤好的复合条件的结果集。</strong></li>
<li>安全：<strong>使用视图的用户只能访问他们被允许查询的结果集</strong>，数据库对表的<strong>权限管理</strong>并不能限制到某个行某个列，但是通过视图就可以简单的实现。</li>
<li>数据独立：一旦视图的结构确定了，可以<strong>屏蔽表结构变化对用户的影响</strong>，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</li>
</ul>
</blockquote>
<h4 id="2、创建视图"><a href="#2、创建视图" class="headerlink" title="2、创建视图"></a>2、创建视图</h4><blockquote>
<p>create 视图名 as (select语句)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW v_general </span><br><span class="line">AS</span><br><span class="line">SELECT empno,ename,job,mgr,deptno FROM emp;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201018202106673.png" alt="image-20201018202106673" style="zoom:80%;" />



<h4 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h4><p><strong>更新视图的同时也会更新原有表！！！</strong></p>
<blockquote>
<p>update 视图名 set 字段名=‘’  where ..</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018202711004.png" alt="image-20201018202711004" style="zoom:80%;" />

<blockquote>
<p><strong>修改视图</strong>：alter view 视图名 as (select语句)  </p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201018203500053.png" alt="image-20201018203500053"></p>
<blockquote>
<p>show create view 视图名 </p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018203846648.png" alt="image-20201018203846648" style="zoom:80%;" />

<blockquote>
<p>删除视图：drop view 视图名</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018203938785.png" alt="image-20201018203938785" style="zoom:80%;" />

<h4 id="4、查看视图"><a href="#4、查看视图" class="headerlink" title="4、查看视图"></a>4、查看视图</h4><blockquote>
<p>show tables;</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018203633852.png" alt="image-20201018203633852" style="zoom:80%;" />


]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>DCL</title>
    <url>/2020/11/11/08DCL/</url>
    <content><![CDATA[<p><strong>查看用户名</strong>    select *from user; <strong>选择mysql数据库</strong></p>
<h4 id="1、创建用户"><a href="#1、创建用户" class="headerlink" title="1、创建用户"></a>1、创建用户</h4><p><strong>create</strong> <strong>user</strong> ‘用户名’ @‘主机名’ <strong>identified by</strong> ‘密码’;</p>
<p><strong>主机名</strong>： <strong>localhost</strong>本地登录，**%**可异地登陆</p>
<h4 id="2、设置权限"><a href="#2、设置权限" class="headerlink" title="2、设置权限"></a>2、设置权限</h4><p><strong>grant</strong> 权限1，权限2 <strong>on</strong> 数据库名.表名 <strong>to</strong> ‘用户名‘@’主机名’;</p>
<p>权限：create/alter/select/insert/update /<strong>all</strong></p>
<h4 id="3、回收权限"><a href="#3、回收权限" class="headerlink" title="3、回收权限"></a>3、回收权限</h4><p><strong>revoke</strong> 权限1，权限2 <strong>on</strong> 数据库名.表名 <strong>from</strong> ‘用户名‘@’主机名’;</p>
<h4 id="4、用户权限"><a href="#4、用户权限" class="headerlink" title="4、用户权限"></a>4、用户权限</h4><p><strong>查看</strong> <strong>show grants for</strong> ‘用户名‘@’主机名’</p>
<p><strong>删除用户</strong> <strong>drop</strong> user ‘用户名‘@’主机名’</p>
<h4 id="5、修改密码"><a href="#5、修改密码" class="headerlink" title="5、修改密码"></a>5、修改密码</h4><p>管理员：mysqladmin -uroot -p password 新密码</p>
<p>普通用户： <strong>set password for</strong> ‘用户名‘@’主机名’= password(‘新密码’)</p>
<h4 id="6、解决mysql本地ip地址不能访问"><a href="#6、解决mysql本地ip地址不能访问" class="headerlink" title="6、解决mysql本地ip地址不能访问"></a>6、解决mysql本地ip地址不能访问</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 修改ip访问权限</span><br><span class="line">update user set host&#x3D;&#39;%&#39; where user&#x3D;&#39;root&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 授予所有权限</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</span><br><span class="line">flush identified;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>sql语句优化</title>
    <url>/2020/11/11/02SQL%E8%AF%AD%E5%8F%A5%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><blockquote>
<p>数据量增加，性能问题成为整个系统性能的瓶颈。</p>
</blockquote>
<h3 id="一、定位"><a href="#一、定位" class="headerlink" title="一、定位"></a>一、定位</h3><h4 id="1、查看SQL执行频率"><a href="#1、查看SQL执行频率" class="headerlink" title="1、查看SQL执行频率"></a>1、查看SQL执行频率</h4><blockquote>
<p>show [session|global] status 命令提供服务器状态信息。</p>
<ul>
<li><p>session级(当前连接)的统计结果，默认是session.</p>
</li>
<li><p>global级(数据库上次启动至今)的统计结果</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Com____&#39;;  -- 针对所有的存储引擎</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show status like &#39;Innodb_rows_%&#39;; -- 针对innodb存储引擎</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Com_***      :  这些参数对于 <code>所有存储引擎</code>的表操作 都会进行累计。</p>
<p>Innodb_*** :  这几个参数只是针对 <code>InnoDB 存储引擎</code> 的，累加的算法也略有不同。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201019232242970.png" alt="image-20201019232242970" style="zoom:80%;" /><img src="https://csn.damyoung.cn/image-20201020082620092.png" alt="image-20201020082620092" style="zoom:80%;" /></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Com_select</td>
<td>执行 select 操作的次数，一次查询只累加 1。</td>
</tr>
<tr>
<td align="left">Com_insert</td>
<td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td>
</tr>
<tr>
<td align="left">Com_update</td>
<td>执行 UPDATE 操作的次数。</td>
</tr>
<tr>
<td align="left">Com_delete</td>
<td>执行 DELETE 操作的次数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_read</td>
<td>select 查询返回的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_inserted</td>
<td>执行 INSERT 操作插入的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_updated</td>
<td>执行 UPDATE 操作更新的行数。</td>
</tr>
<tr>
<td align="left">Innodb_rows_deleted</td>
<td>执行 DELETE 操作删除的行数。</td>
</tr>
<tr>
<td align="left">Connections</td>
<td>试图连接 MySQL 服务器的次数。</td>
</tr>
<tr>
<td align="left">Uptime</td>
<td>服务器工作时间。</td>
</tr>
<tr>
<td align="left">Slow_queries</td>
<td>慢查询的次数。</td>
</tr>
</tbody></table>
<h4 id="2、定位低效率执行SQL"><a href="#2、定位低效率执行SQL" class="headerlink" title="2、定位低效率执行SQL"></a>2、定位低效率执行SQL</h4><blockquote>
<ul>
<li>慢查询日志：用–log-slow-queries[=file name]选项启动时，mysqld写一个包含所有执行时间超过long_query_time秒的SQL语句的日志文件。<strong>慢查询日志在查询结束后才记录</strong>，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题</li>
<li>show processlist：可以使用<code>show processlist</code>命令查看当前MySQL在进行的线程<ul>
<li>包括线程的状态、是否锁表等</li>
<li>可以<strong>实时</strong>地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li>
</ul>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201024163523305.png" alt="image-20201024163523305" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1） id列，用户登录mysql时，系统分配的&quot;connection_id&quot;，可以使用函数connection_id()查看</span><br><span class="line"></span><br><span class="line">2） user列，显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</span><br><span class="line"></span><br><span class="line">3） host列，显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</span><br><span class="line"></span><br><span class="line">4） db列，显示这个进程目前连接的是哪个数据库</span><br><span class="line"></span><br><span class="line">5） command列，显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</span><br><span class="line"></span><br><span class="line">6） time列，显示这个状态持续的时间，单位是秒</span><br><span class="line"></span><br><span class="line">7） state列，显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</span><br><span class="line"></span><br><span class="line">8） info列，显示这个sql语句，是判断问题语句的一个重要依据</span><br></pre></td></tr></table></figure>



<h4 id="3、explain分析执行计划"><a href="#3、explain分析执行计划" class="headerlink" title="3、explain分析执行计划"></a>3、explain分析执行计划</h4><blockquote>
<p>通过 <strong>explain</strong> 或者 <strong>desc</strong> 命令获取 MySQL如何执行 <strong>select</strong> 语句的信息，包括在 SELECT 语句执行过程中<strong>表如何连接和连接的顺序</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select*from order_all where order_id&#x3D;1;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020104105013.png" alt="image-20201020104105013"></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td>
</tr>
<tr>
<td>select_type</td>
<td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td>
</tr>
<tr>
<td>table</td>
<td>输出结果集的表</td>
</tr>
<tr>
<td>type</td>
<td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td>
</tr>
<tr>
<td>possible_keys</td>
<td>表示查询时，可能使用的索引</td>
</tr>
<tr>
<td>key</td>
<td>表示实际使用的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>索引字段的长度</td>
</tr>
<tr>
<td>rows</td>
<td>扫描行的数量</td>
</tr>
<tr>
<td>extra</td>
<td>执行情况的说明和描述</td>
</tr>
</tbody></table>
<h5 id="3-1-准备"><a href="#3-1-准备" class="headerlink" title="3.1 准备"></a>3.1 准备</h5><img src="https://csn.damyoung.cn/1556122799330.png" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;t_role&#96; (</span><br><span class="line">  &#96;id&#96; varchar(32) NOT NULL,</span><br><span class="line">  &#96;role_name&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;role_code&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  &#96;description&#96; varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_role_name&#96; (&#96;role_name&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;t_user&#96; (</span><br><span class="line">  &#96;id&#96; varchar(32) NOT NULL,</span><br><span class="line">  &#96;username&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(96) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(45) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user_role&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL auto_increment ,</span><br><span class="line">  &#96;user_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;role_id&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;fk_ur_user_id&#96; (&#96;user_id&#96;),</span><br><span class="line">  KEY &#96;fk_ur_role_id&#96; (&#96;role_id&#96;),</span><br><span class="line">  CONSTRAINT &#96;fk_ur_role_id&#96; FOREIGN KEY (&#96;role_id&#96;) REFERENCES &#96;t_role&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION,</span><br><span class="line">  CONSTRAINT &#96;fk_ur_user_id&#96; FOREIGN KEY (&#96;user_id&#96;) REFERENCES &#96;t_user&#96; (&#96;id&#96;) ON DELETE NO ACTION ON UPDATE NO ACTION</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;1&#39;,&#39;super&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;超级管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;2&#39;,&#39;admin&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;系统管理员&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;3&#39;,&#39;itcast&#39;,&#39;$2a$10$8qmaHgUFUAmPR5pOuWhYWOr291WJYjHelUlYn07k5ELF8ZCrW0Cui&#39;,&#39;test02&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;4&#39;,&#39;stu1&#39;,&#39;$2a$10$pLtt2KDAFpwTWLjNsmTEi.oU1yOZyIn9XkziK&#x2F;y&#x2F;spH5rftCpUMZa&#39;,&#39;学生1&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;5&#39;,&#39;stu2&#39;,&#39;$2a$10$nxPKkYSez7uz2YQYUnwhR.z57km3yqKn3Hr&#x2F;p1FR6ZKgc18u.Tvqm&#39;,&#39;学生2&#39;);</span><br><span class="line">insert into &#96;t_user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;, &#96;name&#96;) values(&#39;6&#39;,&#39;t1&#39;,&#39;$2a$10$TJ4TmCdK.X4wv&#x2F;tCqHW14.w70U3CC33CeVncD3SLmyMXMknstqKRe&#39;,&#39;老师1&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;5&#39;,&#39;学生&#39;,&#39;student&#39;,&#39;学生&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;7&#39;,&#39;老师&#39;,&#39;teacher&#39;,&#39;老师&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;8&#39;,&#39;教学管理员&#39;,&#39;teachmanager&#39;,&#39;教学管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;9&#39;,&#39;管理员&#39;,&#39;admin&#39;,&#39;管理员&#39;);</span><br><span class="line">INSERT INTO &#96;t_role&#96; (&#96;id&#96;, &#96;role_name&#96;, &#96;role_code&#96;, &#96;description&#96;) VALUES(&#39;10&#39;,&#39;超级管理员&#39;,&#39;super&#39;,&#39;超级管理员&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO user_role(id,user_id,role_id) VALUES(NULL, &#39;1&#39;, &#39;5&#39;),(NULL, &#39;1&#39;, &#39;7&#39;),(NULL, &#39;2&#39;, &#39;8&#39;),(NULL, &#39;3&#39;, &#39;9&#39;),(NULL, &#39;4&#39;, &#39;8&#39;),(NULL, &#39;5&#39;, &#39;10&#39;) ;</span><br></pre></td></tr></table></figure>



<h5 id="3-2-id"><a href="#3-2-id" class="headerlink" title="3.2 id"></a>3.2 id</h5><blockquote>
<p>id 字段是 select查询的序列号，是一组数字，表示的是<strong>查询中执行select子句或者是操作表的顺序</strong></p>
</blockquote>
<ul>
<li><strong>id 相同</strong>表示加载表的顺序是从上到下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from t_role r, t_user u, user_role ur where r.id &#x3D; ur.role_id and u.id &#x3D; ur.user_id ;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020105535724.png" alt="image-20201020105535724"></p>
<ul>
<li><strong>id 不同</strong>id值越大，优先级越高，越先被执行。 </li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role <span class="keyword">WHERE</span> <span class="keyword">id</span> = (<span class="keyword">SELECT</span> role_id <span class="keyword">FROM</span> user_role <span class="keyword">WHERE</span> user_id = (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_user <span class="keyword">WHERE</span> username = <span class="string">&#x27;stu1&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020105627907.png" alt="image-20201020105627907"></p>
<ul>
<li><strong>id 有相同，也有不同，同时存在</strong>。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_role r , (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_role ur <span class="keyword">WHERE</span> ur.<span class="string">`user_id`</span> = <span class="string">&#x27;2&#x27;</span>) a <span class="keyword">WHERE</span> r.id = a.role_id ; </span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020105753608.png" alt="image-20201020105753608"></p>
<h5 id="3-3-select-type"><a href="#3-3-select-type" class="headerlink" title="3.3 select_type"></a>3.3 select_type</h5><blockquote>
<p>从上到下执行效率越来越慢</p>
</blockquote>
<table>
<thead>
<tr>
<th>select_type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>简单的select查询，查询中不包含子查询或者UNION</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>查询中若包含任何复杂的子查询，<strong>最外层</strong>查询标记为该标识</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>在SELECT 或 WHERE 列表中<strong>包含了子查询</strong></td>
</tr>
<tr>
<td>DERIVED</td>
<td>在<strong>from</strong>列表中包含的<strong>子查询</strong>，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td>
</tr>
<tr>
<td>UNION</td>
<td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>从UNION表获取结果的SELECT</td>
</tr>
</tbody></table>
<p><img src="https://csn.damyoung.cn/image-20201020110651314.png" alt="image-20201020110651314"></p>
<blockquote>
<p><derived2> 表示在衍生表id=2的表中查询</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020110922568.png" alt="image-20201020110922568"></p>
<p><img src="https://csn.damyoung.cn/image-20201020111309059.png" alt="image-20201020111309059"></p>
<h5 id="3-4-table"><a href="#3-4-table" class="headerlink" title="3.4 table"></a>3.4 table</h5><blockquote>
<p>展示这一行的数据是关于哪一张表的 </p>
</blockquote>
<h5 id="3-5-type"><a href="#3-5-type" class="headerlink" title="3.5 type"></a>3.5 type</h5><blockquote>
<p><strong>显示访问类型</strong></p>
<p>从下到上降低，<strong>一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>type</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>NULL</td>
<td>MySQL不访问任何表，索引，直接返回结果</td>
</tr>
<tr>
<td>system</td>
<td><strong>所查询的表只有一行记录</strong>(等于系统表)，这是const类型的特例，一般不会出现</td>
</tr>
<tr>
<td>const</td>
<td>表示通过<strong>索引一次</strong>就找到了，const 用于比较<strong>primary key</strong> 或者 <strong>unique</strong> 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常量。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td>
</tr>
<tr>
<td>eq_ref</td>
<td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，<strong>关联查询出的记录只有一条</strong>。常见于主键或唯一索引扫描</td>
</tr>
<tr>
<td>ref</td>
<td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td>
</tr>
<tr>
<td>range</td>
<td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 <strong>between ， &lt; , &gt; , in</strong> 等操作。</td>
</tr>
<tr>
<td>index</td>
<td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td>
</tr>
<tr>
<td>all</td>
<td>将遍历全表以找到匹配的行</td>
</tr>
</tbody></table>
<p><img src="https://csn.damyoung.cn/image-20201020112143416.png" alt="image-20201020112143416"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112243331.png" alt="image-20201020112243331"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112422123.png" alt="image-20201020112422123"></p>
<blockquote>
<p>使用主键的关联查询出来的记录只有一条</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020112922768.png" alt="image-20201020112922768"></p>
<p><img src="https://csn.damyoung.cn/image-20201020112948978.png" alt="image-20201020112948978"></p>
<h5 id="3-6-key"><a href="#3-6-key" class="headerlink" title="3.6 key"></a>3.6 key</h5><blockquote>
<ul>
<li><p>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </p>
</li>
<li><p>key ： <strong>实际使用</strong>的索引， 如果为NULL， 则没有使用索引。</p>
</li>
<li><p>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下， 长度越短越好 。</p>
</li>
</ul>
</blockquote>
<h5 id="3-7-rows"><a href="#3-7-rows" class="headerlink" title="3.7 rows"></a>3.7 rows</h5><blockquote>
<p>扫描行的数量。</p>
</blockquote>
<h5 id="3-8-extra"><a href="#3-8-extra" class="headerlink" title="3.8 extra"></a>3.8 extra</h5><blockquote>
<p>其他的额外的执行计划信息，在该列展示 。</p>
<p>优化前两个，保持第三个</p>
</blockquote>
<table>
<thead>
<tr>
<th>extra</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>using  filesort</td>
<td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “<strong>文件排序</strong>”, 效率低。</td>
</tr>
<tr>
<td>using  temporary</td>
<td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用<strong>临时表</strong>。常见于 order by 和 group by； 效率低</td>
</tr>
<tr>
<td>using  index</td>
<td>表示相应的select操作使用了<strong>覆盖索引</strong>， 避免访问表的数据行， 效率不错。</td>
</tr>
</tbody></table>
<img src="https://csn.damyoung.cn/image-20201020120436509.png" alt="image-20201020120436509" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201020120644601.png" alt="image-20201020120644601" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201020120745269.png" alt="image-20201020120745269" style="zoom:80%;" />



<h4 id="4、profile分析SQL时间耗费"><a href="#4、profile分析SQL时间耗费" class="headerlink" title="4、profile分析SQL时间耗费"></a>4、profile分析SQL时间耗费</h4><blockquote>
<p>show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p>
<ul>
<li><p>have_profiling 参数，能够看到当前MySQL是否支持profile：</p>
</li>
<li><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020131743822.png" alt="image-20201020131743822" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set profiling&#x3D;1; -- 开启profiling开关</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show profiles;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020132119836.png" alt="image-20201020132119836" style="zoom:80%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show profile [cpu] for query 5;</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020132205385.png" alt="image-20201020132205385" style="zoom:80%;" />

<blockquote>
<p><strong>Sending data</strong> 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</p>
<ul>
<li>MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Status</td>
<td>sql 语句执行的状态</td>
</tr>
<tr>
<td>Duration</td>
<td>sql 执行过程中每一个步骤的耗时</td>
</tr>
<tr>
<td>CPU_user</td>
<td>当前用户占有的cpu</td>
</tr>
<tr>
<td>CPU_system</td>
<td>系统占有的cpu</td>
</tr>
</tbody></table>
<h4 id="5、trace分析优化器执行计划"><a href="#5、trace分析优化器执行计划" class="headerlink" title="5、trace分析优化器执行计划"></a>5、trace分析优化器执行计划</h4><blockquote>
<p>通过trace文件能够进一步了解为什么优化器<code>optimiter</code>选择A计划, 而不是选择B计划。</p>
<p>打开trace ， 设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET optimizer_trace&#x3D;&quot;enabled&#x3D;on&quot;,end_markers_in_json&#x3D;on;</span><br><span class="line">set optimizer_trace_max_mem_size&#x3D;1000000;</span><br></pre></td></tr></table></figure>

<p>执行SQL语句 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tb_item <span class="keyword">where</span> <span class="keyword">id</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.optimizer_trace\G;</span><br></pre></td></tr></table></figure>



<h3 id="二、优化语句"><a href="#二、优化语句" class="headerlink" title="二、优化语句"></a>二、优化语句</h3><h4 id="1、大批量插入数据"><a href="#1、大批量插入数据" class="headerlink" title="1、大批量插入数据"></a>1、大批量插入数据</h4><p><strong>准备</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb_user_1&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(96) NOT NULL,</span><br><span class="line">  &#96;name&#96; varchar(45) NOT NULL,</span><br><span class="line">  &#96;birthday&#96; datetime DEFAULT NULL,</span><br><span class="line">  &#96;sex&#96; char(1) DEFAULT NULL,</span><br><span class="line">  &#96;email&#96; varchar(45) DEFAULT NULL,</span><br><span class="line">  &#96;phone&#96; varchar(45) DEFAULT NULL,</span><br><span class="line">  &#96;qq&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;status&#96; varchar(32) NOT NULL COMMENT &#39;用户状态&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime NOT NULL,</span><br><span class="line">  &#96;update_time&#96; datetime DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unique_user_username&#96; (&#96;username&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8 ;</span><br></pre></td></tr></table></figure>

<p><strong>load执行语句</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load data local infile &#39;&#x2F;root&#x2F;sql1.log&#39; into </span><br><span class="line"></span><br><span class="line">table tb_user_1 </span><br><span class="line"></span><br><span class="line">fields terminated by &#39;,&#39; </span><br><span class="line"></span><br><span class="line">lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>InnoDB 类型的表，有以下几种方式可以提高导入的效率</p>
</blockquote>
<h5 id="提高导入效率"><a href="#提高导入效率" class="headerlink" title="提高导入效率"></a>提高导入效率</h5><h5 id="1-1-主键顺序插入"><a href="#1-1-主键顺序插入" class="headerlink" title="1.1 主键顺序插入"></a>1.1 主键顺序插入</h5><blockquote>
<p>InnoDB类型的表是按照主键的顺序保存的，所以将导入的数据按照主键的顺序排列，可以有效的提高导入数据的效率。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率</p>
</blockquote>
<h6 id="导入有序表"><a href="#导入有序表" class="headerlink" title="导入有序表"></a>导入有序表</h6><p><img src="https://csn.damyoung.cn/image-20201021140542607.png" alt="image-20201021140542607"></p>
<h6 id="导入无序表"><a href="#导入无序表" class="headerlink" title="导入无序表"></a>导入无序表</h6><p><img src="https://csn.damyoung.cn/image-20201021140743217.png" alt="image-20201021140743217"></p>
<h5 id="1-2-关闭唯一性校验"><a href="#1-2-关闭唯一性校验" class="headerlink" title="1.2 关闭唯一性校验"></a>1.2 关闭唯一性校验</h5><blockquote>
<p>在导入数据前执行 set unique_checks=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率</p>
</blockquote>
<h5 id="1-3-手动提交事务"><a href="#1-3-手动提交事务" class="headerlink" title="1.3 手动提交事务"></a>1.3 手动提交事务</h5><blockquote>
<p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率</p>
</blockquote>
<h4 id="2、优化insert语句"><a href="#2、优化insert语句" class="headerlink" title="2、优化insert语句"></a>2、优化insert语句</h4><h5 id="2-1-减少连接次数"><a href="#2-1-减少连接次数" class="headerlink" title="2.1 减少连接次数"></a>2.1 减少连接次数</h5><ul>
<li>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的<strong>缩减客户端与数据库之间的连接、关闭等消耗</strong>。使得效率比分开执行的单个insert语句快。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Cat&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_test <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;Jerry&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>优化后的方案为 ： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;)，(3,&#39;Jerry&#39;);</span><br></pre></td></tr></table></figure>



<h5 id="2-2-在事务中进行数据插入"><a href="#2-2-在事务中进行数据插入" class="headerlink" title="2.2 在事务中进行数据插入"></a>2.2 在事务中进行数据插入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>



<h5 id="2-3-数据有序插入"><a href="#2-3-数据有序插入" class="headerlink" title="2.3 数据有序插入"></a>2.3 数据有序插入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(4,&#39;Tim&#39;);</span><br><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">insert into tb_test values(5,&#39;Rose&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into tb_test values(1,&#39;Tom&#39;);</span><br><span class="line">insert into tb_test values(2,&#39;Cat&#39;);</span><br><span class="line">insert into tb_test values(3,&#39;Jerry&#39;);</span><br><span class="line">insert into tb_test values(4,&#39;Tim&#39;);</span><br><span class="line">insert into tb_test values(5,&#39;Rose&#39;);</span><br></pre></td></tr></table></figure>



<h4 id="3、优化order-by语句"><a href="#3、优化order-by语句" class="headerlink" title="3、优化order by语句"></a>3、优化order by语句</h4><h5 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;emp&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(100) NOT NULL,</span><br><span class="line">  &#96;age&#96; int(3) NOT NULL,</span><br><span class="line">  &#96;salary&#96; int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB  DEFAULT CHARSET&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;1&#39;,&#39;Tom&#39;,&#39;25&#39;,&#39;2300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;2&#39;,&#39;Jerry&#39;,&#39;30&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;3&#39;,&#39;Luci&#39;,&#39;25&#39;,&#39;2800&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;4&#39;,&#39;Jay&#39;,&#39;36&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;5&#39;,&#39;Tom2&#39;,&#39;21&#39;,&#39;2200&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;6&#39;,&#39;Jerry2&#39;,&#39;31&#39;,&#39;3300&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;7&#39;,&#39;Luci2&#39;,&#39;26&#39;,&#39;2700&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;8&#39;,&#39;Jay2&#39;,&#39;33&#39;,&#39;3500&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;9&#39;,&#39;Tom3&#39;,&#39;23&#39;,&#39;2400&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;10&#39;,&#39;Jerry3&#39;,&#39;32&#39;,&#39;3100&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;11&#39;,&#39;Luci3&#39;,&#39;26&#39;,&#39;2900&#39;);</span><br><span class="line">insert into &#96;emp&#96; (&#96;id&#96;, &#96;name&#96;, &#96;age&#96;, &#96;salary&#96;) values(&#39;12&#39;,&#39;Jay3&#39;,&#39;37&#39;,&#39;4500&#39;);</span><br><span class="line"></span><br><span class="line">create index idx_emp_age_salary on emp(age,salary);</span><br></pre></td></tr></table></figure>



<h5 id="3-2-filesort排序"><a href="#3-2-filesort排序" class="headerlink" title="3.2 filesort排序"></a>3.2 filesort排序</h5><blockquote>
<p>通过<strong>对返回数据进行排序</strong>，也就是通常说的 <code>filesort</code> 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020212512988.png" alt="image-20201020212512988" style="zoom:80%;" />



<h5 id="3-3-using-index排序"><a href="#3-3-using-index排序" class="headerlink" title="3.3 using index排序"></a>3.3 using index排序</h5><blockquote>
<p>通过有序索引顺序扫描<strong>直接返回有序数据</strong>，这种情况即为 using index，不需要额外排序，操作效率高。</p>
<p>id,age,salary均有索引</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020212818703.png" alt="image-20201020212818703"></p>
<p><img src="https://csn.damyoung.cn/image-20201020212944165.png" alt="image-20201020212944165"></p>
<h5 id="3-4-多字段排序"><a href="#3-4-多字段排序" class="headerlink" title="3.4 多字段排序"></a>3.4 多字段排序</h5><blockquote>
<ul>
<li>尽量减少额外的排序，通过索引直接返回有序数据。</li>
<li>where 条件和Order by 使用相同的索引，</li>
<li>Order By 的顺序和索引顺序相同， </li>
<li>Order  by 的字段都是升序，或者都是降序。否则肯定需要额外的操作，这样就会出现FileSort。</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020213149376.png" alt="image-20201020213149376"></p>
<h5 id="3-5-filesort的优化"><a href="#3-5-filesort的优化" class="headerlink" title="3.5 filesort的优化"></a>3.5 filesort的优化</h5><blockquote>
<p>通过创建合适的索引，能够减少 Filesort 的出现，在某些情况下，条件限制不能让Filesort消失，那就需要加快 Filesort的排序操作</p>
</blockquote>
<blockquote>
<p>对于Filesort ， MySQL 有两种排序算法</p>
<p>通过比较系统变量 <code>max_length_for_sort_data</code> 和<code>查询语句</code>取出的字段总大小， 来判定是否那种排序算法</p>
<p>如果<code>max_length_for_sort_data</code> 更大，那么使用第二种优化之后的算法；否则使用第一种。</p>
</blockquote>
<ul>
<li><p>两次扫描算法</p>
<ul>
<li>首先根据条件取出<strong>排序字段和行指针信息</strong>，在排序区 sort buffer 中排序。</li>
<li>如果sort buffer不够，则在临时表 temporary table 中存储排序结果。</li>
<li>完成排序之后，再根据行指针回表读取记录，该操作可能会导致大量随机I/O操作。</li>
</ul>
</li>
<li><p>一次扫描算法：<strong>一次性</strong>取出满足条件的所有字段，然后在排序区 sort  buffer 中排序后直接输出结果集。</p>
<p>​                           排序时<strong>内存开销较大</strong>，但是排序效率比两次扫描算法要高。</p>
</li>
<li><p>可以适当提高 <code>sort_buffer_size</code>  和 <code>max_length_for_sort_data</code>  系统变量，来增大排序区的大小，提高排序的效率。</p>
</li>
</ul>
<img src="https://csn.damyoung.cn/image-20201020214259798.png" alt="image-20201020214259798" style="zoom:80%;" />



<h4 id="4、优化group-by语句"><a href="#4、优化group-by语句" class="headerlink" title="4、优化group by语句"></a>4、优化group by语句</h4><blockquote>
<ul>
<li>GROUP BY 也会进行排序操作</li>
<li> 与ORDER BY 相比,GROUP BY 主要只是多了排序之后的分组操作。</li>
<li>如果在分组的时候还使用了其他的一些聚合函数，那么还需要一些聚合函数的计算</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021133617215.png" alt="image-20201021133617215"></p>
<h5 id="4-1-禁止排序"><a href="#4-1-禁止排序" class="headerlink" title="4.1 禁止排序"></a>4.1 禁止排序</h5><blockquote>
<p>如果查询包含 group by 但是用户想要避免排序结果的消耗， 则可以执行<code>order by null</code> 禁止排序</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select age,count(*) from emp group by age order by null;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021133640908.png" alt="image-20201021133640908"></p>
<h5 id="4-2-使用索引"><a href="#4-2-使用索引" class="headerlink" title="4.2 使用索引"></a>4.2 使用索引</h5><blockquote>
<p>在GROUP BY 的实现过程中，与 ORDER BY 一样也可以利用到索引。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_emp_age_salary on emp(age,salary)；</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021133738142.png" alt="image-20201021133738142" style="zoom:80%;" />



<h4 id="5、优化子查询"><a href="#5、优化子查询" class="headerlink" title="5、优化子查询"></a>5、优化子查询</h4><blockquote>
<p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。</p>
<p><strong>子查询是可以被更高效的多表连接查询<code>join</code>替代</strong>。</p>
</blockquote>
<h5 id="5-1-使用连接查询"><a href="#5-1-使用连接查询" class="headerlink" title="5.1 使用连接查询"></a>5.1 使用连接查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from t_user where id in (select user_id from user_role );</span><br></pre></td></tr></table></figure>

<p>优化后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 多表查询</span><br><span class="line">explain select * from t_user u , user_role ur where u.id &#x3D; ur.user_id;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>连接(Join)查询之所以更有效率一些 ，是因为MySQL不需要在内存中<strong>创建临时表</strong>来完成这个逻辑上需要两个步骤的查询工作</p>
</blockquote>
<h4 id="6、优化or条件"><a href="#6、优化or条件" class="headerlink" title="6、优化or条件"></a>6、优化or条件</h4><h5 id="6-1-索引"><a href="#6-1-索引" class="headerlink" title="6.1 索引"></a>6.1 索引</h5><blockquote>
<ul>
<li>每个条件必须用到索引</li>
<li>只能使用单值索引，不能使用复合索引</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021141923214.png" alt="image-20201021141923214" style="zoom:80%;" />



<h5 id="6-2-使用union替换"><a href="#6-2-使用union替换" class="headerlink" title="6.2 使用union替换"></a>6.2 使用union替换</h5><blockquote>
<ul>
<li><p>UNION 语句的 type 值为 <code>ref</code>，OR 语句的 type 值为 <code>range</code>，可以看到这是一个很明显的差距</p>
</li>
<li><p>UNION 语句的 ref 值为 <code>const</code>，OR 语句的 ref 值为 <code>null</code>，<strong>const 表示是常量值引用，非常快</strong></p>
</li>
</ul>
<p>这两项的差距就说明了 UNION 要优于 OR 。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021142314495.png" alt="image-20201021142314495"></p>
<h4 id="7、优化分页查询"><a href="#7、优化分页查询" class="headerlink" title="7、优化分页查询"></a>7、优化分页查询</h4><blockquote>
<p>一般分页查询时，通过创建覆盖索引能够比较好地提高性能。</p>
<p>一个常见又非常头疼的问题就是 limit 2000000,10  ，此时需要MySQL排序前2000010 记录，仅仅返回2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大</p>
</blockquote>
<h5 id="7-1-索引排序"><a href="#7-1-索引排序" class="headerlink" title="7.1 索引排序"></a>7.1 索引排序</h5><blockquote>
<p>在<strong>索引上完成排序分页</strong>操作，最后根据主键关联回原表查询所需要的其他列内容。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201021143105977.png" alt="image-20201021143105977"></p>
<h5 id="7-2-条件查询替换"><a href="#7-2-条件查询替换" class="headerlink" title="7.2 条件查询替换"></a>7.2 条件查询替换</h5><blockquote>
<p>该方案适用于主键自增的表，可以把Limit 查询转换成某个位置的查询 。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201021143356602.png" alt="image-20201021143356602" style="zoom:80%;" />



<h4 id="8、SQL提示"><a href="#8、SQL提示" class="headerlink" title="8、SQL提示"></a>8、SQL提示</h4><h5 id="8-1-use-index"><a href="#8-1-use-index" class="headerlink" title="8.1 use index"></a>8.1 use index</h5><blockquote>
<p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">explain select *from tb_seller use index(idx_seller_name) where name&#x3D;&#39;小米科技&#39;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021143950081.png" alt="image-20201021143950081"></p>
<h5 id="8-2-ignore-index"><a href="#8-2-ignore-index" class="headerlink" title="8.2 ignore index"></a>8.2 ignore index</h5><blockquote>
<p>用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller ignore index(idx_seller_name) where name &#x3D; &#39;小米科技&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201021144137493.png" alt="image-20201021144137493"></p>
<h5 id="8-3-force-index"><a href="#8-3-force-index" class="headerlink" title="8.3 force index"></a>8.3 force index</h5><blockquote>
<p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint 。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_address on tb_seller(address);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201021144427022.png" alt="image-20201021144427022" style="zoom:80%;" />]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>存储过程与函数</title>
    <url>/2020/11/11/07%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="一、存储过程与函数"><a href="#一、存储过程与函数" class="headerlink" title="一、存储过程与函数"></a>一、存储过程与函数</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><blockquote>
<p>存储过程和函数是事先经过编译并存储在数据库中的一段 SQL 语句的集合</p>
</blockquote>
<p><strong>作用</strong> </p>
<blockquote>
<p>调用存储过程和函数可以<strong>减少数据在数据库和应用服务器之间的传输</strong>，对于提高数据处理的效率是有好处的。    </p>
</blockquote>
<blockquote>
<p>  存储过程和函数的区别在于函数必须有返回值，而存储过程没有。</p>
<ul>
<li><p>函数 ： 是一个有返回值的过程 ；</p>
</li>
<li><p>过程 ： 是一个没有返回值的函数 ；</p>
</li>
</ul>
</blockquote>
<h4 id="2、存储过程procedure"><a href="#2、存储过程procedure" class="headerlink" title="2、存储过程procedure"></a>2、存储过程procedure</h4><h5 id="2-1-创建存储过程"><a href="#2-1-创建存储过程" class="headerlink" title="2.1  创建存储过程"></a>2.1  创建存储过程</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 声明SQL语句的分隔符</span><br><span class="line">delimiter $</span><br><span class="line"></span><br><span class="line">create procedure pro_test1()</span><br><span class="line">begin</span><br><span class="line">	select &#39;Hello Mysql&#39; ;</span><br><span class="line">end$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建存储过程函数</span><br><span class="line">mysql&gt; create procedure pro_test1() </span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; select &#39;hello&#39;;</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; #</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 显示存储过程的状态信息</span><br><span class="line">mysql&gt; show procedure status\G#</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                  Db: demo_01</span><br><span class="line">                Name: pro_test1</span><br><span class="line">                Type: PROCEDURE</span><br><span class="line">             Definer: root@localhost</span><br><span class="line">            Modified: 2020-10-18 05:54:27</span><br><span class="line">             Created: 2020-10-18 05:54:27</span><br><span class="line">       Security_type: DEFINER</span><br><span class="line">             Comment: </span><br><span class="line">character_set_client: utf8</span><br><span class="line">collation_connection: utf8_general_ci</span><br><span class="line">  Database Collation: utf8mb4_general_ci</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">-- 定义分隔符</span><br><span class="line">mysql&gt; delimiter ;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-2-调用"><a href="#4-4-2-调用" class="headerlink" title="4.4.2 调用"></a>4.4.2 调用</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">call procedure_name() </span><br></pre></td></tr></table></figure>

<h5 id="4-4-3-查看"><a href="#4-4-3-查看" class="headerlink" title="4.4.3 查看"></a>4.4.3 查看</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询db_name数据库中的所有的存储过程</span><br><span class="line">select name from mysql.proc where db&#x3D;&#39;db_name&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询存储过程的状态信息</span><br><span class="line">show procedure status\G;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询某个存储过程的定义</span><br><span class="line">show create procedure test.pro_test1 \G;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-4-删除"><a href="#4-4-4-删除" class="headerlink" title="4.4.4 删除"></a>4.4.4 删除</h5><blockquote>
<p>drop procedure 函数名(无括号);</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure pro_test1();</span><br></pre></td></tr></table></figure>



<h4 id="3、语法"><a href="#3、语法" class="headerlink" title="3、语法"></a>3、语法</h4><blockquote>
<p>存储过程是可以编程的，意味着可以使用变量，表达式，控制结构 ， 来完成比较复杂的功能。</p>
<p>表修改，调用时查询时也会改变。</p>
</blockquote>
<h5 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h5><blockquote>
<p>通过 declare可以定义一个局部变量，该变量的作用范围只能在 BEGIN…END 块中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test1()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int default 10;</span><br><span class="line">    -&gt; select num&#x3D;num+10;</span><br><span class="line">    -&gt; end@</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test1()@</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量赋值</p>
<p>直接赋值使用 <strong>set</strong>，可以赋常量或者赋表达式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test1()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare num int default 10;</span><br><span class="line">    -&gt; set num&#x3D; num +101;</span><br><span class="line">    -&gt; select num;</span><br><span class="line">    -&gt; end@</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>select…into…</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test2()</span><br><span class="line">    -&gt; begin </span><br><span class="line">    -&gt; declare num int;</span><br><span class="line">    -&gt; select count(*) into num from city;</span><br><span class="line">    -&gt; select concat(&#39;city表中的记录数是:&#39;,num);</span><br><span class="line">    -&gt; end</span><br><span class="line">    -&gt; @</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test2()@</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| concat(&#39;city表中的记录数是:&#39;,num)        |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">| city表中的记录数是:4                     |</span><br><span class="line">+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="3-2-if判断"><a href="#3-2-if判断" class="headerlink" title="3.2 if判断"></a>3.2 if判断</h5><blockquote>
<p><strong>if</strong>..then..elseif..then..else.<strong>.end if;</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create procedure pro_test4()</span><br><span class="line">    -&gt; begin</span><br><span class="line">    -&gt; declare height int default 175;</span><br><span class="line">    -&gt; declare description varchar(59) default &#39;&#39;;</span><br><span class="line">    -&gt; if height&gt;&#x3D; 180 then</span><br><span class="line">    -&gt; set description &#x3D;&#39;身材高挑&#39;;</span><br><span class="line">    -&gt; elseif height&gt;&#x3D;170 and height&lt;180 then</span><br><span class="line">    -&gt; set description &#x3D;&#39;标准身材&#39;;</span><br><span class="line">    -&gt; else </span><br><span class="line">    -&gt; set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">    -&gt; end if;</span><br><span class="line">    -&gt; select concat(&#39;身高&#39;,height,&#39;对应的身材类型为&#39;,description);</span><br><span class="line">    -&gt; end@</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; call pro_test4()@</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">| concat(&#39;身高&#39;,height,&#39;对应的身材类型为&#39;,description)           |</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">| 身高175对应的身材类型为标准身材                                |</span><br><span class="line">+----------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-3-带参存储过程"><a href="#3-3-带参存储过程" class="headerlink" title="3.3 带参存储过程"></a>3.3 带参存储过程</h5><blockquote>
<p>语法  create procedure pro_test(in 参数名 类型)</p>
<ul>
<li>in:   该参数可以作为输入，也就是需要调用方传入值 , 默认</li>
<li>out:   该参数作为输出，也就是该参数可以作为返回值</li>
<li>inout: 既可以作为输入参数，也可以作为输出参数</li>
</ul>
</blockquote>
<p><strong>in</strong></p>
<blockquote>
<p><strong>常用于表中已有字段名</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test6(in height int)</span><br><span class="line">begin</span><br><span class="line">declare description varchar(59) default &#39;&#39;;</span><br><span class="line">if height&gt;&#x3D; 180 then</span><br><span class="line">set description &#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height&gt;&#x3D;170 and height&lt;180 then</span><br><span class="line">set description &#x3D;&#39;标准身材&#39;;</span><br><span class="line">else </span><br><span class="line">set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">select concat(&#39;身高&#39;,height,&#39;对应的身材类型为&#39;,description);</span><br><span class="line">end@</span><br></pre></td></tr></table></figure>

<p><strong>out</strong></p>
<blockquote>
<p>用于查询表中未有参数，如聚合函数</p>
<ul>
<li><p><strong>select</strong> count(*) <strong>into</strong> <strong>num</strong> from emp;</p>
</li>
<li><p><strong>call sp_emp3(@num)</strong></p>
</li>
<li><p><strong>select @sum</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建out</span><br><span class="line">create procedure pro_test6(in height int,out description varchar(10))</span><br><span class="line">begin</span><br><span class="line">if height&gt;&#x3D; 180 then</span><br><span class="line">set description &#x3D;&#39;身材高挑&#39;;</span><br><span class="line">elseif height&gt;&#x3D;170 and height&lt;180 then</span><br><span class="line">set description &#x3D;&#39;标准身材&#39;;</span><br><span class="line">else </span><br><span class="line">set description&#x3D;&#39;一般身材&#39;;</span><br><span class="line">end if;</span><br><span class="line">end#</span><br><span class="line"></span><br><span class="line">-- 使用聚合函数</span><br><span class="line">DELIMITER &amp;</span><br><span class="line">CREATE PROCEDURE sp_emp3(out num INT)</span><br><span class="line">BEGIN</span><br><span class="line">	SELECT count(*) into num from emp;</span><br><span class="line">END &amp;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 调用</span><br><span class="line">call pro_test6(180,@description)#</span><br><span class="line">select @description#</span><br><span class="line"></span><br><span class="line">set@num&#x3D;0; -- 设置全局变量</span><br><span class="line">call sp_emp3(@num);</span><br><span class="line">select @num;</span><br></pre></td></tr></table></figure>

<p>ps</p>
<blockquote>
<p>@description :  这种变量要在变量名称前面加上“@”符号，叫做<strong>用户会话变量</strong>，代表整个会话过程他都是有作用的，这个类似于全局变量一样。</p>
<p>@@global.sort_buffer_size : 这种在变量前加上 “@@” 符号, 叫做 <strong>系统变量</strong> </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set @num&#x3D;&#39;hello&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @num;</span><br><span class="line">+-------+</span><br><span class="line">| @num  |</span><br><span class="line">+-------+</span><br><span class="line">| hello |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h5 id="3-4-case结构"><a href="#3-4-case结构" class="headerlink" title="3.4 case结构"></a>3.4 case结构</h5><blockquote>
<p><strong>语法</strong></p>
<ul>
<li><strong>case</strong>  case_value</li>
</ul>
<p>​     <strong>when</strong>  when_value  <strong>then</strong> statement_list</p>
<p>​     when  when_value2 then statement_list2</p>
<p>​     <strong>else</strong> statement_list3</p>
<p> <strong>end case</strong></p>
<ul>
<li><p>case </p>
<p>​    when 条件表达式 then statement_list</p>
<p>​    when ..</p>
<p>​    else..</p>
<p>end case;</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test3(in mon int)</span><br><span class="line">begin</span><br><span class="line">declare result varchar(40);</span><br><span class="line">case </span><br><span class="line">when mon&gt;&#x3D;1 and mon &lt;&#x3D;3 then</span><br><span class="line">set result&#x3D;&#39;第一季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;4 and mon &lt;&#x3D;6 then</span><br><span class="line">set result&#x3D;&#39;第二季度&#39;;</span><br><span class="line">when mon&gt;&#x3D;7 and mon &lt;&#x3D;9 then</span><br><span class="line">set result&#x3D;&#39;第三季度&#39;;</span><br><span class="line">else</span><br><span class="line">set result&#x3D;&#39;第四季度&#39;;</span><br><span class="line">end case;</span><br><span class="line">select concat(&#39;传递的月份为&#39;,mon,&#39;计算出的结果是:&#39;,result); </span><br><span class="line">end#</span><br></pre></td></tr></table></figure>



<h5 id="3-5-while循环"><a href="#3-5-while循环" class="headerlink" title="3.5 while循环"></a>3.5 while循环</h5><blockquote>
<p><strong>满足条件继续循环</strong></p>
</blockquote>
<blockquote>
<p><strong>while</strong> search_condition <strong>do</strong></p>
<p>​    statement_list</p>
<p><strong>end while;</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test4(in n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">declare num int default 0;</span><br><span class="line">while num&lt;&#x3D;n do</span><br><span class="line">set total&#x3D;total+num;</span><br><span class="line">set num&#x3D;num+1;</span><br><span class="line">end while;</span><br><span class="line">select concat(&#39;num的值&#39;,num,&#39;total的值&#39;,total);</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019083355334.png" alt="image-20201019083355334" style="zoom:80%;" />



<h5 id="3-6-repeat"><a href="#3-6-repeat" class="headerlink" title="3.6 repeat"></a>3.6 repeat</h5><blockquote>
<p><strong>满足条件退出循环</strong></p>
</blockquote>
<blockquote>
<p><strong>repeat</strong></p>
<p>​    statement_list;</p>
<p><strong>until</strong> search_condition（无分号）</p>
<p><strong>end repeat</strong>;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test8(in n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">repeat</span><br><span class="line">set total&#x3D;total+n;</span><br><span class="line">set n&#x3D;n-1;</span><br><span class="line">until n&#x3D;0</span><br><span class="line">end repeat;</span><br><span class="line">select total;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>



<h5 id="3-7-loop语句"><a href="#3-7-loop语句" class="headerlink" title="3.7 loop语句"></a>3.7 loop语句</h5><blockquote>
<p>通常使用<strong>leave</strong>语句进行退出</p>
<ul>
<li>loop语句本身无退出条件，故可以进行简单的<strong>死循环</strong></li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test10(in n int)</span><br><span class="line">begin</span><br><span class="line">declare total int default 0;</span><br><span class="line">-- c为循环的别名</span><br><span class="line">c:loop</span><br><span class="line">set total&#x3D;total+n;</span><br><span class="line">set n&#x3D;n-1;</span><br><span class="line"></span><br><span class="line">-- if循环进行判断，实现退出条件</span><br><span class="line">if n&lt;0 then</span><br><span class="line">leave c;</span><br><span class="line">end if;</span><br><span class="line"></span><br><span class="line">end loop c;</span><br><span class="line">select total;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>



<h5 id="3-8-游标-光标"><a href="#3-8-游标-光标" class="headerlink" title="3.8 游标/光标"></a>3.8 游标/光标</h5><blockquote>
<p>游标是用来存储<strong>查询结果集</strong>的数据类型，在存储过程和函数中可以使用光标对结果集进行循环的处理。</p>
</blockquote>
<p><strong>声明光标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare 游标名 cursor for 查询语句</span><br></pre></td></tr></table></figure>

<p><strong>打开光标</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open 游标名；</span><br></pre></td></tr></table></figure>

<p><strong>获取光标</strong></p>
<blockquote>
<p>调用一次fetch指针向下移动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetch 游标名 into 接收数据的变量名</span><br></pre></td></tr></table></figure>

<p><strong>关闭关闭</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">close 游标名;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test11()</span><br><span class="line">begin</span><br><span class="line">declare e_id int(11);</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int(11);</span><br><span class="line">declare e_salary int(11);</span><br><span class="line">declare emp_result cursor for select *from emp;</span><br><span class="line"></span><br><span class="line">open emp_result;</span><br><span class="line">fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;,e_id,&#39;,name&#x3D;&#39;,e_name,&#39;,age&#x3D;&#39;,e_age,&#39;,salary&#x3D;&#39;,e_salary);</span><br><span class="line">close emp_result;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019091344892.png" alt="image-20201019091344892" style="zoom:80%;" />

<p><strong>循环获取</strong></p>
<blockquote>
<p><strong>declare exit handler for not found set</strong> has_data=0;  光标无结果返回条件。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure pro_test12()</span><br><span class="line">begin</span><br><span class="line">declare e_id int(11);</span><br><span class="line">declare e_name varchar(50);</span><br><span class="line">declare e_age int(11);</span><br><span class="line">declare e_salary int(11);</span><br><span class="line">declare has_data int default 1;</span><br><span class="line"></span><br><span class="line">declare emp_result cursor for select *from emp;</span><br><span class="line">-- 抓取不到数据设置为0,放在游标后面</span><br><span class="line">declare exit handler for not found set has_data&#x3D;0;</span><br><span class="line"></span><br><span class="line">open emp_result;</span><br><span class="line"></span><br><span class="line">repeat</span><br><span class="line">fetch emp_result into e_id,e_name,e_age,e_salary;</span><br><span class="line">select concat(&#39;id&#x3D;&#39;,e_id,&#39;,name&#x3D;&#39;,e_name,&#39;,age&#x3D;&#39;,e_age,&#39;,salary&#x3D;&#39;,e_salary);</span><br><span class="line">until has_data&#x3D;0</span><br><span class="line">end repeat;</span><br><span class="line"></span><br><span class="line">close emp_result;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019092152503.png" alt="image-20201019092152503" style="zoom:80%;" />



<h4 id="4、存储函数function"><a href="#4、存储函数function" class="headerlink" title="4、存储函数function"></a>4、存储函数function</h4><blockquote>
<p><strong>是一个有返回值的存储过程</strong></p>
</blockquote>
<h5 id="4-1-创建存储函数"><a href="#4-1-创建存储函数" class="headerlink" title="4.1 创建存储函数"></a>4.1 创建存储函数</h5><blockquote>
<p><strong>create function</strong> function_name()</p>
<p>​    <strong>returns type</strong> (不能加分号)</p>
<p>begin</p>
<p>return 变量</p>
<p>end</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create function fun2(countryId int)</span><br><span class="line">returns int</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">	declare cnum int;</span><br><span class="line">	select count(*) into cnum from city where country_id&#x3D;countryId;</span><br><span class="line">	return cnum;</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select fun1(2)#</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019093239027.png" alt="image-20201019093239027" style="zoom:80%;" />

<h5 id="4-2-删除存储函数"><a href="#4-2-删除存储函数" class="headerlink" title="4.2 删除存储函数"></a>4.2 删除存储函数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop function fun2#</span><br></pre></td></tr></table></figure>





<h3 id="二、触发器"><a href="#二、触发器" class="headerlink" title="二、触发器"></a>二、触发器</h3><blockquote>
<p>与表有关的数据库对象，指在<strong>insert/update/delete</strong>之前或之后，触发并执行触发器中定义的SQL语句集合。</p>
<ul>
<li><p>可以协助应用在数据库确保数据完整性 , 日志记录 , 数据校验等操作 。</p>
</li>
<li><p><strong>触发器还只支持行级触发，不支持语句级触发。</strong></p>
</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>INSERT 型触发器</th>
<th>NEW 表示将要或者已经新增的数据</th>
</tr>
</thead>
<tbody><tr>
<td>INSERT触发器类型</td>
<td>NEW 和 OLD的使用</td>
</tr>
<tr>
<td>UPDATE 型触发器</td>
<td>OLD 表示修改之前的数据 , NEW 表示将要或已经修改后的数据</td>
</tr>
<tr>
<td>DELETE 型触发器</td>
<td>OLD 表示将要或者已经删除的数据</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger trigger_name</span><br><span class="line"></span><br><span class="line">before&#x2F;after insert&#x2F;update&#x2F;delete</span><br><span class="line"></span><br><span class="line">on 表名 </span><br><span class="line"></span><br><span class="line">for each row -- 行级触发器</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">	trigger_stmt ;</span><br><span class="line"></span><br><span class="line">end;</span><br></pre></td></tr></table></figure>



<h4 id="1、创建触发器"><a href="#1、创建触发器" class="headerlink" title="1、创建触发器"></a>1、创建触发器</h4><blockquote>
<p><strong>创建一张日志表</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_logs(</span><br><span class="line">  id int(11) not null auto_increment,</span><br><span class="line">  operation varchar(20) not null comment &#39;操作类型, insert&#x2F;update&#x2F;delete&#39;,</span><br><span class="line">  operate_time datetime not null comment &#39;操作时间&#39;,</span><br><span class="line">  operate_id int(11) not null comment &#39;操作表的ID&#39;,</span><br><span class="line">  operate_params varchar(500) comment &#39;操作参数&#39;,</span><br><span class="line">  primary key(&#96;id&#96;)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>



<h5 id="1-1-insert触发器"><a href="#1-1-insert触发器" class="headerlink" title="1.1 insert触发器"></a>1.1 insert触发器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_insert_trigger</span><br><span class="line">after insert</span><br><span class="line">on emp</span><br><span class="line">for each row</span><br><span class="line">begin</span><br><span class="line">insert into emp_logs(id,operation,operate_time,operate_id,operate_params) values(null,&#39;insert&#39;,now(),new.id,concat(&#39;插入后(id:&#39;,new.id,&#39;,name:&#39;,new.name,&#39;,age:&#39;,new.age,&#39;,salary:&#39;,new.salary,&#39;)&#39;));</span><br><span class="line">end#</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp(id,name,age,salary) values(null, &#39;光明左使&#39;,30,3500);</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201019132216659.png" alt="image-20201019132216659" style="zoom:80%;" />



<h5 id="1-2-update触发器"><a href="#1-2-update触发器" class="headerlink" title="1.2 update触发器"></a>1.2 update触发器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_update_trigger</span><br><span class="line">after update </span><br><span class="line">on emp </span><br><span class="line">for each row </span><br><span class="line">begin</span><br><span class="line">insert into emp_logs (id,operation,operate_time,operate_id,operate_params) values(null,&#39;update&#39;,now(),new.id,</span><br><span class="line">concat(&#39;修改前(id:&#39;,old.id,&#39;, name:&#39;,old.name,&#39;, age:&#39;,old.age,&#39;, salary:&#39;,old.salary,&#39;) , </span><br><span class="line">                                                                                                         修改后(id&#39;,new.id, &#39;name:&#39;,new.name,&#39;, age:&#39;,new.age,&#39;, salary:&#39;,new.salary,&#39;)&#39;));                                                                   </span><br><span class="line">end $</span><br></pre></td></tr></table></figure>



<h5 id="1-3-delete触发器"><a href="#1-3-delete触发器" class="headerlink" title="1.3 delete触发器"></a>1.3 delete触发器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create trigger emp_logs_delete_trigger</span><br><span class="line">after delete </span><br><span class="line">on emp </span><br><span class="line">for each row </span><br><span class="line">begin</span><br><span class="line">insert into emp_logs (id,operation,operate_time,operate_id,operate_params) values(null,&#39;delete&#39;,now(),old.id,</span><br><span class="line">concat(&#39;删除前(id:&#39;,old.id,&#39;, name:&#39;,old.name,&#39;, age:&#39;,old.age,&#39;, salary:&#39;,old.salary,&#39;)&#39;));                                                                     </span><br><span class="line">end $</span><br></pre></td></tr></table></figure>



<h4 id="2、查看触发器"><a href="#2、查看触发器" class="headerlink" title="2、查看触发器"></a>2、查看触发器</h4><blockquote>
<p>show triggers 触发器名;</p>
</blockquote>
<h4 id="3、删除触发器"><a href="#3、删除触发器" class="headerlink" title="3、删除触发器"></a>3、删除触发器</h4><blockquote>
<p>drop trigger 触发器名；</p>
</blockquote>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/2020/11/11/03%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h3 id="一、索引分析"><a href="#一、索引分析" class="headerlink" title="一、索引分析"></a>一、索引分析</h3><h4 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h4><h5 id="1-1-索引作用"><a href="#1-1-索引作用" class="headerlink" title="1.1 索引作用"></a>1.1 索引作用</h5><blockquote>
<ul>
<li><p><strong>索引是帮助MySql高效获取数据的数据结构B+树(有序)</strong></p>
</li>
<li><p>索引是数据库中用来<strong>提高性能</strong>的常用工具</p>
</li>
<li><p>索引往往以索引文件的形式存储在<strong>磁盘</strong>上。</p>
</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/ss.png" alt="ss" style="zoom:80%;" />



<h5 id="1-2-优劣势"><a href="#1-2-优劣势" class="headerlink" title="1.2 优劣势"></a>1.2 优劣势</h5><p><strong>优势</strong></p>
<blockquote>
<ul>
<li>提高数据检索的效率，降低数据库的IO成本</li>
<li>通过索引对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>
</ul>
</blockquote>
<p><strong>劣势</strong></p>
<blockquote>
<ul>
<li>索引也是一张表，保存了主键与索引字段，并指向实体类的记录，占用空间</li>
<li>提高了查询效率，但也降低了更新表的速度。更新表时，还需要保存一下索引文件每次更新添加索引列的字段，都会调整因为更新带来的键值变化后的索引信息</li>
</ul>
</blockquote>
<h5 id="1-3-索引分类"><a href="#1-3-索引分类" class="headerlink" title="1.3 索引分类"></a>1.3 索引分类</h5><blockquote>
<ul>
<li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li>
<li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li>
<li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li>
<li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li>
</ul>
</blockquote>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB引擎</th>
<th>MyISAM引擎</th>
<th>Memory引擎</th>
</tr>
</thead>
<tbody><tr>
<td>BTREE索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>HASH 索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-tree 索引</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本之后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<blockquote>
<p>索引，如果没有特别指明，都是指B+树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引、复合索引、前缀索引、唯一索引默认都是使用 B+tree 索引，统称为 索引</p>
</blockquote>
<h4 id="2、索引数据结构"><a href="#2、索引数据结构" class="headerlink" title="2、索引数据结构"></a>2、索引数据结构</h4><blockquote>
<p><strong>索引是在MySQL的存储引擎层实现</strong></p>
</blockquote>
<h5 id="2-1-BTree结构"><a href="#2-1-BTree结构" class="headerlink" title="2.1 BTree结构"></a>2.1 BTree结构</h5><p><strong>因为对于相同的数据量来说，BTREE的层级结构比二叉树小，因此搜索速度快。</strong></p>
<blockquote>
<p>B+树-多路平衡搜索树</p>
</blockquote>
<h6 id="m叉树特性"><a href="#m叉树特性" class="headerlink" title="m叉树特性"></a><strong>m叉树特性</strong></h6><blockquote>
<ul>
<li>树中每个节点最多包含m个孩子。</li>
<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子。</li>
<li>若根节点不是叶子节点，则至少有两个孩子。</li>
<li>所有的叶子节点都在同一层。</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 </li>
</ul>
</blockquote>
<h6 id="构建m叉树"><a href="#构建m叉树" class="headerlink" title="构建m叉树"></a>构建m叉树</h6><blockquote>
<p>以5叉BTree为例</p>
<p><strong>key的数量</strong>：公式推导[ceil(m/2)-1] &lt;= n &lt;= m-1，2 &lt;= n &lt;=4 。</p>
<p>当n&gt;4时，中间节点分裂到父节点，两边节点分裂。</p>
</blockquote>
<p>插入 C N G A H E K Q M F W L T Z D P R X Y S 数据为例。</p>
<p>演变过程如下：</p>
<p>1). 插入前4个字母 C N G A </p>
<p><img src="https://csn.damyoung.cn/1555944126588.png" alt="1555944126588"> </p>
<p>2). 插入H，n&gt;4，中间元素G字母向上分裂到新的节点</p>
<p><img src="https://csn.damyoung.cn/1555944549825.png" alt="1555944549825"> </p>
<p>3). 插入E，K，Q不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944596893.png" alt="1555944596893"> </p>
<p>4). 插入M，中间元素M字母向上分裂到父节点G</p>
<p><img src="https://csn.damyoung.cn/1555944652560.png" alt="1555944652560"> </p>
<p>5). 插入F，W，L，T不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944686928.png" alt="1555944686928"> </p>
<p>6). 插入Z，中间元素T向上分裂到父节点中 </p>
<p><img src="https://csn.damyoung.cn/1555944713486.png" alt="1555944713486"> </p>
<p>7). 插入D，中间元素D向上分裂到父节点中。然后插入P，R，X，Y不需要分裂</p>
<p><img src="https://csn.damyoung.cn/1555944749984.png" alt="1555944749984"> </p>
<p>8). 最后插入S，NPQR节点n&gt;5，中间节点Q向上分裂，但分裂后父节点DGMT的n&gt;5，中间节点M向上分裂</p>
<p><img src="https://csn.damyoung.cn/1555944848294.png" alt="1555944848294"> </p>
<h5 id="2-2-B-TREE-结构"><a href="#2-2-B-TREE-结构" class="headerlink" title="2.2  B+TREE 结构"></a>2.2  B+TREE 结构</h5><ul>
<li>由于B+Tree只有叶子节点保存key信息，<strong>查询任何key都要从root走到叶子</strong>。所以B+Tree的<strong>查询效率更加稳定。</strong></li>
</ul>
<p>B+Tree为BTree的变种，B+Tree与BTree的区别为：</p>
<blockquote>
<ul>
<li>m叉B+Tree最多含有m个key，而BTree最多含有m-1个key。</li>
<li>B+Tree的叶子节点保存所有的key信息，依key大小顺序排列。</li>
<li>所有的非叶子节点都可以看作是key的索引部分。</li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/00001.jpg" alt="1555906287178"> </p>
<h5 id="2-3-MySQL中的B-Tree"><a href="#2-3-MySQL中的B-Tree" class="headerlink" title="2.3 MySQL中的B+Tree"></a>2.3 MySQL中的B+Tree</h5><blockquote>
<p>MySql索引数据结构对经典的B+Tree进行了优化。</p>
<p>在原B+Tree的基础上，<strong>增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能。</strong></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/1555906287178.png" alt="1555906287178">  </p>
<h4 id="3、-索引分类"><a href="#3、-索引分类" class="headerlink" title="3、 索引分类"></a>3、 索引分类</h4><blockquote>
<ul>
<li>单值索引 ：即一个索引只包含单个列，一个表可以有多个单列索引</li>
<li>唯一索引 ：索引列的值必须唯一，但允许有空值</li>
<li>复合索引 ：即一个索引包含多个列</li>
</ul>
</blockquote>
<h4 id="4、索引语法"><a href="#4、索引语法" class="headerlink" title="4、索引语法"></a>4、索引语法</h4><blockquote>
<p>可以创建表同时创建，也可以随时创建新的索引</p>
</blockquote>
<h5 id="4-1-环境准备"><a href="#4-1-环境准备" class="headerlink" title="4.1 环境准备"></a>4.1 环境准备</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database demo_01 default charset&#x3D;utf8mb4;</span><br><span class="line"></span><br><span class="line">use demo_01;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;city&#96; (</span><br><span class="line">  &#96;city_id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;city_name&#96; varchar(50) NOT NULL,</span><br><span class="line">  &#96;country_id&#96; int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;city_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;country&#96; (</span><br><span class="line">  &#96;country_id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;country_name&#96; varchar(100) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;country_id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(1,&#39;西安&#39;,1);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(2,&#39;NewYork&#39;,2);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(3,&#39;北京&#39;,1);</span><br><span class="line">insert into &#96;city&#96; (&#96;city_id&#96;, &#96;city_name&#96;, &#96;country_id&#96;) values(4,&#39;上海&#39;,1);</span><br><span class="line"></span><br><span class="line">insert into &#96;country&#96; ( country_id, country_name) values(1,&#39;China&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, country_name) values(2,&#39;America&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, &#96;country_name&#96;) values(3,&#39;Japan&#39;);</span><br><span class="line">insert into &#96;country&#96; (&#96;country_id&#96;, &#96;country_name&#96;) values(4,&#39;UK&#39;);</span><br></pre></td></tr></table></figure>

<h5 id="4-2-主键索引"><a href="#4-2-主键索引" class="headerlink" title="4.2 主键索引"></a>4.2 主键索引</h5><blockquote>
<p>创建表时，主键自带主键索引 primary-key</p>
</blockquote>
<h5 id="4-3-创建索引"><a href="#4-3-创建索引" class="headerlink" title="4.3 创建索引"></a>4.3 创建索引</h5><blockquote>
<p><strong>create index</strong> 索引名称 <strong>on</strong> 表名(字段名)</p>
<p><strong>默认索引数据结构BTREE;</strong></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201018195002240.png" alt="image-20201018195002240"></p>
<h5 id="4-4-查看索引"><a href="#4-4-查看索引" class="headerlink" title="4.4 查看索引"></a>4.4 查看索引</h5><blockquote>
<p>show index from 表名\G;</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201018195115914.png" alt="image-20201018195115914"></p>
<h5 id="4-5-删除索引"><a href="#4-5-删除索引" class="headerlink" title="4.5 删除索引"></a>4.5 删除索引</h5><blockquote>
<p>drop index 索引名 on 表名</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018195404722.png" alt="image-20201018195404722" style="zoom:80%;" />



<h5 id="4-6-创建唯一索引"><a href="#4-6-创建唯一索引" class="headerlink" title="4.6 创建唯一索引"></a>4.6 创建唯一索引</h5><blockquote>
<p>alter table 表名 add unique 索引名(字段名)；</p>
</blockquote>
<blockquote>
<ul>
<li>这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）</li>
</ul>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201018200026641.png" alt="image-20201018200026641" style="zoom:80%;" />

<blockquote>
<p>alter  table  tb_name  add  index 索引名(字段名);</p>
<ul>
<li>添加普通索引， 索引值重复可出现多次。</li>
</ul>
</blockquote>
<blockquote>
<p>alter  table  tb_name  add  fulltext  索引名(字段名);    </p>
<ul>
<li>该语句指定了索引为<strong>FULLTEXT</strong>， 用于<strong>全文索引</strong></li>
</ul>
</blockquote>
<h5 id="4-7-创建复合索引"><a href="#4-7-创建复合索引" class="headerlink" title="4.7 创建复合索引"></a>4.7 创建复合索引</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建复合索引:</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_name_email_status ON tb_seller(NAME,email,STATUS);</span><br><span class="line"></span><br><span class="line">就相当于</span><br><span class="line">	对name 创建索引 ;</span><br><span class="line">	对name , email 创建了索引 ;</span><br><span class="line">	对name , email, status 创建了索引 ;</span><br></pre></td></tr></table></figure>



<h4 id="5、索引设计原则"><a href="#5、索引设计原则" class="headerlink" title="5、索引设计原则"></a>5、索引设计原则</h4><blockquote>
<ul>
<li>查询频次较高且数据量较大的表建立索引</li>
<li>索引字段：选择经常在<strong>where</strong>的条件中使用的字段提取</li>
<li>尽量使用<strong>唯一索引</strong>，区分度较高，使用索引的效率较高</li>
<li>可以有效提高查询数据的效率，索引越多，维护索引的<strong>代价</strong>就越高；对于insert、delete、update的DML操作较为频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率。增加相应操作的时间消耗。</li>
<li>索引创建后也是使用硬盘进行存储，使用<strong>短索引</strong>可以提升索引访问的I/O效率。</li>
<li>利用<strong>最左前缀</strong>，N个列组合而成的组合索引，那么相当于是创建了N个索引，如果查询时<strong>where子句中使用了组成该索引的前几个字段</strong>，那么这条查询SQL可以利用<strong>复合索引</strong>来提升查询效率</li>
</ul>
</blockquote>
<h3 id="二、索引的使用"><a href="#二、索引的使用" class="headerlink" title="二、索引的使用"></a>二、索引的使用</h3><blockquote>
<p>索引是数据库优化最常用也是最重要的手段之一, 通过索引通常可以帮助用户解决大多数的MySQL的性能优化问题。</p>
</blockquote>
<h4 id="1、环境准备"><a href="#1、环境准备" class="headerlink" title="1、环境准备"></a>1、环境准备</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table &#96;tb_seller&#96; (</span><br><span class="line">	&#96;sellerid&#96; varchar (100),</span><br><span class="line">	&#96;name&#96; varchar (100),</span><br><span class="line">	&#96;nickname&#96; varchar (50),</span><br><span class="line">	&#96;password&#96; varchar (60),</span><br><span class="line">	&#96;status&#96; varchar (1),</span><br><span class="line">	&#96;address&#96; varchar (100),</span><br><span class="line">	&#96;createtime&#96; datetime,</span><br><span class="line">    primary key(&#96;sellerid&#96;)</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8mb4; </span><br><span class="line"></span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;alibaba&#39;,&#39;阿里巴巴&#39;,&#39;阿里小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;baidu&#39;,&#39;百度科技有限公司&#39;,&#39;百度小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;huawei&#39;,&#39;华为科技有限公司&#39;,&#39;华为小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;itcast&#39;,&#39;传智播客教育科技有限公司&#39;,&#39;传智播客&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;itheima&#39;,&#39;黑马程序员&#39;,&#39;黑马程序员&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;luoji&#39;,&#39;罗技科技有限公司&#39;,&#39;罗技小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;oppo&#39;,&#39;OPPO科技有限公司&#39;,&#39;OPPO官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;0&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;ourpalm&#39;,&#39;掌趣科技股份有限公司&#39;,&#39;掌趣小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;qiandu&#39;,&#39;千度科技&#39;,&#39;千度小店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;2&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;sina&#39;,&#39;新浪科技有限公司&#39;,&#39;新浪官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;xiaomi&#39;,&#39;小米科技&#39;,&#39;小米官方旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;西安市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line">insert into &#96;tb_seller&#96; (&#96;sellerid&#96;, &#96;name&#96;, &#96;nickname&#96;, &#96;password&#96;, &#96;status&#96;, &#96;address&#96;, &#96;createtime&#96;) values(&#39;yijia&#39;,&#39;宜家家居&#39;,&#39;宜家家居旗舰店&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;,&#39;1&#39;,&#39;北京市&#39;,&#39;2088-01-01 12:00:00&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create index idx_seller_name_sta_addr on tb_seller(name,status,address);</span><br></pre></td></tr></table></figure>



<h4 id="2、避免索引失效"><a href="#2、避免索引失效" class="headerlink" title="2、避免索引失效"></a>2、避免索引失效</h4><h5 id="2-1-全值索引"><a href="#2-1-全值索引" class="headerlink" title="2.1 全值索引"></a>2.1 全值索引</h5><blockquote>
<p>对索引中所有列都指定具体值，该情况下，索引生效，执行效率高。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller where name&#x3D;&#39;小米科技&#39; and status&#x3D;&#39;1&#39; and address&#x3D;&#39;北京市&#39;\G;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020161200971.png" alt="image-20201020161200971"></p>
<h5 id="2-2-最左前缀法则"><a href="#2-2-最左前缀法则" class="headerlink" title="2.2 最左前缀法则"></a>2.2 最左前缀法则</h5><blockquote>
<p>指的是查询从索引的<strong>最左前列开始，并且不跳过索引中的列。</strong>(爬楼梯)</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020161615741.png" alt="image-20201020161615741" style="zoom:80%;" />

<img src="https://csn.damyoung.cn/image-20201020161638749.png" alt="image-20201020161638749" style="zoom:80%;" />

<blockquote>
<p>与顺序无关，而与是否有字段有关</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020161907488.png" alt="image-20201020161907488"></p>
<blockquote>
<p>跳过status,只有name有索引，address无索引</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020162055081.png" alt="image-20201020162055081" style="zoom:80%;" />



<h5 id="2-3-范围查询"><a href="#2-3-范围查询" class="headerlink" title="2.3 范围查询"></a>2.3 范围查询</h5><ul>
<li>范围查询右边的列，不能使用索引 。</li>
</ul>
<blockquote>
<p>根据前面的两个字段name ， status 查询是走索引的， 但是最后一个条件<strong>address 没有用到索引。</strong></p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163038952.png" alt="image-20201020163038952"></p>
<h5 id="2-4-运算操作"><a href="#2-4-运算操作" class="headerlink" title="2.4 运算操作"></a>2.4 运算操作</h5><blockquote>
<p>不要在索引列上进行运算操作， 索引将失效。</p>
</blockquote>
<img src="https://csn.damyoung.cn/image-20201020163325815.png" alt="image-20201020163325815" style="zoom:80%;" />



<h5 id="2-5-字符串"><a href="#2-5-字符串" class="headerlink" title="2.5 字符串"></a>2.5 字符串</h5><ul>
<li>字符串不加单引号，造成索引失效。</li>
</ul>
<blockquote>
<p>数字也要，否则不走索引(不加单引号，底层进行隐式运算操作)</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163529790.png" alt="image-20201020163529790"></p>
<h5 id="2-6-使用覆盖索引"><a href="#2-6-使用覆盖索引" class="headerlink" title="2.6 使用覆盖索引"></a>2.6 使用覆盖索引</h5><ul>
<li>尽量使用覆盖索引，避免select*</li>
</ul>
<blockquote>
<p>尽量使用<strong>覆盖索引</strong>（只访问索引的查询（索引列完全包含查询列）），减少select * 。</p>
<ul>
<li>但<strong>查询非索引字段还是需要回表查询</strong></li>
</ul>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020163837667.png" alt="image-20201020163837667"></p>
<p><strong>ps</strong></p>
<blockquote>
<ul>
<li><p>using index ：使用覆盖索引的时候就会出现</p>
</li>
<li><p>using where：在查找使用索引的情况下，需要回表去查询所需的数据</p>
</li>
<li><p>using index condition：查找使用了索引，但是需要回表查询数据</p>
</li>
<li><p>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据    </p>
</li>
</ul>
</blockquote>
<h5 id="2-7-or"><a href="#2-7-or" class="headerlink" title="2.7 or"></a>2.7 or</h5><ul>
<li>用or分割开的条件， 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">explain select * from tb_seller where name&#x3D;&#39;黑马程序员&#39; or createtime &#x3D; &#39;2088-01-01 12:00:00&#39;\G;</span><br></pre></td></tr></table></figure>

<p><img src="https://csn.damyoung.cn/image-20201020164303908.png" alt="image-20201020164303908"></p>
<h5 id="2-8-模糊查询"><a href="#2-8-模糊查询" class="headerlink" title="2.8 %模糊查询"></a>2.8 %模糊查询</h5><ul>
<li>以%开头的Like模糊查询，索引失效。</li>
</ul>
<blockquote>
<p>如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020164653957.png" alt="image-20201020164653957"></p>
<p><strong>解决：用覆盖索引解决</strong></p>
<p><img src="https://csn.damyoung.cn/image-20201020164819251.png" alt="image-20201020164819251"></p>
<p><img src="https://csn.damyoung.cn/image-20201020165132336.png" alt="image-20201020165132336"></p>
<h5 id="2-9-全表索引更快"><a href="#2-9-全表索引更快" class="headerlink" title="2.9 全表索引更快"></a>2.9 全表索引更快</h5><ul>
<li>如果MySQL评估使用索引比全表更慢，则不使用索引</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201020172558272.png" alt="image-20201020172558272"></p>
<h5 id="2-10-is-not-null"><a href="#2-10-is-not-null" class="headerlink" title="2.10 is not null"></a>2.10 is not null</h5><ul>
<li>is  NULL ， is NOT NULL  <font color='red'>有时</font>索引失效。</li>
</ul>
<blockquote>
<p>因为当前字段null是少量的</p>
</blockquote>
<p><img src="https://csn.damyoung.cn/image-20201020172804973.png" alt="image-20201020172804973"></p>
<h5 id="2-11-not-in"><a href="#2-11-not-in" class="headerlink" title="2.11 not in"></a>2.11 not in</h5><ul>
<li>in 走索引， not in 索引失效</li>
</ul>
<p><img src="https://csn.damyoung.cn/image-20201020173302116.png" alt="image-20201020173302116"></p>
<h5 id="2-12-单列索引"><a href="#2-12-单列索引" class="headerlink" title="2.12 单列索引"></a>2.12 单列索引</h5><ul>
<li>单列索引和复合索引。</li>
</ul>
<blockquote>
<p>尽量使用复合索引，而少使用单列索引 。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_name_sta_address on tb_seller(name, status, address);</span><br><span class="line"></span><br><span class="line">就相当于创建了三个索引 ： </span><br><span class="line">	name</span><br><span class="line">	name + status</span><br><span class="line">	name + status + address</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index idx_seller_name on tb_seller(name);</span><br><span class="line">create index idx_seller_status on tb_seller(status);</span><br><span class="line">create index idx_seller_address on tb_seller(address);</span><br><span class="line"></span><br><span class="line">数据库会选择一个最优的索引（辨识度最高索引）来使用，并不会使用全部索引 。</span><br></pre></td></tr></table></figure>



<h4 id="3、查看索引使用情况"><a href="#3、查看索引使用情况" class="headerlink" title="3、查看索引使用情况"></a>3、查看索引使用情况</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 当前会话使用情况</span><br><span class="line">show status like &#39;Handler_read%&#39;;	</span><br><span class="line"></span><br><span class="line">show global status like &#39;Handler_read%&#39;;	</span><br></pre></td></tr></table></figure>

<img src="https://csn.damyoung.cn/image-20201020173925206.png" alt="image-20201020173925206" style="zoom:80%;" />

<blockquote>
<ul>
<li><p>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</p>
</li>
<li><p>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</p>
</li>
<li><p>Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</p>
</li>
<li><p>Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</p>
</li>
<li><p>Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</p>
</li>
<li><p>Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
</search>
